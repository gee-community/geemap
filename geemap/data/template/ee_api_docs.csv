name	description	function	returns	argument	type	details
ee.Algorithms.CannyEdgeDetector	Applies the Canny edge detection algorithm to an image. The output is an image whose bands have the same names as the input bands, and in which non-zero values indicate edges, and the magnitude of the value is the gradient magnitude.	ee.Algorithms.CannyEdgeDetector(image, threshold, sigma)	Image	image|threshold|sigma	Image|Float|Float, default: 1	The image on which to apply edge detection.|Threshold value. The pixel is only considered for edge detection if the gradient magnitude is higher than this threshold.|Sigma value for a gaussian filter applied before edge detection. 0 means apply no filtering.
ee.Algorithms.Collection	Returns a Collection containing the specified features.	ee.Algorithms.Collection(features)	FeatureCollection	features	List	The features comprising the collection.
ee.Algorithms.CrossCorrelation	Gives information on the quality of image registration between two (theoretically) co-registered images. The input is two images with the same number of bands. This function outputs an image composed of four bands of information. The first three are distances: the deltaX, deltaY, and the Euclidean distance for each pixel in imageA to the pixel which has the highest corresponding correlation coefficient in imageB. The fourth band is the value of the correlation coefficient for that pixel [-1 : +1].	ee.Algorithms.CrossCorrelation(imageA, imageB, maxGap, windowSize, maxMaskedFrac)	Image	imageA|imageB|maxGap|windowSize|maxMaskedFrac	Image|Image|Integer|Integer|Float, default: 0	First image, with N bands.|Second image, must have the same number of bands as imageA.|The greatest distance a pixel may shift in either X or Y.|Size of the window to be compared.|The maximum fraction of pixels within the correlation window that are allowed to be masked. This test is applied at each offset location within the search region. For each offset, the overlapping image patches are compared and a correlation score computed. A pixel within these overlapping patches is considered masked if either of the patches is masked there. If the test fails at any single location in the search region, the output pixel for which the correlation is being computed is considered invalid, and will be masked.
ee.Algorithms.Date	Creates a Date.	ee.Algorithms.Date(value, timeZone)	Date	value|timeZone	Object|String, default: null	A number (interpreted as milliseconds since 1970-01-01T00:00:00Z), or string such as '1996-01-01' or '1996-001' or '1996-01-01T08:00'.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Algorithms.Describe	Describes an object using a simple JSON-compatible structure.	ee.Algorithms.Describe(input)	Object	input	Object	The object to describe.
ee.Algorithms.Dictionary	Constructs a dictionary.	ee.Algorithms.Dictionary(input)	Dictionary	input	Object, default: null	An object to convert to a dictionary.  Either a JSON dictionary or a list of alternating key/value pairs.  Keys must be strings.
ee.Algorithms.FMask.fillMinima	Fills local minima.  Only works on INT types.	ee.Algorithms.FMask.fillMinima(image, borderValue, neighborhood)	Image	image|borderValue|neighborhood	Image|Long, default: null|Integer, default: 50	The image to fill.|The border value.|The size of the neighborhood to compute over.
ee.Algorithms.FMask.matchClouds	Runs the FMask cloud and shadow matching.  Outputs a single band ('csm'), containing the computed cloud and shadow masks.	ee.Algorithms.FMask.matchClouds(input, cloud, shadow, btemp, sceneLow, sceneHigh, neighborhood)	Image	input|cloud|shadow|btemp|sceneLow|sceneHigh|neighborhood	Image|Image|Image|Image|Float|Float|Integer, default: 50	The scene for which to compute cloud and shadow masks.|Potential cloud mask image. Expected to contain 1s for cloudy pixels and masked pixels everywhere else.|Potential shadow mask image. Expected to contain 1s for shadow pixels and masked pixels everywhere else.|Brightness temperature image, in Celsius.|The 0.175 percentile brightness temperature of the scene.|The 0.825 percentile brightness temperature of the scene.|The neighborhood to pad around each tile.
ee.Algorithms.Feature	Returns a Feature composed of the given geometry and metadata.	ee.Algorithms.Feature(geometry, metadata, geometryKey)	Feature	geometry|metadata|geometryKey	Geometry, default: null|Dictionary, default: {}|String, default: null	The geometry of the feature.|The properties of the feature.|Obsolete; has no effect.
ee.Algorithms.GeometryConstructors.LineString	Constructs a LineString from the given coordinates.	ee.Algorithms.GeometryConstructors.LineString(coordinates, crs, geodesic)	Geometry	coordinates|crs|geodesic	List|Projection, default: null|Boolean, default: null	The list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.
ee.Algorithms.GeometryConstructors.LinearRing	Constructs a LinearRing from the given coordinates, automatically adding the first point at the end if the ring is not explicitly closed.	ee.Algorithms.GeometryConstructors.LinearRing(coordinates, crs, geodesic)	Geometry	coordinates|crs|geodesic	List|Projection, default: null|Boolean, default: null	The list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.
ee.Algorithms.GeometryConstructors.MultiGeometry	Constructs a MultiGeometry from the given list of geometry elements.	ee.Algorithms.GeometryConstructors.MultiGeometry(geometries, crs, geodesic, maxError)	Geometry	geometries|crs|geodesic|maxError	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null	The list of geometries for the MultiGeometry.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.
ee.Algorithms.GeometryConstructors.MultiLineString	Constructs a MultiLineString from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiLineString(coordinates, crs, geodesic, maxError)	Geometry	coordinates|crs|geodesic|maxError	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null	The list of LineStrings, or to wrap a single LineString, the list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.
ee.Algorithms.GeometryConstructors.MultiPoint	Constructs a MultiPoint from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiPoint(coordinates, crs)	Geometry	coordinates|crs	List|Projection, default: null	The list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.
ee.Algorithms.GeometryConstructors.MultiPolygon	Constructs a MultiPolygon from the given coordinates.	ee.Algorithms.GeometryConstructors.MultiPolygon(coordinates, crs, geodesic, maxError, evenOdd)	Geometry	coordinates|crs|geodesic|maxError|evenOdd	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null|Boolean, default: true	A list of Polygons, or for one simple polygon, a list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left-inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order.
ee.Algorithms.GeometryConstructors.Point	Constructs a new Point from the given x,y coordinates.	ee.Algorithms.GeometryConstructors.Point(coordinates, crs)	Geometry	coordinates|crs	List|Projection, default: null	The coordinates of this Point in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.
ee.Algorithms.GeometryConstructors.Polygon	Constructs a Polygon from the given coordinates.	ee.Algorithms.GeometryConstructors.Polygon(coordinates, crs, geodesic, maxError, evenOdd)	Geometry	coordinates|crs|geodesic|maxError|evenOdd	List|Projection, default: null|Boolean, default: null|ErrorMargin, default: null|Boolean, default: true	A list of LinearRings where the first is the shell and the rest are holes, or for a simple polygon, a list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left-inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order.
ee.Algorithms.GeometryConstructors.Rectangle	Constructs a rectangular polygon from the given corner points.	ee.Algorithms.GeometryConstructors.Rectangle(coordinates, crs, geodesic, evenOdd)	Geometry	coordinates|crs|geodesic|evenOdd	List|Projection, default: null|Boolean, default: null|Boolean, default: true	The low and then high corners of the Rectangle, as a list of Points or pairs of Numbers in x,y order.|The coordinate reference system of the coordinates. The  default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left-inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order.
ee.Algorithms.HillShadow	Creates a shadow band, with output 1 where pixels are illumunated and 0 where they are shadowed. Takes as input an elevation band, azimuth and zenith of the light source in degrees, a neighborhood size, and whether or not to apply hysteresis when a shadow appears. Currently, this algorithm only works for Mercator projections, in which light rays are parallel.	ee.Algorithms.HillShadow(image, azimuth, zenith, neighborhoodSize, hysteresis)	Image	image|azimuth|zenith|neighborhoodSize|hysteresis	Image|Float|Float|Integer, default: 0|Boolean, default: false	The image to which to apply the shadow algorithm, in whicheach pixel should represent an elevation in meters.|Azimuth in degrees.|Zenith in degrees.|Neighborhood size.|Use hysteresis. Less physically accurate, but may generate better images.
ee.Algorithms.HoughTransform	Applies the Hough transform to an image. For every input band, outputs a band where lines are detected by thresholding the Hough transform with a value of lineThreshold. The output band is named [input]_lines, where [input] is the name of the original band. The defaults provided for the parameters are intended as a starting point for use with UINT8 images.	ee.Algorithms.HoughTransform(image, gridSize, inputThreshold, lineThreshold, smooth)	Image	image|gridSize|inputThreshold|lineThreshold|smooth	Image|Integer, default: 256|Float, default: 64|Float, default: 72|Boolean, default: true	The image to which to apply the transform.|Grid size.|Value threshold for input image. Pixels equal to or above this value are considered active.|Threshold for line detection. Values equal to or above this threshold on the Hough transform are considered to be detected lines.|Whether to smooth the Hough transform before line detection.
ee.Algorithms.If	Selects one of its inputs based on a condition, similar to an if-then-else construct.	ee.Algorithms.If(condition, trueCase, falseCase)	Object	condition|trueCase|falseCase	Object, default: null|Object, default: null|Object, default: null	The condition that determines which result is returned. If this is not a boolean, it is interpreted as a boolean by the following rules:|  - Numbers that are equal to 0 or a NaN are false.|  - Empty strings, lists and dictionaries are false.|  - Null is false.|  - Everything else is true.|The result to return if the condition is true.|The result to return if the condition is false.
ee.Algorithms.Image.Segmentation.GMeans	Performs G-Means clustering on the input image. Iteratively applies k-means followed by a normality test to automatically determine the number of clusters to use. The output contains a 'clusters' band containing the integer ID of the cluster that each pixel belongs to. The algorithm can work either on a fixed grid of non-overlapping cells (gridSize, which can be smaller than a tile) or on tiles with overlap (neighborhoodSize). The default is to use tiles with no overlap. Clusters in one cell or tile are unrelated to clusters in another. Any cluster that spans a cell or tile boundary may receive two different labels in the two halves. Any input pixels with partial masks are fully masked in the output. This algorithm is only expected to perform well for images with a narrow dynamic range (i.e. bytes or shorts).	ee.Algorithms.Image.Segmentation.GMeans(image, numIterations, pValue, neighborhoodSize, gridSize, uniqueLabels)	Image	image|numIterations|pValue|neighborhoodSize|gridSize|uniqueLabels	Image|Integer, default: 10|Float, default: 50|Integer, default: 0|Integer, default: null|Boolean, default: true	The input image for clustering.|Number of iterations. Default 10.|Significance level for normality test.|Neighborhood size.  The amount to extend each tile (overlap) when computing the clusters. This option is mutually exclusive with gridSize.|Grid cell-size.  If greater than 0, kMeans will be run independently on cells of this size. This has the effect of limiting the size of any cluster to be gridSize or smaller.  This option is mutually exclusive with neighborhoodSize.|If true, clusters are assigned unique IDs. Otherwise, they repeat per tile or grid cell.
ee.Algorithms.Image.Segmentation.KMeans	Performs K-Means clustering on the input image. Outputs a 1-band image  containing the ID of the cluster that each pixel belongs to.  The algorithm can work either on a fixed grid of non-overlapping cells (gridSize, which can be smaller than a tile) or on tiles with overlap (neighborhoodSize). The default is to use tiles with no overlap.  Clusters in one cell or tile are unrelated to clusters in another.  Any cluster that spans a cell or tile boundary may receive two different labels in the two halves.  Any input pixels with partial masks are fully masked in the output.	ee.Algorithms.Image.Segmentation.KMeans(image, numClusters, numIterations, neighborhoodSize, gridSize, forceConvergence, uniqueLabels)	Image	image|numClusters|numIterations|neighborhoodSize|gridSize|forceConvergence|uniqueLabels	Image|Integer, default: 8|Integer, default: 20|Integer, default: 0|Integer, default: null|Boolean, default: false|Boolean, default: true	The input image for clustering.|Number of clusters.|Number of iterations.|Neighborhood size.  The amount to extend each tile (overlap) when computing the clusters. This option is mutually exclusive with gridSize.|Grid cell-size.  If greater than 0, kMeans will be run independently on cells of this size. This has the effect of limiting the size of any cluster to be gridSize or smaller.  This option is mutually exclusive with neighborhoodSize.|If true, an error is thrown if convergence is not achieved before numIterations.|If true, clusters are assigned unique IDs. Otherwise, they repeat per tile or grid cell.
ee.Algorithms.Image.Segmentation.SNIC	Superpixel clustering based on SNIC (Simple Non-Iterative Clustering). Outputs a band of cluster IDs and the per-cluster averages for each of the input bands. If the 'seeds' image isn't provided as input, the output will include a 'seeds' band containing the generated seed locations. See: Achanta, Radhakrishna and Susstrunk, Sabine, 'Superpixels and Polygons using Simple Non-Iterative Clustering', CVPR, 2017.	ee.Algorithms.Image.Segmentation.SNIC(image, size, compactness, connectivity, neighborhoodSize, seeds)	Image	image|size|compactness|connectivity|neighborhoodSize|seeds	Image|Integer, default: 5|Float, default: 1|Integer, default: 8|Integer, default: null|Image, default: null	The input image for clustering.|The superpixel seed location spacing, in pixels. If 'seeds' image is provided, no grid is produced.|Compactness factor. Larger values cause clusters to be more compact (square). Setting this to 0 disables spatial distance weighting.|Connectivity.  Either 4 or 8.|Tile neighborhood size (to avoid tile boundary artifacts). Defaults to 2 * size.|If provided, any non-zero valued pixels are used as seed locations. Pixels that touch (as specified by 'connectivity') are considered to belong to the same cluster.
ee.Algorithms.Image.Segmentation.seedGrid	Selects seed pixels for clustering.	ee.Algorithms.Image.Segmentation.seedGrid(size, gridType)	Image	size|gridType	"Integer, default: 5|String, default: ""square"""	The superpixel seed location spacing, in pixels.|Type of grid. One of 'square' or 'hex'.
ee.Algorithms.IsEqual	Returns whether two objects are equal.	ee.Algorithms.IsEqual(left, right)	Boolean	left|right	Object, default: null|Object, default: null	|
ee.Algorithms.Landsat.TOA	Calibrates Landsat DN to TOA reflectance and brightness temperature for Landsat and similar data. For recently-acquired scenes calibration coefficients are extracted from the image metadata; for older scenes the coefficients are derived from:	ee.Algorithms.Landsat.TOA(input)	Image	input	Image	The Landsat image to process.
ee.Algorithms.Landsat.calibratedRadiance	Calibrates each band of an image by applying linear transformation with slope RADIANCE_MULT_BAND_N and y-intercept RADIANCE_ADD_BAND_N; these values are extracted from the image metadata.	ee.Algorithms.Landsat.calibratedRadiance(image)	Image	image	Image	The input Landsat image.
ee.Algorithms.Landsat.pathRowLimit	Limits requests to an ImageCollection of Landsat scenes to return a controllable number of the best scenes for each request. This is intended for use with statistical algorithms like median composites that need a certain amount of good data to perform well, but that do not benefit substantially from additional data beyond that while becoming needlessly expensive.  The default arguments select approximately one year's worth of good data.	ee.Algorithms.Landsat.pathRowLimit(collection, maxScenesPerPathRow, maxScenesTotal)	ImageCollection	collection|maxScenesPerPathRow|maxScenesTotal	ImageCollection|Integer, default: 25|Integer, default: 100	The Landsat ImageCollection to limit.|The max number of scenes to return per path/row.|The max number of scenes to return per request total.
ee.Algorithms.Landsat.simpleCloudScore	Computes a simple cloud-likelihood score in the range [0,100] using a combination of brightness, temperature, and NDSI.  This is not a robust cloud detector, and is intended mainly to compare multiple looks at the same point for *relative* cloud likelihood.	ee.Algorithms.Landsat.simpleCloudScore(image)	Image	image	Image	The Landsat TOA image to process.
ee.Algorithms.Landsat.simpleComposite	Computes a Landsat TOA composite from a collection of raw Landsat scenes.  It applies standard TOA calibration and then assigns a cloud score to each pixel using the SimpleLandsatCloudScore algorithm. It selects the lowest possible range of cloud scores at each point and then computes per-band percentile values from the accepted pixels.  This algorithm also uses the LandsatPathRowLimit algorithm to select only the least-cloudy scenes in regions where more than maxDepth input scenes are available.	ee.Algorithms.Landsat.simpleComposite(collection, percentile, cloudScoreRange, maxDepth, asFloat)	Image	collection|percentile|cloudScoreRange|maxDepth|asFloat	ImageCollection|Integer, default: 50|Integer, default: 10|Integer, default: 40|Boolean, default: false	The raw Landsat ImageCollection to composite.|The percentile value to use when compositing each band.|The size of the range of cloud scores to accept per pixel.|An approximate limit on the maximum number of scenes used to compute each pixel.|If true, output bands are in the same units as the Landsat.TOA algorithm; if false, TOA values are converted to uint8 by multiplying by 255 (reflective bands) or subtracting 100 (thermal bands) and rounding to the nearest integer.
ee.Algorithms.ProjectionTransform	Transforms the geometry of a feature to a specific projection.	ee.Algorithms.ProjectionTransform(feature, proj, maxError)	Feature	feature|proj|maxError	Element|Projection, optional|ErrorMargin, default: null	The feature the geometry of which is being converted.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Algorithms.String	Converts the input to a string.	ee.Algorithms.String(input)	String	input	Object	The object to convert.
ee.Algorithms.TemporalSegmentation.Ccdc	Implements the Continuous Change Detection and Classification temporal breakpoint algorithm.  This algorithm finds temporal breakpoints in an image collection by iteratively fitting harmonic functions to the data.  Fit coefficients are produced for all input bands, but the bands used for breakpoint detection can be specified with the 'breakpointBands' argument.	ee.Algorithms.TemporalSegmentation.Ccdc(collection, breakpointBands, tmaskBands, minObservations, chiSquareProbability, minNumOfYearsScaler, dateFormat, lambda, maxIterations)	Image	collection|breakpointBands|tmaskBands|minObservations|chiSquareProbability|minNumOfYearsScaler|dateFormat|lambda|maxIterations	ImageCollection|List, default: null|List, default: null|Integer, default: 6|Float, default: 0.99|Float, default: 1.33|Integer, default: 0|Float, default: 20|Integer, default: 25000	Collection of images on which to run CCDC.|The name or index of the bands to use for change detection. If unspecified, all bands are used.|The name or index of the bands to use for iterative TMask cloud detection. These are typically the green band and the SWIR2 band.  If unspecified, TMask is not used.  If specified, 'tmaskBands' must be included in 'breakpointBands'.|The number of observations required to flag a change.|The chi-square probability threshold for change detection in the range of [0, 1]|Factors of minimum number of years to apply new fitting.|The time representation to use during fitting: 0 = jDays, 1 = fractional years,  2 = unix time in milliseconds. The start, end and break times for each temporal  segment will be encoded this way.|Lambda for LASSO regression fitting. If set to 0, regular OLS is used instead of LASSO.|Maximum number of runs for LASSO regression convergence. If set to 0, regular OLS is used instead of LASSO.
ee.Algorithms.TemporalSegmentation.Ewmacd	Exponentially Weighted Moving Average Change Detection. This algorithm computes a harmonic model for the 'training' portion of the input data and subtracts that from the original results.  The residuals are then subjected to Shewhart X-bar charts and an exponentially weighted moving average.  Disturbed pixels are indicated when the charts signal a deviation from the given control limits.	ee.Algorithms.TemporalSegmentation.Ewmacd(timeSeries, vegetationThreshold, trainingStartYear, trainingEndYear, harmonicCount, xBarLimit1, xBarLimit2, lambda, lambdasigs, rounding, persistence)	Image	timeSeries|vegetationThreshold|trainingStartYear|trainingEndYear|harmonicCount|xBarLimit1|xBarLimit2|lambda|lambdasigs|rounding|persistence	ImageCollection|Float|Integer|Integer|Integer, default: 2|Float, default: 1.5|Integer, default: 20|Float, default: 0.3|Float, default: 3|Boolean, default: true|Integer, default: 3	Collection from which to extract EWMA. This collection is expected to contain 1 image for each year and be sorted temporally.|Threshold for vegetation. Values below this are considered non-vegetation.|Start year of training period, inclusive.|End year of training period, exclusive.|Number of harmonic function pairs (sine and cosine) used.|Threshold for initial training xBar limit.|Threshold for running xBar limit.|The 'lambda' tuning parameter weighting new years vs the running average.|EWMA control bounds, in units of standard deviations.|Should rounding be performed for EWMA|Minimum number of observations needed to consider a change.
ee.Algorithms.TemporalSegmentation.LandTrendr	Landsat-based detection of Trends in Disturbance and Recovery: temporally segments a time-series of images by extracting the spectral trajectories of change over time. The first band of each image is used to find breakpoints, and those breakpoints are used to perform fitting on all subsequent bands. The breakpoints are returned as a 2-D matrix of 4 rows and as many columns as images. The first two rows are the original X and Y values. The third row contains the Y values fitted to the estimated segments, and the 4th row contains a 1 if the corresponding point was used as a segment vertex or 0 if not. Any additional fitted bands are appended as rows in the output. Breakpoint fitting assumes that increasing values represent disturbance and decreasing values represent recovery.	ee.Algorithms.TemporalSegmentation.LandTrendr(timeSeries, maxSegments, spikeThreshold, vertexCountOvershoot, preventOneYearRecovery, recoveryThreshold, pvalThreshold, bestModelProportion, minObservationsNeeded)	Image	timeSeries|maxSegments|spikeThreshold|vertexCountOvershoot|preventOneYearRecovery|recoveryThreshold|pvalThreshold|bestModelProportion|minObservationsNeeded	ImageCollection|Integer|Float, default: 0.9|Integer, default: 3|Boolean, default: false|Float, default: 0.25|Float, default: 0.1|Float, default: 1.25|Integer, default: 6	Yearly time-series from which to extract breakpoints. The first band is usedto find breakpoints, and all subsequent bands are fitted using those breakpoints.|Maximum number of segments to be fitted on the time series.|Threshold for dampening the spikes (1.0 means no dampening).|The initial model can overshoot the maxSegments + 1 vertices by this amount. Later, it will be pruned down to maxSegments + 1.|Prevent segments that represent one year recoveries.|If a segment has a recovery rate faster than 1/recoveryThreshold (in years), then the segment is disallowed.|If the p-value of the fitted model exceeds this threshold, then the current model is discarded and another one is fitted using the Levenberg-Marquardt optimizer.|Takes the model with most vertices that has a p-value that is at most this proportion away from the model with lowest p-value.|Min observations needed to perform output fitting.
ee.Algorithms.TemporalSegmentation.LandTrendrFit	Interpolates a time series using a set of LandTrendr breakpoint years. For each input band in the timeSeries, outputs a new 1D array-valued band containing the input values interpolated between the breakpoint times identified by the vertices image.  See the LandTrendr Algorithm for more details.	ee.Algorithms.TemporalSegmentation.LandTrendrFit(timeSeries, vertices, spikeThreshold, minObservationsNeeded)	Image	timeSeries|vertices|spikeThreshold|minObservationsNeeded	ImageCollection|Image|Float, default: 0.9|Integer, default: 6	Time series to interpolate.|Vertices image. A 1D array of LandTrendr breakpoint years.|Threshold for dampening input spikes (1.0 means no dampening).|Min observations needed.
ee.Algorithms.TemporalSegmentation.VCT	Vegetation Change Tracker, an automated approach for reconstructing recent forest disturbance history using dense Landsat time series stacks.	ee.Algorithms.TemporalSegmentation.VCT(timeSeries, landCover, maxUd, minNdvi, forThrMax, nYears)	Image	timeSeries|landCover|maxUd|minNdvi|forThrMax|nYears	ImageCollection|ImageCollection|Float, default: 4|Float, default: 0.45|Float, default: 3|Integer, default: 30	Collection from which to extract VCT disturbances, containing the bands: B3, B4, B5, B7, thermal, NDVI, DNBR and COMP.  This collection is expected to contain 1 image for each year, sorted by time.|Collection from which to extract VCT masks. This collection is expected to contain 1 image for each image in the timeSeries, sorted by time.|Maximum Z-score composite value for detecting forest.|Minimum NDVI value for forest.|Maximum threshold for forest.|Maximum number of years.
ee.Algorithms.TemporalSegmentation.Verdet	Vegetation Regeneration and Disturbance Estimates through Time, forest change detection algorithm. This algorithm generates a yearly clear-sky composite from satellite imagery, calculates a spectral vegetation index for each pixel in that composite, spatially segments the vegetation index image into patches, temporally divides the time series into differently sloped segments, and then labels those segments as disturbed, stable, or regenerating. Segmentation at both the spatial and temporal steps are performed using total variation regularization.	ee.Algorithms.TemporalSegmentation.Verdet(timeSeries, tolerance, alpha, nRuns)	Image	timeSeries|tolerance|alpha|nRuns	ImageCollection|Float, default: 0.0001|Float, default: 0.03333333333333333|Integer, default: 100	Collection from which to extract VeRDET scores. This collection is expected to contain 1 image for each year, sorted temporally.|convergence tolerance|Regularization parameter for segmentation.|Maximum number of runs for convergence.
ee.Algorithms.Terrain	Calculates slope, aspect, and a simple hillshade from a terrain DEM.	ee.Algorithms.Terrain(input)	Image	input	Image	An elevation image, in meters.
ee.Array	Returns an array with the given coordinates.	ee.Array(values, pixelType)	Array	values|pixelType	Object|PixelType, default: null	An existing array to cast, or a number/list of numbers/nested list of numbers of any depth to create an array from. For nested lists, all inner arrays at the same depth must have the same length, and numbers may only be present at the deepest level.|The type of each number in the values argument. If the pixel type is not provided, it will be inferred from the numbers in 'values'. If there aren't any numbers in 'values', this type must be provided.
ee.Array.abs	On an element-wise basis, computes the absolute value of the input.	Array.abs()	Array	input	Array	The input array.
ee.Array.accum	Accumulates elements of an array along the given axis, by setting each element of the result to the reduction of elements along that axis up to and including the current position. May be used to make a cumulative sum, a monotonically increasing sequence, etc.	Array.accum(axis, reducer)	Array	array|axis|reducer	Array|Integer|Reducer, default: null	Array to accumulate.|Axis along which to perform the accumulation.|Reducer to accumulate values. Default is SUM, to produce the cumulative sum of each vector along the given axis.
ee.Array.acos	On an element-wise basis, computes the arc cosine in radians of the input.	Array.acos()	Array	input	Array	The input array.
ee.Array.add	On an element-wise basis, adds the first value to the second.	Array.add(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.and	On an element-wise basis, returns 1 iff both values are non-zero.	Array.and(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.argmax	Returns the position, as a list of indices in each array axis, of the maximum value in an array, or null if the array is empty. If there are multiple occurrences of the maximum, returns the position of the first.	Array.argmax()	List	array	Array
ee.Array.asin	On an element-wise basis, computes the arc sine in radians of the input.	Array.asin()	Array	input	Array	The input array.
ee.Array.atan	On an element-wise basis, computes the arc tangent in radians of the input.	Array.atan()	Array	input	Array	The input array.
ee.Array.atan2	On an element-wise basis, calculates the angle formed by the 2D vector [x, y].	Array.atan2(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitCount	On an element-wise basis, calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Array.bitCount()	Array	input	Array	The input array.
ee.Array.bitsToArray	Convert the bits of an integer to an Array.  The array has as many elements as the position of the highest set bit, or a single 0 for a value of 0.	ee.Array.bitsToArray(input)	Array	input	Number
ee.Array.bitwiseAnd	On an element-wise basis, calculates the bitwise AND of the input values.	Array.bitwiseAnd(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitwiseNot	On an element-wise basis, calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Array.bitwiseNot()	Array	input	Array	The input array.
ee.Array.bitwiseOr	On an element-wise basis, calculates the bitwise OR of the input values.	Array.bitwiseOr(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitwiseXor	On an element-wise basis, calculates the bitwise XOR of the input values.	Array.bitwiseXor(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitwise_and	On an element-wise basis, calculates the bitwise AND of the input values.	Array.bitwise_and(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitwise_not	On an element-wise basis, calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Array.bitwise_not()	Array	input	Array	The input array.
ee.Array.bitwise_or	On an element-wise basis, calculates the bitwise OR of the input values.	Array.bitwise_or(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.bitwise_xor	On an element-wise basis, calculates the bitwise XOR of the input values.	Array.bitwise_xor(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.byte	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.byte()	Array	input	Array	The input array.
ee.Array.cat	Concatenates multiple arrays into a single array along the given axis.  Each array must have the same dimensionality and the same length on all axes except the concatenation axis.	ee.Array.cat(arrays, axis)	Array	arrays|axis	List|Integer, default: 0	Arrays to concatenate.|Axis to concatenate along.
ee.Array.cbrt	On an element-wise basis, computes the cubic root of the input.	Array.cbrt()	Array	input	Array	The input array.
ee.Array.ceil	On an element-wise basis, computes the smallest integer greater than or equal to the input.	Array.ceil()	Array	input	Array	The input array.
ee.Array.cos	On an element-wise basis, computes the cosine of the input in radians.	Array.cos()	Array	input	Array	The input array.
ee.Array.cosh	On an element-wise basis, computes the hyperbolic cosine of the input.	Array.cosh()	Array	input	Array	The input array.
ee.Array.cut	Cut an array along one or more axes.	Array.cut(position)	Array	array|position	Array|List	The array to cut.|Cut an array along one or more axes.  The positions args specifies either a single value for each axis of the array, or -1, indicating the whole axis.  The output will be an array that has the same dimensions as the input, with a length of 1 on each axis that was not -1 in the positions array.
ee.Array.digamma	On an element-wise basis, computes the digamma function of the input.	Array.digamma()	Array	input	Array	The input array.
ee.Array.divide	On an element-wise basis, divides the first value by the second, returning 0 for division by 0.	Array.divide(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.dotProduct	Compute the dot product between two 1-D arrays.	Array.dotProduct(array2)	Number	array1|array2	Array|Array	The first 1-D array.|The second 1-D array.
ee.Array.double	On an element-wise basis, casts the input value to a 64-bit float.	Array.double()	Array	input	Array	The input array.
ee.Array.eigen	Computes the real eigenvectors and eigenvalues of a square 2D array of A rows and A columns. Returns an array with A rows and A+1 columns, where each row contains an eigenvalue in the first column, and the corresponding eigenvector in the remaining A columns. The rows are sorted by eigenvalue, in descending order.	Array.eigen()	Array	input	Array	A square, 2D array from which to compute the eigenvalue decomposition.
ee.Array.eq	On an element-wise basis, returns 1 iff the first value is equal to the second.	Array.eq(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.erf	On an element-wise basis, computes the error function of the input.	Array.erf()	Array	input	Array	The input array.
ee.Array.erfInv	On an element-wise basis, computes the inverse error function of the input.	Array.erfInv()	Array	input	Array	The input array.
ee.Array.erfc	On an element-wise basis, computes the complementary error function of the input.	Array.erfc()	Array	input	Array	The input array.
ee.Array.erfcInv	On an element-wise basis, computes the inverse complementary error function of the input.	Array.erfcInv()	Array	input	Array	The input array.
ee.Array.exp	On an element-wise basis, computes the Euler's number e raised to the power of the input.	Array.exp()	Array	input	Array	The input array.
ee.Array.first	On an element-wise basis, selects the value of the first value.	Array.first(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.firstNonZero	On an element-wise basis, selects the first value if it is non-zero, and the second value otherwise.	Array.firstNonZero(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.first_nonzero	On an element-wise basis, selects the first value if it is non-zero, and the second value otherwise.	Array.first_nonzero(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.float	On an element-wise basis, casts the input value to a 32-bit float.	Array.float()	Array	input	Array	The input array.
ee.Array.floor	On an element-wise basis, computes the largest integer less than or equal to the input.	Array.floor()	Array	input	Array	The input array.
ee.Array.gamma	On an element-wise basis, computes the gamma function of the input.	Array.gamma()	Array	input	Array	The input array.
ee.Array.gammainc	On an element-wise basis, calculates the regularized lower incomplete Gamma function γ(x,a).	Array.gammainc(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.get	Extracts the value at the given position from the input array.	Array.get(position)	Number	array|position	Array|List	The array to extract from.|The coordinates of the element to get.
ee.Array.gt	On an element-wise basis, returns 1 iff the first value is greater than the second.	Array.gt(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.gte	On an element-wise basis, returns 1 iff the first value is greater than or equal to the second.	Array.gte(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.hypot	On an element-wise basis, calculates the magnitude of the 2D vector [x, y].	Array.hypot(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.identity	Creates a 2D identity matrix of the given size.	ee.Array.identity(size)	Array	size	Integer	The length of each axis.
ee.Array.int	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.int()	Array	input	Array	The input array.
ee.Array.int16	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.int16()	Array	input	Array	The input array.
ee.Array.int32	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.int32()	Array	input	Array	The input array.
ee.Array.int64	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.int64()	Array	input	Array	The input array.
ee.Array.int8	On an element-wise basis, casts the input value to a signed 8-bit integer.	Array.int8()	Array	input	Array	The input array.
ee.Array.lanczos	On an element-wise basis, computes the Lanczos approximation of the input.	Array.lanczos()	Array	input	Array	The input array.
ee.Array.leftShift	On an element-wise basis, calculates the left shift of v1 by v2 bits.	Array.leftShift(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.left_shift	On an element-wise basis, calculates the left shift of v1 by v2 bits.	Array.left_shift(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.length	Returns a 1-D EEArray containing the length of each dimension of the given EEArray.	Array.length()	Array	array	Array	The array from which to extract the axis lengths.
ee.Array.log	On an element-wise basis, computes the natural logarithm of the input.	Array.log()	Array	input	Array	The input array.
ee.Array.log10	On an element-wise basis, computes the base-10 logarithm of the input.	Array.log10()	Array	input	Array	The input array.
ee.Array.long	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.long()	Array	input	Array	The input array.
ee.Array.lt	On an element-wise basis, returns 1 iff the first value is less than the second.	Array.lt(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.lte	On an element-wise basis, returns 1 iff the first value is less than or equal to the second.	Array.lte(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.mask	Creates a subarray by slicing out each position in an input array that is parallel to a non-zero element of the given mask array.	Array.mask(mask)	Array	input|mask	Array|Array	Array to mask.|Mask array.
ee.Array.matrixCholeskyDecomposition	Calculates the Cholesky decomposition of a matrix. The Cholesky decomposition is a decomposition into the form L*L' where L is a lower triangular matrix. The input must be a symmetric positive-definite matrix. Returns a dictionary with 1 entry named 'L'.	Array.matrixCholeskyDecomposition()	Dictionary	array	Array	The array to decompose.
ee.Array.matrixDeterminant	Computes the determinant of the matrix.	Array.matrixDeterminant()	Number	input	Array	The array to compute on.
ee.Array.matrixDiagonal	Computes the diagonal of the matrix in a single column.	Array.matrixDiagonal()	Array	input	Array	The input array.
ee.Array.matrixFnorm	Computes the Frobenius norm of the matrix.	Array.matrixFnorm()	Number	input	Array	The array to compute on.
ee.Array.matrixInverse	Computes the inverse of the matrix.	Array.matrixInverse()	Array	input	Array	The input array.
ee.Array.matrixLUDecomposition	Calculates the LU matrix decomposition such that P×input=L×U, where L is lower triangular (with unit diagonal terms), U is upper triangular and P is a partial pivot permutation matrix. The input matrix must be square. Returns a dictionary with entries named 'L', 'U' and 'P'.	Array.matrixLUDecomposition()	Dictionary	array	Array	The array to decompose.
ee.Array.matrixMultiply	Returns the matrix multiplication A*B.	Array.matrixMultiply(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.matrixPseudoInverse	Computes the Moore-Penrose pseudoinverse of the matrix.	Array.matrixPseudoInverse()	Array	input	Array	The input array.
ee.Array.matrixQRDecomposition	Calculates the QR-decomposition of a matrix into two matrices Q and R such that input = QR, where Q is orthogonal, and R is upper triangular. Returns a dictionary with entries named 'Q' and 'R'.	Array.matrixQRDecomposition()	Dictionary	array	Array	The array to decompose.
ee.Array.matrixSingularValueDecomposition	Calculates the Singular Value Decomposition of the input matrix into U×S×V', such that U and V are orthogonal and S is diagonal. Returns a dictionary with entries named 'U', 'S' and 'V'.	Array.matrixSingularValueDecomposition()	Dictionary	array	Array	The array to decompose.
ee.Array.matrixSolve	Solves for x in the matrix equation A*x=B, finding a least-squares solution if A is overdetermined.	Array.matrixSolve(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.matrixToDiag	Computes a square diagonal matrix from a single column matrix.	Array.matrixToDiag()	Array	input	Array	The input array.
ee.Array.matrixTrace	Computes the trace of the matrix.	Array.matrixTrace()	Number	input	Array	The array to compute on.
ee.Array.matrixTranspose	Transposes two dimensions of an array.	Array.matrixTranspose(axis1, axis2)	Array	array|axis1|axis2	Array|Integer, default: 0|Integer, default: 1	Array to transpose.|First axis to swap.|Second axis to swap.
ee.Array.max	On an element-wise basis, selects the maximum of the first and second values.	Array.max(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.min	On an element-wise basis, selects the minimum of the first and second values.	Array.min(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.mod	On an element-wise basis, calculates the remainder of the first value divided by the second.	Array.mod(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.multiply	On an element-wise basis, multiplies the first value by the second.	Array.multiply(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.neq	On an element-wise basis, returns 1 iff the first value is not equal to the second.	Array.neq(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.not	On an element-wise basis, returns 0 if the input is non-zero, and 1 otherwise.	Array.not()	Array	input	Array	The input array.
ee.Array.or	On an element-wise basis, returns 1 iff either input value is non-zero.	Array.or(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.pad	Pad an array to a given length. The pad value will be repeatedly appended to the array to extend it to given length along each axis. If the array is already as large or larger than a given length, it will remain unchanged along that axis.	Array.pad(lengths, pad)	Array	array|lengths|pad	Array|List|Number, default: 0	Array to pad.|A list of new lengths for each axis.|The value with which to pad the array.
ee.Array.pow	On an element-wise basis, raises the first value to the power of the second.	Array.pow(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.project	Projects an array to a lower dimensional space by specifying the axes to retain. Dropped axes must be at most length 1.	Array.project(axes)	Array	array|axes	Array|List	Array to project.|The axes to project onto. Other axes will be discarded, and must be at most length 1.
ee.Array.reduce	Apply a reducer to an array by collapsing all the input values along each specified axis into a single output value computed by the reducer.	Array.reduce(reducer, axes, fieldAxis)	Array	array|reducer|axes|fieldAxis	Array|Reducer|List|Integer, default: null	The array.|The reducer to apply|The list of axes over which to reduce.  The output will have a length of 1 in all these axes.|The axis for the reducer's input and output fields.  Only required if the reducer has multiple inputs or outputs.
ee.Array.repeat	Repeats the array along the given axis. The result will have the shape of the input, except length along the repeated axis will be multiplied by the given number of copies.	Array.repeat(axis, copies)	Array	array|axis|copies	Array|Integer, default: 0|Integer, default: 2	Array to repeat.|The axis along which to repeat the array.|The number of copies of this array to concatenate along the given axis.
ee.Array.reshape	Reshapes an array to a new list of dimension lengths.	Array.reshape(shape)	Array	array|shape	Array|Array	Array to reshape.|New shape to which arrays are converted. If one component of the shape is the special value -1, the size of that dimension is computed so that the total size remains constant. In particular, a shape of [-1] flattens into 1-D. At most one component of shape can be -1.
ee.Array.rightShift	On an element-wise basis, calculates the signed right shift of v1 by v2 bits.	Array.rightShift(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.right_shift	On an element-wise basis, calculates the signed right shift of v1 by v2 bits.	Array.right_shift(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.round	On an element-wise basis, computes the integer nearest to the input.	Array.round()	Array	input	Array	The input array.
ee.Array.short	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.short()	Array	input	Array	The input array.
ee.Array.sin	On an element-wise basis, computes the sine of the input in radians.	Array.sin()	Array	input	Array	The input array.
ee.Array.sinh	On an element-wise basis, computes the hyperbolic sine of the input.	Array.sinh()	Array	input	Array	The input array.
ee.Array.slice	Creates a subarray by slicing out each position along the given axis from the 'start' (inclusive) to 'end' (exclusive) by increments of 'step'. The result will have as many dimensions as the input, and the same length in all directions except the slicing axis, where the length will be the number of positions from 'start' to 'end' by 'step' that are in range of the input array's length along 'axis'. This means the result can be length 0 along the given axis if start=end, or if the start or end values are entirely out of range.	Array.slice(axis, start, end, step)	Array	array|axis|start|end|step	Array|Integer, default: 0|Integer, default: 0|Integer, default: null|Integer, default: 1	Array to slice.|The axis to slice on.|The coordinate of the first slice (inclusive) along 'axis'. Negative numbers are used to position the start of slicing relative to the end of the array, where -1 starts at the last position on the axis, -2 starts at the next to last position, etc.|The coordinate (exclusive) at which to stop taking slices. By default this will be the length of the given axis. Negative numbers are used to position the end of slicing relative to the end of the array, where -1 will exclude the last position, -2 will exclude the last two positions, etc.|The separation between slices along 'axis'; a slice will be taken at each whole multiple of 'step' from 'start' (inclusive) to 'end' (exclusive). Must be positive.
ee.Array.sort	Sorts elements of the array along one axis.	Array.sort(keys)	Array	array|keys	Array|Array, default: null	Array image to sort.|Optional keys to sort by. If not provided, the values are used as the keys. The keys can only have multiple elements along one axis, which determines the direction to sort in.
ee.Array.sqrt	On an element-wise basis, computes the square root of the input.	Array.sqrt()	Array	input	Array	The input array.
ee.Array.subtract	On an element-wise basis, subtracts the second value from the first.	Array.subtract(right)	Array	left|right	Array|Array	The left-hand value.|The right-hand value.
ee.Array.tan	On an element-wise basis, computes the tangent of the input in radians.	Array.tan()	Array	input	Array	The input array.
ee.Array.tanh	On an element-wise basis, computes the hyperbolic tangent of the input.	Array.tanh()	Array	input	Array	The input array.
ee.Array.toByte	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.toByte()	Array	input	Array	The input array.
ee.Array.toDouble	On an element-wise basis, casts the input value to a 64-bit float.	Array.toDouble()	Array	input	Array	The input array.
ee.Array.toFloat	On an element-wise basis, casts the input value to a 32-bit float.	Array.toFloat()	Array	input	Array	The input array.
ee.Array.toInt	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.toInt()	Array	input	Array	The input array.
ee.Array.toInt16	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.toInt16()	Array	input	Array	The input array.
ee.Array.toInt32	On an element-wise basis, casts the input value to a signed 32-bit integer.	Array.toInt32()	Array	input	Array	The input array.
ee.Array.toInt64	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.toInt64()	Array	input	Array	The input array.
ee.Array.toInt8	On an element-wise basis, casts the input value to a signed 8-bit integer.	Array.toInt8()	Array	input	Array	The input array.
ee.Array.toList	Turns an Array into a list of lists of numbers.	Array.toList()	List	array	Array	Array to convert.
ee.Array.toLong	On an element-wise basis, casts the input value to a signed 64-bit integer.	Array.toLong()	Array	input	Array	The input array.
ee.Array.toShort	On an element-wise basis, casts the input value to a signed 16-bit integer.	Array.toShort()	Array	input	Array	The input array.
ee.Array.toUint16	On an element-wise basis, casts the input value to an unsigned 16-bit integer.	Array.toUint16()	Array	input	Array	The input array.
ee.Array.toUint32	On an element-wise basis, casts the input value to an unsigned 32-bit integer.	Array.toUint32()	Array	input	Array	The input array.
ee.Array.toUint8	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.toUint8()	Array	input	Array	The input array.
ee.Array.transpose	Transposes two dimensions of an array.	Array.transpose(axis1, axis2)	Array	array|axis1|axis2	Array|Integer, default: 0|Integer, default: 1	Array to transpose.|First axis to swap.|Second axis to swap.
ee.Array.trigamma	On an element-wise basis, computes the trigamma function of the input.	Array.trigamma()	Array	input	Array	The input array.
ee.Array.uint16	On an element-wise basis, casts the input value to an unsigned 16-bit integer.	Array.uint16()	Array	input	Array	The input array.
ee.Array.uint32	On an element-wise basis, casts the input value to an unsigned 32-bit integer.	Array.uint32()	Array	input	Array	The input array.
ee.Array.uint8	On an element-wise basis, casts the input value to an unsigned 8-bit integer.	Array.uint8()	Array	input	Array	The input array.
ee.Blob	Loads a Blob from a Google Cloud Storage URL.	ee.Blob(url)	Blob	url	String	The Blob's Google Cloud Storage URL.
ee.Blob.string	Returns the contents of the blob as a String.	Blob.string(encoding)	String	blob|encoding	Blob|String, default: null	|
ee.Blob.url	Returns the Blob's Google Cloud Storage URL.	Blob.url()	String	blob	Blob
ee.Classifier.cart	Creates an empty CART classifier. See:	ee.Classifier.cart(crossvalidationFactor, maxDepth, minLeafPopulation, minSplitPoplulation, minSplitCost, prune, pruneErrorTolerance, quantizationResolution, quantizationMargin, randomSeed)	Classifier	crossvalidationFactor|maxDepth|minLeafPopulation|minSplitPoplulation|minSplitCost|prune|pruneErrorTolerance|quantizationResolution|quantizationMargin|randomSeed	Integer, default: 10|Integer, default: 10|Integer, default: 1|Integer, default: 1|Float, default: 1e-10|Boolean, default: false|Float, default: 0.5|Integer, default: 100|Float, default: 0.1|Integer, default: 0	The cross-validation factor for pruning.|Do not grow initial tree deeper than this many levels.|Only create nodes whose training set contains at least this many points.|Do not split unless node has at least this many points.|Do not split if training set cost less than this.|Whether to skip pruning; i.e., only impose stopping criteria while growing the tree.|The standard error threshold to use in determining the simplest tree whose accuracy is comparable to the minimum cost-complexity tree.|The quantization resolution for numerical features.|The margin reserved by quantizer to avoid overload, as a fraction of the range observed in the training data.|The randomization seed.
ee.Classifier.confusionMatrix	Computes a 2D confusion matrix for a classifier based on its training data (ie: resubstitution error).  Axis 0 of the matrix correspond to the input classes, and axis 1 to the output classes.  The rows and columns  start at class 0 and increase sequentially up to the maximum class value, so some rows or columns might be empty if the input classes aren't 0-based or sequential.	Classifier.confusionMatrix()	ConfusionMatrix	classifier	Classifier	The classifier to use.
ee.Classifier.decisionTree	Creates a classifier that applies the given decision tree.	ee.Classifier.decisionTree(treeString)	Classifier	treeString	String	The decision tree, specified in the text format generated by R and other similar tools.
ee.Classifier.decisionTreeEnsemble	Creates a classifier that applies the given decision trees.	ee.Classifier.decisionTreeEnsemble(treeStrings)	Classifier	treeStrings	List	The decision trees, specified in the text format generated by R and other similar tools. Each item in the list should contain one or more trees in text format.
ee.Classifier.explain	Describe the results of a trained classifier.	Classifier.explain()	Dictionary	classifier	Classifier	The classifier to describe.
ee.Classifier.gmoMaxEnt	Creates an empty GMO Maximum Entropy classifier. See:	ee.Classifier.gmoMaxEnt(weight1, weight2, epsilon, minIterations, maxIterations)	Classifier	weight1|weight2|epsilon|minIterations|maxIterations	Float, default: 0|Float, default: 0.000009999999747378752|Float, default: 0.000009999999747378752|Integer, default: 0|Integer, default: 100	The weight for L1 regularization.|The weight for L2 regularization.|The epsilon for stopping optimization.|The minimum number of iterations of optimizer.|The maximum number of iterations of optimizer.
ee.Classifier.libsvm	Creates an empty Support Vector Machine classifier.	ee.Classifier.libsvm(decisionProcedure, svmType, kernelType, shrinking, degree, gamma, coef0, cost, nu, terminationEpsilon, lossEpsilon, oneClass)	Classifier	decisionProcedure|svmType|kernelType|shrinking|degree|gamma|coef0|cost|nu|terminationEpsilon|lossEpsilon|oneClass	"String, default: ""Voting""|String, default: ""C_SVC""|String, default: ""LINEAR""|Boolean, default: true|Integer, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Integer, default: null"	The decision procedure to use for classification. Either 'Voting' or 'Margin'. Not used for regression.|The SVM type. One of C_SVC, NU_SVC, ONE_CLASS, EPSILON_SVR or NU_SVR.|The kernel type. One of LINEAR (u′×v), POLY ((γ×u′×v + coef₀)ᵈᵉᵍʳᵉᵉ), RBF (exp(-γ×|u-v|²)) or SIGMOID (tanh(γ×u′×v + coef₀)).|Whether to use shrinking heuristics.|The degree of polynomial. Valid for POLY kernels.|The gamma value in the kernel function. Defaults to the reciprocal of the number of features. Valid for POLY, RBF and SIGMOID kernels.|The coef₀ value in the kernel function. Defaults to 0. Valid for POLY and SIGMOID kernels.|The cost (C) parameter. Defaults to 1. Only valid for C-SVC, epsilon-SVR, and nu-SVR.|The nu parameter. Defaults to 0.5. Only valid for nu-SVC, one-class SVM, and nu-SVR.|The termination criterion tolerance (e). Defaults to 0.001. Only valid for epsilon-SVR.|The epsilon in the loss function (p). Defaults to 0.1. Only valid for epsilon-SVR.|The class of the training data on which to train in a one-class SVM.  Defaults to 0. Only valid for one-class SVM.  Possible values are 0 and 1.  The classifier output is binary (0/1) and will match this class value for the data determined to be in the class.
ee.Classifier.minimumDistance	Creates a minimum distance classifier for the given distance metric.	ee.Classifier.minimumDistance(metric)	Classifier	metric	"String, default: ""euclidean"""	The distance metric to use.  Options are:|  'euclidean' - euclidean distance from the unnormalized class mean.|  'cosine' - spectral angle from the unnormalized class mean.|  'mahalanobis' - Mahalanobis distance from the class mean.
ee.Classifier.mode	Returns the classifier mode: CLASSIFICATION, REGRESSION or PROBABILITY.	Classifier.mode()	String	classifier	Classifier
ee.Classifier.naiveBayes	Creates an empty Fast Naive Bayes classifier.	ee.Classifier.naiveBayes(lambda)	Classifier	lambda	Float, default: 0.000001	A smoothing lambda. Used to avoid assigning zero probability to classes not seen during training, instead using lambda / (lambda * nFeatures).
ee.Classifier.randomForest	Creates an empty Rifle Serial classifier, which uses the Random Forest algorithm.	ee.Classifier.randomForest(numberOfTrees, variablesPerSplit, minLeafPopulation, bagFraction, outOfBagMode, seed)	Classifier	numberOfTrees|variablesPerSplit|minLeafPopulation|bagFraction|outOfBagMode|seed	Integer, default: 1|Integer, default: 0|Integer, default: 1|Float, default: 0.5|Boolean, default: false|Integer, default: 0	The number of Rifle decision trees to create per class.|The number of variables per split. If set to 0 (default), defaults to the square root of the number of variables.|The minimum size of a terminal node.|The fraction of input to bag per tree.|Whether the classifier should run in out-of-bag mode.|Random seed.
ee.Classifier.schema	Returns the names of the inputs used by this classifier, or null if this classifier has not had any training data added yet.	Classifier.schema()	List	classifier	Classifier
ee.Classifier.setOutputMode	Sets the output mode.	Classifier.setOutputMode(mode)	Classifier	classifier|mode	Classifier|String	An input classifier.|The output mode. One of:|  - CLASSIFICATION (default): The output is the class number.|  - REGRESSION: The output is the result of standard regression.|  - PROBABILITY: The output is the probability that the classification is correct.|Not all classifier types support REGRESSION and PROBABILITY modes.
ee.Classifier.smileCart	Creates an empty CART classifier. See:	ee.Classifier.smileCart(maxNodes, minLeafPopulation)	Classifier	maxNodes|minLeafPopulation	Integer, default: null|Integer, default: 1	The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.|Only create nodes whose training set contains at least this many points.
ee.Classifier.smileNaiveBayes	Creates an empty Naive Bayes classifier.	ee.Classifier.smileNaiveBayes(lambda)	Classifier	lambda	Float, default: 0.000001	A smoothing lambda. Used to avoid assigning zero probability to classes not seen during training, instead using lambda / (lambda * nFeatures).
ee.Classifier.smileRandomForest	Creates an empty Random Forest classifier.	ee.Classifier.smileRandomForest(numberOfTrees, variablesPerSplit, minLeafPopulation, bagFraction, maxNodes, seed)	Classifier	numberOfTrees|variablesPerSplit|minLeafPopulation|bagFraction|maxNodes|seed	Integer|Integer, default: null|Integer, default: 1|Float, default: 0.5|Integer, default: null|Integer, default: 0	The number of decision trees to create.|The number of variables per split. If unspecified, uses the square root of the number of variables.|Only create nodes whose training set contains at least this many points.|The fraction of input to bag per tree.|The maximum number of leaf nodes in each tree. If unspecified, defaults to no limit.|The randomization seed.
ee.Classifier.spectralRegion	Creates a classifier that tests if its inputs lie within a polygon defined by a set  of coordinates in an arbitrary 2D coordinate system.  Each input to be classified  must have 2 values (e.g.: images must have 2 bands).  The result will be 1 wherever  the input values are contained within the given polygon and 0 otherwise.	ee.Classifier.spectralRegion(coordinates, schema)	Classifier	coordinates|schema	List|List, default: null	The coordinates of the polygon, as a list of rings. Each ring is a list of coordinate pairs (e.g.: [u1, v1, u2, v2, ..., uN, vN]).  No edge may intersect any other edge. The resulting classification will be a 1 wherever the input values are within the interior of the given polygon, that is, an odd number of polygon edges must be crossed to get outside the polygon and 0 otherwise.|The classifier's schema.  A list of band or property names that the classifier will operate on.  Since this classifier doesn't undergo a training step, these have to be specified manually.  Defaults to ['u', 'v'].
ee.Classifier.svm	Creates a Support Vector Machine classifier.	ee.Classifier.svm(decisionProcedure, svmType, kernelType, shrinking, degree, gamma, coef0, cost, nu, terminationEpsilon, lossEpsilon, oneClass)	Classifier	decisionProcedure|svmType|kernelType|shrinking|degree|gamma|coef0|cost|nu|terminationEpsilon|lossEpsilon|oneClass	"String, default: ""Voting""|String, default: ""C_SVC""|String, default: ""LINEAR""|Boolean, default: true|Integer, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Float, default: null|Integer, default: null"	The decision procedure to use for classification. Either 'Voting' or 'Margin'. Not used for regression.|The SVM type. One of C_SVC, NU_SVC, ONE_CLASS, EPSILON_SVR or NU_SVR.|The kernel type. One of LINEAR (u′×v), POLY ((γ×u′×v + coef₀)ᵈᵉᵍʳᵉᵉ), RBF (exp(-γ×|u-v|²)) or SIGMOID (tanh(γ×u′×v + coef₀)).|Whether to use shrinking heuristics.|The degree of polynomial. Valid for POLY kernels.|The gamma value in the kernel function. Defaults to the reciprocal of the number of features. Valid for POLY, RBF and SIGMOID kernels.|The coef₀ value in the kernel function. Defaults to 0. Valid for POLY and SIGMOID kernels.|The cost (C) parameter. Defaults to 1. Only valid for C-SVC, epsilon-SVR, and nu-SVR.|The nu parameter. Defaults to 0.5. Only valid for of nu-SVC, one-class SVM, and nu-SVR.|The termination criterion tolerance (e). Defaults to 0.001. Only valid for epsilon-SVR.|The epsilon in the loss function (p). Defaults to 0.1. Only valid for epsilon-SVR.|The class of the training data on which to train in a one-class svm.  Defaults to 0. Only valid for one-class SVM.  Possible values are 0 and 1.  The classifier output is binary (0/1) and will match this class value for the data determined to be in the class.
ee.Classifier.train	Trains the classifier on a collection of features, using the specified numeric properties of each feature as training data. The geometry of the features is ignored.	Classifier.train(features, classProperty, inputProperties, subsampling, subsamplingSeed)	Classifier	classifier|features|classProperty|inputProperties|subsampling|subsamplingSeed	Classifier|FeatureCollection|String|List, default: null|Float, default: 1|Integer, default: 0	An input classifier.|The collection to train on.|The name of the property containing the class value. Each feature must have this property, and its value must be numeric.|The list of property names to include as training data. Each feature must have all these properties, and their values must be numeric.  This argument is optional if the input collection contains a 'band_order' property, (as produced by Image.sample).|An optional subsampling factor, within (0, 1].|A randomization seed to use for subsampling.
ee.Clusterer.schema	Returns the names of the inputs used by this Clusterer, or null if this Clusterer has not had any training data added yet.	Clusterer.schema()	List	clusterer	Clusterer
ee.Clusterer.train	Trains the Clusterer on a collection of features, using the specified numeric properties of each feature as training data. The geometry of the features is ignored.	Clusterer.train(features, inputProperties, subsampling, subsamplingSeed)	Clusterer	clusterer|features|inputProperties|subsampling|subsamplingSeed	Clusterer|FeatureCollection|List, default: null|Float, default: 1|Integer, default: 0	An input Clusterer.|The collection to train on.|The list of property names to include as training data. Each feature must have all these properties, and their values must be numeric.  This argument is optional if the input collection contains a 'band_order' property, (as produced by Image.sample).|An optional subsampling factor, within (0, 1].|A randomization seed to use for subsampling.
ee.Clusterer.wekaCascadeKMeans	Cascade simple k-means, selects the best k according to the Calinski-Harabasz criterion. For more information see:	ee.Clusterer.wekaCascadeKMeans(minClusters, maxClusters, restarts, manual, init, distanceFunction, maxIterations)	Clusterer	minClusters|maxClusters|restarts|manual|init|distanceFunction|maxIterations	"Integer, default: 2|Integer, default: 10|Integer, default: 10|Boolean, default: false|Boolean, default: false|String, default: ""Euclidean""|Integer, default: null"	Min number of clusters.|Max number of clusters.|Number of restarts.|Manually select the number of clusters.|Set whether to initialize using the probabilistic farthest first like method of the k-means++ algorithm (rather than the standard random selection of initial cluster centers).|Distance function to use.  Options are: Euclidean & Manhattan|Maximum number of iterations for k-means.
ee.Clusterer.wekaCobweb	Implementation of the Cobweb clustering algorithm. For more information see:	ee.Clusterer.wekaCobweb(acuity, cutoff, seed)	Clusterer	acuity|cutoff|seed	Float, default: 1|Float, default: 0.002|Integer, default: 42	Acuity (minimum standard deviation).|Cutoff (minimum category utility).|Random number seed.
ee.Clusterer.wekaKMeans	Cluster data using the k means algorithm. Can use either the Euclidean distance (default) or the Manhattan distance. If the Manhattan distance is used, then centroids are computed as the component-wise median rather than mean. For more information see:	ee.Clusterer.wekaKMeans(nClusters, init, canopies, maxCandidates, periodicPruning, minDensity, t1, t2, distanceFunction, maxIterations, preserveOrder, fast, seed)	Clusterer	nClusters|init|canopies|maxCandidates|periodicPruning|minDensity|t1|t2|distanceFunction|maxIterations|preserveOrder|fast|seed	"Integer|Integer, default: 0|Boolean, default: false|Integer, default: 100|Integer, default: 10000|Integer, default: 2|Float, default: -1.5|Float, default: -1|String, default: ""Euclidean""|Integer, default: null|Boolean, default: false|Boolean, default: false|Integer, default: 10"	Number of clusters.|Initialization method to use.0 = random, 1 = k-means++, 2 = canopy, 3 = farthest first.|Use canopies to reduce the number of distance calculations.|Maximum number of candidate canopies to retain in memory at any one time when using canopy clustering. T2 distance plus, data characteristics, will determine how many candidate canopies are formed before periodic and final pruning are performed, which might result in exceess memory consumption. This setting avoids large numbers of candidate canopies consuming memory.|How often to prune low density canopies when using canopy clustering.|Minimum canopy density, when using canopy clustering, below which a canopy will be pruned during periodic pruning.|The T1 distance to use when using canopy clustering. A value < 0 is taken as a positive multiplier for T2.|The T2 distance to use when using canopy clustering. Values < 0 cause a heuristic based on attribute std. deviation to be used.|Distance function to use.  Options are: Euclidean & Manhattan|Maximum number of iterations.|Preserve order of instances.|Enables faster distance calculations, using cut-off values. Disables the calculation/output of squared errors/distances|The randomization seed.
ee.Clusterer.wekaLVQ	A Clusterer that implements the Learning Vector Quantization algorithm. For more details, see:	ee.Clusterer.wekaLVQ(numClusters, learningRate, epochs, normalizeInput)	Clusterer	numClusters|learningRate|epochs|normalizeInput	Integer, default: 7|Float, default: 1|Integer, default: 1000|Boolean, default: false	The number of clusters.|The learning rate for the training algorithm. (Value should be greaterthan 0 and less or equal to 1).|Number of training epochs. (Value should be greater than or equal to 1).|Skip normalizing the attributes.
ee.Clusterer.wekaXMeans	X-Means is K-Means with an efficient estimation of the number of clusters. For more information see:	ee.Clusterer.wekaXMeans(minClusters, maxClusters, maxIterations, maxKMeans, maxForChildren, useKD, cutoffFactor, distanceFunction, seed)	Clusterer	minClusters|maxClusters|maxIterations|maxKMeans|maxForChildren|useKD|cutoffFactor|distanceFunction|seed	"Integer, default: 2|Integer, default: 8|Integer, default: 3|Integer, default: 1000|Integer, default: 1000|Boolean, default: false|Float, default: 0|String, default: ""Euclidean""|Integer, default: 10"	Minimum number of clusters.|Maximum number of clusters.|Maximum number of overall iterations.|The maximum number of iterations to perform in KMeans.|The maximum number of iterations in KMeans that is performed on the child centers.|Use a KDTree.|Takes the given percentage of the splitted centroids if none of the children win.|Distance function to use.  Options are: Chebyshev, Euclidean & Manhattan.|The randomization seed.
ee.ConfusionMatrix	Creates a confusion matrix. Axis 1 (the rows) of the matrix correspond to the actual values, and Axis 0 (the columns) to the predicted values.	ee.ConfusionMatrix(array, order)	ConfusionMatrix	array|order	Object|List, default: null	A square, 2D array of integers, representing the confusion matrix.|The row and column size and order, for non-contiguous or non-zero based matrices.
ee.ConfusionMatrix.accuracy	Computes the overall accuracy of a confusion matrix defined as correct / total.	ConfusionMatrix.accuracy()	Float	confusionMatrix	ConfusionMatrix
ee.ConfusionMatrix.array	Returns a confusion matrix as an Array.	ConfusionMatrix.array()	Array	confusionMatrix	ConfusionMatrix
ee.ConfusionMatrix.consumersAccuracy	Computes the consumer's accuracy (reliability) of a confusion matrix defined as (correct / total) for each row.	ConfusionMatrix.consumersAccuracy()	Array	confusionMatrix	ConfusionMatrix
ee.ConfusionMatrix.kappa	Computes the Kappa statistic for the confusion matrix.	ConfusionMatrix.kappa()	Float	confusionMatrix	ConfusionMatrix
ee.ConfusionMatrix.order	Returns the name and order of the rows and columns of the matrix.	ConfusionMatrix.order()	List	confusionMatrix	ConfusionMatrix
ee.ConfusionMatrix.producersAccuracy	Computes the producer's accuracy of a confusion matrix defined as (correct / total) for each column.	ConfusionMatrix.producersAccuracy()	Array	confusionMatrix	ConfusionMatrix
ee.Date	Constructs a new Date object.	ee.Date(date, tz)	Date	date|tz	ComputedObject|Date|Number|String|String, optional	The date to convert, one of: a number (number of milliseconds since the epoch), an ISO Date string, a JavaScript Date or a ComputedObject.|An optional timezone only to be used with a string date.
ee.Date.advance	Create a new Date by adding the specified units to the given Date.	Date.advance(delta, unit, timeZone)	Date	date|delta|unit|timeZone	Date|Float|String|String, default: null	||One of 'year', 'month' 'week', 'day', 'hour', 'minute', or 'second'.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Date.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Date.difference	Returns the difference between two Dates in the specified units; the result is floating-point and based on the average length of the unit.	Date.difference(start, unit)	Float	date|start|unit	Date|Date|String	||One of 'year', 'month' 'week', 'day', 'hour', 'minute', or 'second'.
ee.Date.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Date.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Date.format	Convert a date to string.	Date.format(format, timeZone)	String	date|format|timeZone	Date|String, default: null|String, default: null	|A pattern, as described at http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html; if omitted will use ISO standard date formatting.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.fromYMD	Returns a Date given year, month, day.	ee.Date.fromYMD(year, month, day, timeZone)	Date	year|month|day|timeZone	Integer|Integer|Integer|String, default: null	|||The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.get	Returns the specified unit of this date.	Date.get(unit, timeZone)	Long	date|unit|timeZone	Date|String|String, default: null	|One of 'year', 'month' (returns 1-12), 'week' (1-53), 'day' (1-31), 'hour' (0-23), 'minute' (0-59), or 'second' (0-59).|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.getFraction	Returns this date's elapsed fraction of the specified unit (between 0 and 1).	Date.getFraction(unit, timeZone)	Float	date|unit|timeZone	Date|String|String, default: null	|One of 'year', 'month' 'week', 'day', 'hour', 'minute', or 'second'.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.getInfo	Retrieves the value of this object from the server.	Date.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Date.getRange	Returns a DateRange covering the unit of the specified type that contains this date, e.g. Date('2013-3-15').getRange('year') returns DateRange('2013-1-1', '2014-1-1').	Date.getRange(unit, timeZone)	DateRange	date|unit|timeZone	Date|String|String, default: null	|One of 'year', 'month' 'week', 'day', 'hour', 'minute', or 'second'.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.getRelative	Returns the specified (0-based) unit of this date relative to a larger unit, e.g. getRelative('day', 'year') returns a value between 0 and 365.	Date.getRelative(unit, inUnit, timeZone)	Long	date|unit|inUnit|timeZone	Date|String|String|String, default: null	|One of 'month' 'week', 'day', 'hour', 'minute', or 'second'.|One of 'year', 'month' 'week', 'day', 'hour', or 'minute'.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.millis	The number of milliseconds since 1970-01-01T00:00:00Z.	Date.millis()	Long	date	Date
ee.Date.parse	Parse a date string, given a string describing its format.	ee.Date.parse(format, date, timeZone)	Date	format|date|timeZone	String|String|String, default: null	A pattern, as described at http://joda-time.sourceforge.net/apidocs/org/joda/time/format/DateTimeFormat.html.|A string matching the given pattern.|The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.Date.serialize	Returns the serialized representation of this object.	Date.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Date.unitRatio	Returns the ratio of the length of one unit to the length of another, e.g. unitRatio('day', 'minute') returns 1440.  Valid units are 'year', 'month' 'week', 'day', 'hour', 'minute', and 'second'.	ee.Date.unitRatio(numerator, denominator)	Float	numerator|denominator	String|String	|
ee.Date.update	Create a new Date by setting one or more of the units of the given Date to a new value.  If a timeZone is given the new value(s) is interpreted in that zone.	Date.update(year, month, day, hour, minute, second, timeZone)	Date	date|year|month|day|hour|minute|second|timeZone	Date|Integer, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Integer, default: null|String, default: null	|||||||The time zone (e.g. 'America/Los_Angeles'); defaults to UTC.
ee.DateRange	Creates a DateRange with the given start (inclusive) and end (exclusive), which may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). If 'end' is not specified, a 1-millisecond range starting at 'start' is created.	ee.DateRange(start, end, timeZone)	DateRange	start|end|timeZone	Object|Object, default: null|String, default: null	||If start and/or end are provided as strings, the time zone in which to interpret them; defaults to UTC.
ee.DateRange.contains	Returns true if the given Date or DateRange is within this DateRange.	DateRange.contains(other)	Boolean	dateRange|other	DateRange|Object	|
ee.DateRange.end	Returns the (exclusive) end of this DateRange.	DateRange.end()	Date	dateRange	DateRange
ee.DateRange.intersection	Returns a DateRange that contains all points in the intersection of this DateRange and another.	DateRange.intersection(other)	DateRange	dateRange|other	DateRange|DateRange	|
ee.DateRange.intersects	Returns true if the given DateRange has at least one point in common with this DateRange.	DateRange.intersects(other)	Boolean	dateRange|other	DateRange|DateRange	|
ee.DateRange.isEmpty	Returns true if this DateRange contains no dates (i.e. start >= end).	DateRange.isEmpty()	Boolean	dateRange	DateRange
ee.DateRange.isUnbounded	Returns true if this DateRange contains all dates.	DateRange.isUnbounded()	Boolean	dateRange	DateRange
ee.DateRange.start	Returns the (inclusive) start of this DateRange.	DateRange.start()	Date	dateRange	DateRange
ee.DateRange.unbounded	Returns a DateRange that includes all possible dates.	ee.DateRange.unbounded()	DateRange
ee.DateRange.union	Returns a DateRange that contains all points in the union of this DateRange and another.	DateRange.union(other)	DateRange	dateRange|other	DateRange|DateRange	|
ee.Dictionary	Constructs a new Dictionary.	ee.Dictionary(dict)	Dictionary	dict	ComputedObject|Object, optional	An object to convert to a dictionary. This constructor accepts the following types: 1) Another dictionary. 2) A list of key/value pairs. 3) A null or no argument (producing an empty dictionary)
ee.Dictionary.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Dictionary.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Dictionary.combine	Combines two dictionaries.  In the case of duplicate names, the output will contain the value of the second dictionary unless overwrite is false.  Null values in both dictionaries are ignored / removed.	Dictionary.combine(second, overwrite)	Dictionary	first|second|overwrite	Dictionary|Dictionary|Boolean, default: true	||
ee.Dictionary.contains	Returns true if the dictionary contains the given key.	Dictionary.contains(key)	Boolean	dictionary|key	Dictionary|String, default: null	|
ee.Dictionary.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Dictionary.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Dictionary.fromLists	Construct a dictionary from two parallel lists of keys and values.	ee.Dictionary.fromLists(keys, values)	Dictionary	keys|values	List|List	|
ee.Dictionary.get	Extracts a named value from a dictionary.  If the dictionary does not contain the given key, then defaultValue is returned, unless it is null.	Dictionary.get(key, defaultValue)	Object	dictionary|key|defaultValue	Dictionary|String|Object, default: null	||
ee.Dictionary.getArray	Extracts a named array value from a dictionary.	Dictionary.getArray(key)	Array	dictionary|key	Dictionary|String	|
ee.Dictionary.getGeometry	Extracts a named geometry value from a dictionary.	Dictionary.getGeometry(key)	Geometry	dictionary|key	Dictionary|String	|
ee.Dictionary.getInfo	Retrieves the value of this object from the server.	Dictionary.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Dictionary.getNumber	Extracts a named number value from a dictionary.	Dictionary.getNumber(key)	Number	dictionary|key	Dictionary|String	|
ee.Dictionary.getString	Extracts a named string value from a dictionary.	Dictionary.getString(key)	String	dictionary|key	Dictionary|String	|
ee.Dictionary.keys	Retrieve the keys of a dictionary as a list.  The keys will be sorted in natural order.	Dictionary.keys()	List	dictionary	Dictionary
ee.Dictionary.map	Map an algorithm over a dictionary.  The algorithm is expected to take 2 arguments, a key from the existing dictionary and the value it corresponds to, and return a new value for the given key.  If the algorithm returns null, the key is dropped.	Dictionary.map(baseAlgorithm)	Dictionary	dictionary|baseAlgorithm	Dictionary|Algorithm	|
ee.Dictionary.remove	Returns a dictionary with the specified keys removed.	Dictionary.remove(selectors, ignoreMissing)	Dictionary	dictionary|selectors|ignoreMissing	Dictionary|List|Boolean, default: false	|A list of keys names or regular expressions of key names to remove.|Ignore selectors that don't match at least 1 key.
ee.Dictionary.rename	Rename elements in a dictionary.	Dictionary.rename(from, to, overwrite)	Dictionary	dictionary|from|to|overwrite	Dictionary|List|List|Boolean, default: false	|A list of keys to be renamed.|A list of the new names for the keys listed in the 'from' parameter.  Must have the same length as the 'from' list.|Allow overwriting existing properties with the same name.
ee.Dictionary.select	Returns a dictionary with only the specified keys.	Dictionary.select(selectors, ignoreMissing)	Dictionary	dictionary|selectors|ignoreMissing	Dictionary|List|Boolean, default: false	|A list of keys or regular expressions to select.|Ignore selectors that don't match at least 1 key.
ee.Dictionary.serialize	Returns the serialized representation of this object.	Dictionary.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Dictionary.set	Set a value in a dictionary.	Dictionary.set(key, value)	Dictionary	dictionary|key|value	Dictionary|String|Object	||
ee.Dictionary.size	Returns the number of entries in a dictionary.	Dictionary.size()	Integer	dictionary	Dictionary
ee.Dictionary.toArray	Returns numeric values of a dictionary as an array. If no keys are specified, all values are returned in the natural ordering of the dictionary's keys. The default 'axis' is 0.	Dictionary.toArray(keys, axis)	Array	dictionary|keys|axis	Dictionary|List, default: null|Integer, default: 0	||
ee.Dictionary.toImage	Creates an image of constants from values in a dictionary. The bands of the image are ordered and named according to the names argument.  If no names are specified, the bands are sorted alpha-numerically.	Dictionary.toImage(names)	Image	dictionary|names	Dictionary|List, default: null	The dictionary to convert.|The order of the output bands.
ee.Dictionary.values	Returns the values of a dictionary as a list.  If no keys are specified, all values are returned in the natural ordering of the dictionary's keys.	Dictionary.values(keys)	List	dictionary|keys	Dictionary|List, default: null	|
ee.ErrorMargin	Returns an ErrorMargin of the given type with the given value.	ee.ErrorMargin(value, unit)	ErrorMargin	value|unit	"Float, default: null|String, default: ""meters"""	The maximum error value allowed by the margin. Ignored if the unit is 'infinite'.|The unit of this margin: 'meters', 'projected' or 'infinite'.
ee.Feature	Features can be constructed from one of the following arguments plus an optional dictionary of properties:	ee.Feature(geometry, properties)	Feature	geometry|properties	ComputedObject|Feature|Geometry|Object|Object, optional	A geometry or feature.|A dictionary of metadata properties. If the first parameter is a Feature (instead of a geometry), this is unused.
ee.Feature.area	Returns the area of the feature's default geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	Feature.area(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature from which the geometry is taken.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Feature.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Feature.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Feature.bounds	Returns a feature containing the bounding box of the geometry of a given feature.	Feature.bounds(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature the bound of which is being calculated.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Feature.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Feature.buffer(distance, maxError, proj)	Feature	feature|distance|maxError|proj	Element|Float|ErrorMargin, default: null|Projection, default: null	The feature the geometry of which is being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Feature.centroid	Returns a feature containing the point at the center of the highest-dimension components of the geometry of a feature. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Feature.centroid(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this feature's default geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Feature.containedIn	Returns true iff the geometry of one feature is contained in the geometry of another.	Feature.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.contains	Returns true iff the geometry of one feature contains the geometry of another.	Feature.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.convexHull	Returns the feature, with the geometry replaced by the convex hull of the original geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Feature.convexHull(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry whole hull is being calculated.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.copyProperties	Copies metadata properties from one element to another.	Feature.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	The object whose properties to override.|The object from which to copy the properties.|The properties to copy.  If omitted, all ordinary (i.e. non-system) properties are copied.|The list of properties to exclude when copying all properties. Must not be specified if properties is.
ee.Feature.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	Feature.cutLines(distances, maxError, proj)	Feature	feature|distances|maxError|proj	Element|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this feature's default geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Feature.difference	Returns a feature with the properties of the 'left' feature, and the geometry that results from subtracting the 'right' geometry from the 'left' geometry.	Feature.difference(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation. The properties of the result will be copied from this object.|The feature containing the geometry used as the right operand of the operation. The properties of this object are ignored.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.disjoint	Returns true iff the feature geometries are disjoint.	Feature.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.dissolve	Returns a feature containing the union of the geometry of a feature. This leaves single geometries untouched, and unions multi geometries.	Feature.dissolve(maxError, proj)	Element	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature the geometry of which is being unioned.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Feature.distance	Returns the minimum distance between the geometries of two features.	Feature.distance(right, maxError, proj)	Float	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Feature.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Feature.get	Extract a property from a feature.	Feature.get(property)		object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Feature.getArray	Extract a property from a feature.	Feature.getArray(property)	Array	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Feature.getInfo	An imperative function that returns information about this feature via an AJAX call.	Feature.getInfo(callback)	GeoJSONFeature	feature|callback	Feature|Function, optional	The Feature instance.|An optional callback. If not supplied, the call is made synchronously. If supplied, will be called with the first parameter if successful and the second if unsuccessful.
ee.Feature.getMap	An imperative function that returns a map ID and optional token, suitable for generating a Map overlay.	Feature.getMap(visParams, callback)	MapId|Object	feature|visParams|callback	Feature|Object, optional|Function, optional	"The Feature instance.|The visualization parameters. Currently only one parameter, 'color', containing an RGB color string is user.  If vis_params is null, black (""000000"") is used.|An async callback."
ee.Feature.getNumber	Extract a property from a feature.	Feature.getNumber(property)	Number	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Feature.getString	Extract a property from a feature.	Feature.getString(property)	String	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Feature.id	Returns the ID of a given element within a collection. Objects outside collections are not guaranteed to have IDs.	Feature.id()	String	element	Element	The element from which the ID is taken.
ee.Feature.intersection	Returns a feature containing the intersection of the geometries of two features, with the properties of the left feature.	Feature.intersection(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation. The properties of the result will be copied from this object.|The feature containing the geometry used as the right operand of the operation. The properties of this object are ignored.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.intersects	Returns true iff the feature geometries intersect.	Feature.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.length	Returns the length of the linear parts of the geometry of a given feature. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Feature.length(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature from which the geometry is taken.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Feature.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry of a given feature. The perimeter of multi geometries is the sum of the perimeters of their components.	Feature.perimeter(maxError, proj)	Float	feature|maxError|proj	Element|ErrorMargin, default: null|Projection, default: null	The feature from which the geometry is taken.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Feature.propertyNames	Returns the names of properties on this element.	Feature.propertyNames()	List	element	Element
ee.Feature.select	Selects properties from a feature by name or RE2-compatible regex and optionally renames them.	Feature.select(propertySelectors, newProperties, retainGeometry)	Element	input|propertySelectors|newProperties|retainGeometry	Element|List|List, default: null|Boolean, default: true	The feature to select properties from.|A list of names or regexes specifying the properties to select.|Optional new names for the output properties.  Must match the number of properties selected.|When false, the result will have a NULL geometry.
ee.Feature.serialize	Returns the serialized representation of this object.	Feature.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Feature.set	Overrides one or more metadata properties of an Element.	Feature.set(var_args)	Element	element|var_args	Element|VarArgs	The Element instance.|Either a dictionary of properties, or a vararg sequence of properties, e.g. key1, value1, key2, value2, ...
ee.Feature.setGeometry	Returns the feature, with the geometry replaced by the specified geometry.	Feature.setGeometry(geometry)	Element	feature|geometry	Element|Geometry, default: null	The feature on which to set the geometry.|The geometry to set.
ee.Feature.setMulti	Overrides one or more metadata properties of an object.	Feature.setMulti(properties)	Element	object|properties	Element|Dictionary	The object whose properties to override.|The property values to override.
ee.Feature.simplify	Simplifies the geometry of a feature to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Feature.simplify(maxError, proj)	Feature	feature|maxError|proj	Element|ErrorMargin|Projection, default: null	The feature whose geometry is being simplified.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Feature.symmetricDifference	Returns a feature containing the symmetric difference between geometries of two features.	Feature.symmetricDifference(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation. The properties of the result will be copied from this object.|The feature containing the geometry used as the right operand of the operation. The properties of this object are ignored.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.toArray	Creates an array from the given properties of an object, which must all be numbers.	Feature.toArray(properties)	Array	feature|properties	Feature|List	The object from which to select array properties.|The property selectors for each array element.
ee.Feature.toDictionary	Extract properties from a feature as a dictionary.	Feature.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	The feature to extract the property from.|The list of properties to extract.  Defaults to all non-system properties.
ee.Feature.transform	Transforms the geometry of a feature to a specific projection.	Feature.transform(proj, maxError)	Feature	feature|proj|maxError	Element|Projection, optional|ErrorMargin, default: null	The feature the geometry of which is being converted.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Feature.union	Returns a feature containing the union of the geometries of two features.	Feature.union(right, maxError, proj)	Feature	left|right|maxError|proj	Element|Element|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation. The properties of the result will be copied from this object.|The feature containing the geometry used as the right operand of the operation. The properties of this object are ignored.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Feature.withinDistance	Returns true iff the geometries of two features are within a specified distance.	Feature.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Element|Element|Float|ErrorMargin, default: null|Projection, default: null	The feature containing the geometry used as the left operand of the operation.|The feature containing the geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.FeatureCollection	FeatureCollections can be constructed from the following arguments:	ee.FeatureCollection(args, column)	FeatureCollection	args|column	ComputedObject|Feature|FeatureCollection|Geometry|List|String, optional	The constructor arguments.|The name of the geometry column to use.  Only useful when working with a named collection.
ee.FeatureCollection.aggregate_array	Aggregates over a given property of the objects in a collection, calculating a list of all the values of the selected property.	FeatureCollection.aggregate_array(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_count	Aggregates over a given property of the objects in a collection, calculating the number of non-null values of the property.	FeatureCollection.aggregate_count(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_count_distinct	Aggregates over a given property of the objects in a collection, calculating the number of distinct values for the selected property.	FeatureCollection.aggregate_count_distinct(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_first	Aggregates over a given property of the objects in a collection, calculating the property value of the first object in the collection.	FeatureCollection.aggregate_first(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_histogram	Aggregates over a given property of the objects in a collection, calculating a histogram of the selected property.	FeatureCollection.aggregate_histogram(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_max	Aggregates over a given property of the objects in a collection, calculating the maximum of the values of the selected property.	FeatureCollection.aggregate_max(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_mean	Aggregates over a given property of the objects in a collection, calculating the mean of the selected property.	FeatureCollection.aggregate_mean(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_min	Aggregates over a given property of the objects in a collection, calculating the minimum of the values of the selected property.	FeatureCollection.aggregate_min(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_product	Aggregates over a given property of the objects in a collection, calculating the product of the values of the selected property.	FeatureCollection.aggregate_product(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_sample_sd	Aggregates over a given property of the objects in a collection, calculating the sample std. deviation of the values of the selected property.	FeatureCollection.aggregate_sample_sd(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_sample_var	Aggregates over a given property of the objects in a collection, calculating the sample variance of the values of the selected property.	FeatureCollection.aggregate_sample_var(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_stats	Aggregates over a given property of the objects in a collection, calculating the sum, min, max, mean, sample standard deviation, sample variance, total standard deviation and total variance of the selected property.	FeatureCollection.aggregate_stats(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_sum	Aggregates over a given property of the objects in a collection, calculating the sum of the values of the selected property.	FeatureCollection.aggregate_sum(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_total_sd	Aggregates over a given property of the objects in a collection, calculating the total std. deviation of the values of the selected property.	FeatureCollection.aggregate_total_sd(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aggregate_total_var	Aggregates over a given property of the objects in a collection, calculating the total variance of the values of the selected property.	FeatureCollection.aggregate_total_var(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.FeatureCollection.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	FeatureCollection.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.FeatureCollection.classify	Classifies each feature in a collection.	FeatureCollection.classify(classifier, outputName)	FeatureCollection	features|classifier|outputName	"FeatureCollection|Classifier|String, default: ""classification"""	The collection of features to classify. Each feature must contain all the properties in the classifier's schema.|The classifier to use.|The name of the output property to be added.
ee.FeatureCollection.cluster	Clusters each feature in a collection, adding a new column to each feature containing the cluster number to which it has been assigned.	FeatureCollection.cluster(clusterer, outputName)	FeatureCollection	features|clusterer|outputName	"FeatureCollection|Clusterer|String, default: ""cluster"""	The collection of features to cluster. Each feature must contain all the properties in the clusterer's schema.|The clusterer to use.|The name of the output property to be added.
ee.FeatureCollection.copyProperties	Copies metadata properties from one element to another.	FeatureCollection.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	The object whose properties to override.|The object from which to copy the properties.|The properties to copy.  If omitted, all ordinary (i.e. non-system) properties are copied.|The list of properties to exclude when copying all properties. Must not be specified if properties is.
ee.FeatureCollection.distance	Produces a DOUBLE image where each pixel is the distance in meters from the pixel center to the nearest Point, LineString, or polygonal boundary in the collection. Note distance is also measured within interiors of polygons. Pixels that are not within 'searchRadius' meters of a geometry will be masked out.	FeatureCollection.distance(searchRadius, maxError)	Image	features|searchRadius|maxError	FeatureCollection|Float, default: 100000|Float, default: 100	Feature collection from which to get features used to compute pixel distances.|Maximum distance in meters from each pixel to look for edges. Pixels will be masked unless there are edges within this distance.|Maximum reprojection error in meters, only used if the input polylines require reprojection. If '0' is provided, then this operation will fail if projection is required.
ee.FeatureCollection.distinct	Removes duplicates from a collection. Note that duplicates are determined using a strong hash over the serialized form of the selected properties.	FeatureCollection.distinct(properties)	FeatureCollection	collection|properties	FeatureCollection|Object	The input collection from which objects will be selected.|A property name or a list of property names to use for comparison. The '.geo' property can be included to compare object geometries.
ee.FeatureCollection.draw	Paints a vector collection for visualization. Not intended for use as input to other algorithms.	FeatureCollection.draw(color, pointRadius, strokeWidth)	Image	collection|color|pointRadius|strokeWidth	FeatureCollection|String|Integer, default: 3|Integer, default: 2	The collection to draw.|A hex string in the format RRGGBB specifying the color to use for drawing the features.|The radius in pixels of the point markers.|The width in pixels of lines and polygon borders.
ee.FeatureCollection.errorMatrix	Computes a 2D error matrix for a collection by comparing two columns of a collection: one containing the actual values, and one containing predicted values.The values are expected to be small contiguous integers, starting from 0. Axis 0 (the rows) of the matrix correspond to the actual values, and Axis 1 (the columns) to the predicted values.	FeatureCollection.errorMatrix(actual, predicted, order)	ConfusionMatrix	collection|actual|predicted|order	FeatureCollection|String|String|List, default: null	The input collection.|The name of the property containing the actual value.|The name of the property containing the predicted value.|A list of the expected values.  If this argument is not specified, the values are assumed to be contiguous and span the range 0 to maxValue. If specified, only values matching this list are used, and the matrix will have dimensions and order matching the this list.
ee.FeatureCollection.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	FeatureCollection.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.FeatureCollection.filter	Apply a filter to this collection.	FeatureCollection.filter(filter)	Collection	collection|filter	Collection|Filter	The Collection instance.|A filter to apply to this collection.
ee.FeatureCollection.filterBounds	Shortcut to filter a collection by intersection with geometry.  Items in the collection with a footprint that fails to intersect the given geometry will be excluded.	FeatureCollection.filterBounds(geometry)	Collection	collection|geometry	Collection|Feature|Geometry	The Collection instance.|The geometry to filter to.
ee.FeatureCollection.filterDate	Shortcut to filter a collection by a date range. The start and end may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). Based on 'system:time_start'.	FeatureCollection.filterDate(start, end)	Collection	collection|start|end	Collection|Date|Number|String|Date|Number|String, optional	The Collection instance.|The start date (inclusive).|The end date (exclusive). Optional. If not specified, a 1-millisecond range starting at 'start' is created.
ee.FeatureCollection.filterMetadata	Shortcuts to filter a collection by metadata.  This is equivalent to this.filter(ee.Filter.metadata(...)).	FeatureCollection.filterMetadata(name, operator, value)	Collection	collection|name|operator|value	Collection|String|String|Object	"The Collection instance.|The name of a property to filter.|The name of a comparison operator. Possible values are: ""equals"", ""less_than"", ""greater_than"",|""not_equals"", ""not_less_than"", ""not_greater_than"", ""starts_with"",|""ends_with"", ""not_starts_with"", ""not_ends_with"", ""contains"",|""not_contains"".|  - The value to compare against."
ee.FeatureCollection.first	Returns the first entry from a given collection.	FeatureCollection.first()	Element	collection	FeatureCollection	The collection from which to select the first entry.
ee.FeatureCollection.flatten	Flattens collections of collections.	FeatureCollection.flatten()	FeatureCollection	collection	FeatureCollection	The input collection of collections.
ee.FeatureCollection.geometry	Extracts and merges the geometries of a collection. Requires that all the geometries in the collection share the projection and edge interpretation.	FeatureCollection.geometry(maxError)	Geometry	collection|maxError	FeatureCollection|ErrorMargin, optional	The collection whose geometries will be extracted.|An error margin to use when merging geometries.
ee.FeatureCollection.get	Extract a property from a feature.	FeatureCollection.get(property)		object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.FeatureCollection.getArray	Extract a property from a feature.	FeatureCollection.getArray(property)	Array	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.FeatureCollection.getDownloadURL	Get a download URL.	FeatureCollection.getDownloadURL(format, selectors, filename, callback)	Object|String	featurecollection|format|selectors|filename|callback	FeatureCollection|String, optional|List, optional|String, optional|Function, optional	"The FeatureCollection instance.|The format of download, one of:|""csv"", ""json"", ""kml"", ""kmz"".|Selectors that should be used to determine which attributes will be downloaded.|Name of the file to be downloaded.|An optional callback. If not supplied, the call is made synchronously."
ee.FeatureCollection.getInfo	An imperative function that returns all the known information about this collection via an AJAX call.	FeatureCollection.getInfo(callback)	FeatureCollectionDescription	featurecollection|callback	FeatureCollection|Function, optional	The FeatureCollection instance.|An optional callback. If not supplied, the call is made synchronously. If supplied, will be called with the first parameter if successful and the second if unsuccessful.
ee.FeatureCollection.getMap	An imperative function that returns a map id and token, suitable for generating a Map overlay.	FeatureCollection.getMap(visParams, callback)	MapId|Object	featurecollection|visParams|callback	FeatureCollection|Object, optional|Function, optional	The FeatureCollection instance.|The visualization parameters. Currently only one parameter, 'color', containing an RGB color string is allowed.  If vis_params isn't specified, then the color #000000 is used.|An async callback. If not supplied, the call is made synchronously.
ee.FeatureCollection.getNumber	Extract a property from a feature.	FeatureCollection.getNumber(property)	Number	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.FeatureCollection.getString	Extract a property from a feature.	FeatureCollection.getString(property)	String	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.FeatureCollection.inverseDistance	Returns an inverse-distance weighted estimate of the value at each pixel.	FeatureCollection.inverseDistance(range, propertyName, mean, stdDev, gamma, reducer)	Image	collection|range|propertyName|mean|stdDev|gamma|reducer	FeatureCollection|Float|String|Float|Float|Float, default: 1|Reducer, default: null	Feature collection to use as source data for the estimation.|Size of the interpolation window (in meters).|Name of the numeric property to be estimated.|Global expected mean.|Global standard deviation.|Determines how quickly the estimates tend towards the global mean.|Reducer used to collapse the 'propertyName' value of overlapping points into a single value.
ee.FeatureCollection.iterate	Applies a user-supplied function to each element of a collection. The user-supplied function is given two arguments: the current element, and the value returned by the previous call to iterate() or the first argument, for the first iteration. The result is the value returned by the final call to the user-supplied function.	FeatureCollection.iterate(algorithm, first)	ComputedObject	collection|algorithm|first	Collection|Function|Object, optional	The Collection instance.|The function to apply to each element. Must take two arguments: an element of the collection and the value from the previous iteration.|The initial state.
ee.FeatureCollection.kriging	Returns the results of sampling a Kriging estimator at each pixel.	FeatureCollection.kriging(propertyName, shape, range, sill, nugget, maxDistance, reducer)	Image	collection|propertyName|shape|range|sill|nugget|maxDistance|reducer	FeatureCollection|String|String|Float|Float|Float|Float, default: null|Reducer, default: null	Feature collection to use as source data for the estimation.|Property to be estimated (must be numeric).|Semivariogram shape (one of {exponential, gaussian, spherical}).|Semivariogram range.|Semivariogram sill.|Semivariogram nugget.|Radius which determines which features are included in each pixel's computation. Defaults to the semivariogram's range.|Reducer used to collapse the 'propertyName' value of overlapping points into a single value.
ee.FeatureCollection.limit	Limit a collection to the specified number of elements, optionally sorting them by a specified property first.	FeatureCollection.limit(max, property, ascending)	Collection	collection|max|property|ascending	Collection|Number|String, optional|Boolean, optional	The Collection instance.|The number to limit the collection to.|The property to sort by, if sorting.|Whether to sort in ascending or descending order.  The default is true (ascending).
ee.FeatureCollection.makeArray	Add a 1-D Array to each feature in a collection by combining a list of properties for each feature into a 1-D Array. All of the properties must be numeric values.  If a feature doesn't contain all of the named properties, or any of them aren't numeric, the feature will be dropped from the resulting collection.	FeatureCollection.makeArray(properties, name)	FeatureCollection	collection|properties|name	"FeatureCollection|List|String, default: ""array"""	The input collection from which properties will be selected.|The properties to select.|The name of the new array property.
ee.FeatureCollection.map	Maps an algorithm over a collection.	FeatureCollection.map(algorithm, dropNulls)	Collection	collection|algorithm|dropNulls	Collection|Function|Boolean, optional	The Collection instance.|The operation to map over the images or features of the collection. A JavaScript function that receives an image or features and returns one. The function is called only once and the result is captured as a description, so it cannot perform imperative operations or rely on external state.|If true, the mapped algorithm is allowed to return nulls, and the elements for which it returns nulls will be dropped.
ee.FeatureCollection.merge	Merges two collections into one. The result has all the elements that were in either collection.	FeatureCollection.merge(collection2)	FeatureCollection	collection1|collection2	FeatureCollection|FeatureCollection	The first collection to merge.|The second collection to merge.
ee.FeatureCollection.propertyNames	Returns the names of properties on this element.	FeatureCollection.propertyNames()	List	element	Element
ee.FeatureCollection.randomColumn	Adds a column of deterministic pseudorandom numbers to a collection.  The numbers are double-precision floating point numbers in the range 0.0 (inclusive) to 1.0 (exclusive).	FeatureCollection.randomColumn(columnName, seed)	FeatureCollection	collection|columnName|seed	"FeatureCollection|String, default: ""random""|Long, default: 0"	The input collection to which to add a random column.|The name of the column to add.|A seed used when generating the random numbers.
ee.FeatureCollection.randomPoints	Generates points that are uniformly random on the sphere, and within the given region.	ee.FeatureCollection.randomPoints(region, points, seed, maxError)	FeatureCollection	region|points|seed|maxError	Geometry|Integer, default: 1000|Long, default: 0|ErrorMargin, optional	The region to generate points for.|The number of points to generate.|A seed for the random number generator.|The maximum amount of error tolerated when performing any necessary reprojection.
ee.FeatureCollection.reduceColumns	Apply a reducer to each element of a collection, using the given selectors to determine the inputs.	FeatureCollection.reduceColumns(reducer, selectors, weightSelectors)	Dictionary	collection|reducer|selectors|weightSelectors	FeatureCollection|Reducer|List|List, default: null	The collection to aggregate over.|The reducer to apply.|A selector for each input of the reducer.|A selector for each weighted input of the reducer.
ee.FeatureCollection.reduceToImage	Creates an image from a feature collection by applying a reducer over the selected properties of all the features that intersect each pixel.	FeatureCollection.reduceToImage(properties, reducer)	Image	collection|properties|reducer	FeatureCollection|List|Reducer	Feature collection to intersect with each output pixel.|Properties to select from each feature and pass into the reducer.|A Reducer to combine the properties of each intersecting feature into a final result to store in the pixel.
ee.FeatureCollection.remap	Remaps the value of a specific property in a collection. Takes two parallel lists and maps values found in one to values in the other. Any element with a value that is not specified in the first list is dropped from the output collection.	FeatureCollection.remap(lookupIn, lookupOut, columnName)	FeatureCollection	collection|lookupIn|lookupOut|columnName	FeatureCollection|List|List|String	The collection to be modified.|The input mapping values. Restricted to strings and integers.|The output mapping values. Must be the same size as lookupIn.|The name of the property to remap.
ee.FeatureCollection.select	Select properties from each Feature in a collection.  It is also possible to call this function with only string arguments; they will be all be interpreted as propertySelectors (varargs).	FeatureCollection.select(propertySelectors, newProperties, retainGeometry)	FeatureCollection	featurecollection|propertySelectors|newProperties|retainGeometry	FeatureCollection|List|List, optional|Boolean, optional	The FeatureCollection instance.|A list of names or regexes specifying the attributes to select.|A list of new names for the output properties. Must match the number of properties selected.|When false, the result will have a NULL geometry. Defaults to true.
ee.FeatureCollection.serialize	Returns the serialized representation of this object.	FeatureCollection.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.FeatureCollection.set	Overrides one or more metadata properties of an Element.	FeatureCollection.set(var_args)	Element	element|var_args	Element|VarArgs	The Element instance.|Either a dictionary of properties, or a vararg sequence of properties, e.g. key1, value1, key2, value2, ...
ee.FeatureCollection.setMulti	Overrides one or more metadata properties of an object.	FeatureCollection.setMulti(properties)	Element	object|properties	Element|Dictionary	The object whose properties to override.|The property values to override.
ee.FeatureCollection.size	Returns the number of elements in the collection.	FeatureCollection.size()	Integer	collection	FeatureCollection	The collection to count.
ee.FeatureCollection.sort	Sort a collection by the specified property.	FeatureCollection.sort(property, ascending)	Collection	collection|property|ascending	Collection|String|Boolean, optional	The Collection instance.|The property to sort by.|Whether to sort in ascending or descending order.  The default is true (ascending).
ee.FeatureCollection.style	Draw a vector collection for visualization using a simple style language.	FeatureCollection.style(color, pointSize, pointShape, width, fillColor, styleProperty, neighborhood, lineType)	Image	collection|color|pointSize|pointShape|width|fillColor|styleProperty|neighborhood|lineType	"FeatureCollection|String, default: ""black""|Integer, default: 3|String, default: ""circle""|Float, default: 2|String, default: null|String, default: null|Integer, default: 5|String, default: ""solid"""	The collection to draw.|A default color (CSS 3.0 color value e.g. 'FF0000' or 'red') to use for drawing the features.  Supports opacity (e.g.: 'FF000088' for 50% transparent red).|The default size in pixels of the point markers.|The default shape of the marker to draw at each point location.  One of: circle, square, diamond, cross, plus, pentagram, hexagram, triangle, triangle_up triangle_down, triangle_left, triangle_right, pentagon, hexagon, star5, star6. This argument also supports the following Matlab marker abbreviations: o, s, d, x, +, p, h, ^, v, <, >.|The default line width for lines and outlines for polygons and point shapes.|The color for filling polygons and point shapes.  Defaults to 'color' at 0.66 opacity.|A per-feature property expected to contain a dictionary. Values in the dictionary override any default values for that feature.|If styleProperty is used and any feature has a pointSize or width larger than the defaults, tiling artifacts can occur. Specifies the maximum neighborhood (pointSize + width) needed for any feature.|The default line style for lines and outlines of polygons and point shapes. Defaults to 'solid'. One of: solid, dotted, dashed.
ee.FeatureCollection.toDictionary	Extract properties from a feature as a dictionary.	FeatureCollection.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	The feature to extract the property from.|The list of properties to extract.  Defaults to all non-system properties.
ee.FeatureCollection.toList	Returns the elements of a collection as a list.	FeatureCollection.toList(count, offset)	List	collection|count|offset	FeatureCollection|Integer|Integer, default: 0	The input collection to fetch.|The maximum number of elements to fetch.|The number of elements to discard from the start. If set, (offset + count) elements will be fetched and the first offset elements will be discarded.
ee.FeatureCollection.union	Merges all geometries in a given collection into one and returns a collection containing a single feature with only an ID of 'union_result' and a geometry.	FeatureCollection.union(maxError)	FeatureCollection	collection|maxError	FeatureCollection|ErrorMargin, default: null	The collection being merged.|The maximum error allowed when performing any necessary reprojections. If not specified, defaults to the error margin requested from the output.
ee.Filter	Constructs a new filter. This constructor accepts the following args:	ee.Filter(filter)	Filter	filter	Filter|List, optional	Optional filter to add.
ee.Filter.and	Combine two or more filters using boolean AND.	ee.Filter.and(var_args)	Filter	var_args	VarArgs	The filters to combine.
ee.Filter.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Filter.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Filter.bounds	Creates a filter that passes if the object's geometry intersects the given geometry.	ee.Filter.bounds(geometry, errorMargin)	Filter	geometry|errorMargin	ComputedObject|FeatureCollection|Geometry|ComputedObject|Number, optional	The geometry, feature or collection to intersect with.|An optional error margin. If a number, interpreted as sphere surface meters.
ee.Filter.calendarRange	Returns a filter that passes if the object's timestamp falls within the given range of a calendar field.  The month, day_of_year, day_of_month, and day_of_week are 1-based.  Times are assumed to be in UTC.  Weeks are assumed to begin on Monday as day 1.   If end < start then this tests for value >= start OR value <= end, to allow for wrapping.	ee.Filter.calendarRange(start, end, field)	Filter	start|end|field	"Integer|Integer, default: null|String, default: ""day_of_year"""	The start of the desired calendar field, inclusive.|The end of the desired calendar field, inclusive. Defaults to the same value as start.|The calendar field to filter over. Options are: 'year', 'month', 'hour', 'minute', 'day_of_year', 'day_of_month', and 'day_of_week'.
ee.Filter.contains	Creates a unary or binary filter that passes if the left geometry contains the right geometry (empty geometries are not contained in anything).	ee.Filter.contains(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.|The maximum reprojection error allowed during filter application.
ee.Filter.date	Filter a collection by date range. The start and end may be Dates, numbers	ee.Filter.date(start, end)	Filter	start|end	Date|Number|String|Date|Number|String, optional	The start date (inclusive).|The end date (exclusive). Optional. If not specified, a 1-millisecond range starting at 'start' is created.
ee.Filter.dateRangeContains	Creates a unary or binary filter that passes if the left operand, a date range, contains the right operand, a date.	ee.Filter.dateRangeContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.dayOfYear	Returns a filter that passes if the object's timestamp falls within the given day-of-year range.	ee.Filter.dayOfYear(start, end)	Filter	start|end	Integer|Integer	The start of the desired day range, inclusive.|The end of the desired day range, exclusive.
ee.Filter.disjoint	Creates a unary or binary filter that passes unless the left geometry intersects the right geometry.	ee.Filter.disjoint(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.|The maximum reprojection error allowed during filter application.
ee.Filter.eq	Filter to metadata equal to the given value.	ee.Filter.eq(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.equals	Creates a unary or binary filter that passes if the two operands are equals.	ee.Filter.equals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Filter.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Filter.expression	Constructs a filter tree from a string.	ee.Filter.expression(expression)	Filter	expression	String	"A string to be parsed into a Filter object (e.g.: ""property > value""). Supported operators include: >, >=, <, <=, ==, !=, (), !, && and ||."
ee.Filter.getInfo	Retrieves the value of this object from the server.	Filter.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Filter.greaterThan	Creates a unary or binary filter that passes if the left operand is greater than the right operand.	ee.Filter.greaterThan(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.greaterThanOrEquals	Creates a unary or binary filter that passes unless the left operand is less than the right operand.	ee.Filter.greaterThanOrEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.gt	Filter on metadata greater than the given value.	ee.Filter.gt(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.gte	Filter on metadata greater than or equal to the given value.	ee.Filter.gte(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.inList	Filter on metadata contained in a list.	ee.Filter.inList(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, optional|List, optional|String, optional|List, optional	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.intersects	Creates a unary or binary filter that passes if the left geometry intersects the right geometry.	ee.Filter.intersects(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.|The maximum reprojection error allowed during filter application.
ee.Filter.isContained	Creates a unary or binary filter that passes if the right geometry contains the left geometry (empty geometries are not contained in anything).	ee.Filter.isContained(leftField, rightValue, rightField, leftValue, maxError)	Filter	leftField|rightValue|rightField|leftValue|maxError	String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.|The maximum reprojection error allowed during filter application.
ee.Filter.lessThan	Creates a unary or binary filter that passes if the left operand is less than the right operand.	ee.Filter.lessThan(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.lessThanOrEquals	Creates a unary or binary filter that passes unless the left operand is greater than the right operand.	ee.Filter.lessThanOrEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.listContains	Creates a unary or binary filter that passes if the left operand, a list, contains the right operand.	ee.Filter.listContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.lt	Filter to metadata less than the given value.	ee.Filter.lt(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.lte	Filter on metadata less than or equal to the given value.	ee.Filter.lte(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.maxDifference	Creates a unary or binary filter that passes if the left and right operands, both numbers, are within a given maximum difference. If used as a join condition, this numeric difference is used as a join measure.	ee.Filter.maxDifference(difference, leftField, rightValue, rightField, leftValue)	Filter	difference|leftField|rightValue|rightField|leftValue	Float|String, default: null|Object, default: null|String, default: null|Object, default: null	The maximum difference for which the filter will return true.|A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.neq	Filter to metadata not equal to the given value.	ee.Filter.neq(name, value)	Filter	name|value	String|Object	The property name to filter on.|The value to compare against.
ee.Filter.not	Returns the opposite of the input filter, i.e. the resulting filter will match if and only if the input filter doesn't match.	Filter.not()	Filter	filter	Filter	The Filter instance.
ee.Filter.notEquals	Creates a unary or binary filter that passes unless the two operands are equals.	ee.Filter.notEquals(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.notNull	Returns a filter that passes if all the named properties are not null.	ee.Filter.notNull(properties)	Filter	properties	List
ee.Filter.or	Combine two or more filters using boolean OR.	ee.Filter.or(var_args)	Filter	var_args	VarArgs	The filters to combine.
ee.Filter.rangeContains	Returns a filter that passes if the value of the selected field is in the specified range (inclusive).	ee.Filter.rangeContains(field, minValue, maxValue)	Filter	field|minValue|maxValue	String|Object|Object	A selector for the property being tested.|The lower bound of the range.|The upper bound of the range.
ee.Filter.serialize	Returns the serialized representation of this object.	Filter.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Filter.stringContains	Creates a unary or binary filter that passes if the left operand, a string, contains the right operand, also a string.	ee.Filter.stringContains(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.stringEndsWith	Creates a unary or binary filter that passes if the left operand, a string, ends with the right operand, also a string.	ee.Filter.stringEndsWith(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.stringStartsWith	Creates a unary or binary filter that passes if the left operand, a string, starts with the right operand, also a string.	ee.Filter.stringStartsWith(leftField, rightValue, rightField, leftValue)	Filter	leftField|rightValue|rightField|leftValue	String, default: null|Object, default: null|String, default: null|Object, default: null	A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.
ee.Filter.withinDistance	Creates a unary or binary filter that passes if the left geometry is within a specified distance of the right geometry. If used as a join condition, this distance is used as a join measure.	ee.Filter.withinDistance(distance, leftField, rightValue, rightField, leftValue, maxError)	Filter	distance|leftField|rightValue|rightField|leftValue|maxError	Float|String, default: null|Object, default: null|String, default: null|Object, default: null|ErrorMargin, optional	The maximum distance for which the filter will return true.|A selector for the left operand. Should not be specified if leftValue is specified.|The value of the right operand. Should not be specified if rightField is specified.|A selector for the right operand. Should not be specified if rightValue is specified.|The value of the left operand. Should not be specified if leftField is specified.|The maximum reprojection error allowed during filter application.
ee.Geometry	Creates a geometry.	ee.Geometry(geoJson, proj, geodesic, evenOdd)	Geometry	geoJson|proj|geodesic|evenOdd	Object|Projection, optional|Boolean, optional|Boolean, optional	"The GeoJSON object describing the geometry or a ComputedObject to be reinterpreted as a Geometry. Supports CRS specifications as per the GeoJSON spec, but only allows named|(rather than ""linked"" CRSs). If this includes a 'geodesic' field, and opt_geodesic is not specified, it will be used as opt_geodesic.|An optional projection specification, either as a CRS ID code or as a WKT string. If specified, overrides any CRS found in the geoJson parameter. If unspecified and the geoJson does not declare a CRS, defaults to ""EPSG:4326"" (x=longitude, y=latitude).|Whether line segments should be interpreted as spherical geodesics. If false, indicates that line segments should be interpreted as planar lines in the specified CRS. If absent, defaults to true if the CRS is geographic (including the default EPSG:4326), or to false if the CRS is projected.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left- inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order. If unspecified, defaults to true."
ee.Geometry.LineString	Constructs an ee.Geometry describing a LineString.	ee.Geometry.LineString(coords, proj, geodesic, maxError)	Geometry.LineString	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	A list of at least two points.  May be a list of coordinates in the GeoJSON 'LineString' format, a list of at least two ee.Geometry describing a point, or a list of at least four numbers defining the [x,y] coordinates of at least two points.|The projection of this geometry. If unspecified, the default is the projection of the input ee.Geometry, or EPSG:4326 if there are no ee.Geometry inputs.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.
ee.Geometry.LineString.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	LineString.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.LineString.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	LineString.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.LineString.bounds	Returns the bounding rectangle of the geometry.	LineString.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.LineString.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	LineString.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.LineString.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	LineString.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.LineString.containedIn	Returns true iff one geometry is contained in the other.	LineString.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.contains	Returns true iff one geometry contains the other.	LineString.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	LineString.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	LineString.coordinates()	List	geometry	Geometry
ee.Geometry.LineString.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	LineString.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.LineString.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	LineString.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.disjoint	Returns true iff the geometries are disjoint.	LineString.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	LineString.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.LineString.distance	Returns the minimum distance between two geometries.	LineString.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	LineString.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.LineString.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	LineString.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.LineString.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	LineString.geodesic()	Boolean	geometry	Geometry
ee.Geometry.LineString.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	LineString.geometries()	List	geometry	Geometry
ee.Geometry.LineString.getInfo	Retrieves the value of this object from the server.	LineString.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.LineString.intersection	Returns the intersection of the two geometries.	LineString.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.intersects	Returns true iff the geometries intersect.	LineString.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.isUnbounded	Returns whether the geometry is unbounded.	LineString.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.LineString.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	LineString.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.LineString.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	LineString.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.LineString.projection	Returns the projection of the geometry.	LineString.projection()	Projection	geometry	Geometry
ee.Geometry.LineString.serialize	Returns the serialized representation of this object.	LineString.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.LineString.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	LineString.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.LineString.symmetricDifference	Returns the symmetric difference between two geometries.	LineString.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.toGeoJSON	Returns a GeoJSON representation of the geometry.	LineString.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.LineString.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	LineString.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.LineString.transform	Transforms the geometry to a specific projection.	LineString.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.LineString.type	Returns the GeoJSON type of the geometry.	LineString.type()	String	geometry	Geometry
ee.Geometry.LineString.union	Returns the union of the two geometries.	LineString.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LineString.withinDistance	Returns true iff the geometries are within a specified distance.	LineString.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing	Constructs an ee.Geometry describing a LinearRing. If the last point is not equal to the first, a duplicate of the first point will be added at the end.	ee.Geometry.LinearRing(coords, proj, geodesic, maxError)	Geometry.LinearRing	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	A list of points in the ring. May be a list of coordinates in the GeoJSON|'LinearRing' format, a list of at least three ee.Geometry describing a point, or a list of at least six numbers defining the [x,y] coordinates of at least three points.|The projection of this geometry. If unspecified, the default is the projection of the input ee.Geometry, or EPSG:4326 if there are no ee.Geometry inputs.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.
ee.Geometry.LinearRing.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	LinearRing.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.LinearRing.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	LinearRing.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.LinearRing.bounds	Returns the bounding rectangle of the geometry.	LinearRing.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.LinearRing.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	LinearRing.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.LinearRing.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	LinearRing.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.LinearRing.containedIn	Returns true iff one geometry is contained in the other.	LinearRing.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.contains	Returns true iff one geometry contains the other.	LinearRing.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	LinearRing.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	LinearRing.coordinates()	List	geometry	Geometry
ee.Geometry.LinearRing.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	LinearRing.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.LinearRing.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	LinearRing.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.disjoint	Returns true iff the geometries are disjoint.	LinearRing.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	LinearRing.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.LinearRing.distance	Returns the minimum distance between two geometries.	LinearRing.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	LinearRing.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.LinearRing.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	LinearRing.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.LinearRing.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	LinearRing.geodesic()	Boolean	geometry	Geometry
ee.Geometry.LinearRing.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	LinearRing.geometries()	List	geometry	Geometry
ee.Geometry.LinearRing.getInfo	Retrieves the value of this object from the server.	LinearRing.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.LinearRing.intersection	Returns the intersection of the two geometries.	LinearRing.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.intersects	Returns true iff the geometries intersect.	LinearRing.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.isUnbounded	Returns whether the geometry is unbounded.	LinearRing.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.LinearRing.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	LinearRing.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.LinearRing.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	LinearRing.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.LinearRing.projection	Returns the projection of the geometry.	LinearRing.projection()	Projection	geometry	Geometry
ee.Geometry.LinearRing.serialize	Returns the serialized representation of this object.	LinearRing.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.LinearRing.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	LinearRing.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.LinearRing.symmetricDifference	Returns the symmetric difference between two geometries.	LinearRing.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.toGeoJSON	Returns a GeoJSON representation of the geometry.	LinearRing.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.LinearRing.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	LinearRing.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.LinearRing.transform	Transforms the geometry to a specific projection.	LinearRing.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.LinearRing.type	Returns the GeoJSON type of the geometry.	LinearRing.type()	String	geometry	Geometry
ee.Geometry.LinearRing.union	Returns the union of the two geometries.	LinearRing.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.LinearRing.withinDistance	Returns true iff the geometries are within a specified distance.	LinearRing.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString	Constructs an ee.Geometry describing a MultiLineString.	ee.Geometry.MultiLineString(coords, proj, geodesic, maxError)	Geometry.MultiLineString	coords|proj|geodesic|maxError	List|Projection, optional|Boolean, optional|ErrorMargin, optional	A list of linestrings. May be a list of coordinates in the GeoJSON|'MultiLineString' format, a list of at least two ee.Geometry describing a LineString, or a list of number defining a single linestring.|The projection of this geometry. If unspecified, the default is the projection of the input ee.Geometry, or EPSG:4326 if there are no ee.Geometry inputs.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.
ee.Geometry.MultiLineString.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	MultiLineString.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.MultiLineString.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiLineString.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.MultiLineString.bounds	Returns the bounding rectangle of the geometry.	MultiLineString.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiLineString.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiLineString.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.MultiLineString.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiLineString.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiLineString.containedIn	Returns true iff one geometry is contained in the other.	MultiLineString.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.contains	Returns true iff one geometry contains the other.	MultiLineString.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiLineString.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiLineString.coordinates()	List	geometry	Geometry
ee.Geometry.MultiLineString.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	MultiLineString.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.MultiLineString.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiLineString.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.disjoint	Returns true iff the geometries are disjoint.	MultiLineString.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiLineString.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.MultiLineString.distance	Returns the minimum distance between two geometries.	MultiLineString.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiLineString.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.MultiLineString.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiLineString.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.MultiLineString.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiLineString.geodesic()	Boolean	geometry	Geometry
ee.Geometry.MultiLineString.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiLineString.geometries()	List	geometry	Geometry
ee.Geometry.MultiLineString.getInfo	Retrieves the value of this object from the server.	MultiLineString.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.MultiLineString.intersection	Returns the intersection of the two geometries.	MultiLineString.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.intersects	Returns true iff the geometries intersect.	MultiLineString.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.isUnbounded	Returns whether the geometry is unbounded.	MultiLineString.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.MultiLineString.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiLineString.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiLineString.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiLineString.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiLineString.projection	Returns the projection of the geometry.	MultiLineString.projection()	Projection	geometry	Geometry
ee.Geometry.MultiLineString.serialize	Returns the serialized representation of this object.	MultiLineString.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiLineString.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiLineString.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.MultiLineString.symmetricDifference	Returns the symmetric difference between two geometries.	MultiLineString.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiLineString.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiLineString.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiLineString.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiLineString.transform	Transforms the geometry to a specific projection.	MultiLineString.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.MultiLineString.type	Returns the GeoJSON type of the geometry.	MultiLineString.type()	String	geometry	Geometry
ee.Geometry.MultiLineString.union	Returns the union of the two geometries.	MultiLineString.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiLineString.withinDistance	Returns true iff the geometries are within a specified distance.	MultiLineString.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint	Constructs an ee.Geometry describing a MultiPoint.	ee.Geometry.MultiPoint(coords, proj)	Geometry.MultiPoint	coords|proj	List|Projection, optional	A list of points, each in the GeoJSON 'coordinates' format of a Point, or a list of the x,y coordinates in the given projection, or an ee.Geometry describing a point.|The projection of this geometry. If unspecified, the default is the projection of the input ee.Geometry, or EPSG:4326 if there are no ee.Geometry inputs.
ee.Geometry.MultiPoint.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	MultiPoint.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.MultiPoint.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiPoint.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.MultiPoint.bounds	Returns the bounding rectangle of the geometry.	MultiPoint.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiPoint.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiPoint.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.MultiPoint.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiPoint.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiPoint.containedIn	Returns true iff one geometry is contained in the other.	MultiPoint.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.contains	Returns true iff one geometry contains the other.	MultiPoint.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiPoint.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiPoint.coordinates()	List	geometry	Geometry
ee.Geometry.MultiPoint.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	MultiPoint.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.MultiPoint.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiPoint.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.disjoint	Returns true iff the geometries are disjoint.	MultiPoint.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiPoint.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.MultiPoint.distance	Returns the minimum distance between two geometries.	MultiPoint.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiPoint.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.MultiPoint.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiPoint.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.MultiPoint.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiPoint.geodesic()	Boolean	geometry	Geometry
ee.Geometry.MultiPoint.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiPoint.geometries()	List	geometry	Geometry
ee.Geometry.MultiPoint.getInfo	Retrieves the value of this object from the server.	MultiPoint.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.MultiPoint.intersection	Returns the intersection of the two geometries.	MultiPoint.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.intersects	Returns true iff the geometries intersect.	MultiPoint.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.isUnbounded	Returns whether the geometry is unbounded.	MultiPoint.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.MultiPoint.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiPoint.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiPoint.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiPoint.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiPoint.projection	Returns the projection of the geometry.	MultiPoint.projection()	Projection	geometry	Geometry
ee.Geometry.MultiPoint.serialize	Returns the serialized representation of this object.	MultiPoint.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPoint.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiPoint.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.MultiPoint.symmetricDifference	Returns the symmetric difference between two geometries.	MultiPoint.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiPoint.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPoint.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiPoint.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPoint.transform	Transforms the geometry to a specific projection.	MultiPoint.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.MultiPoint.type	Returns the GeoJSON type of the geometry.	MultiPoint.type()	String	geometry	Geometry
ee.Geometry.MultiPoint.union	Returns the union of the two geometries.	MultiPoint.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPoint.withinDistance	Returns true iff the geometries are within a specified distance.	MultiPoint.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon	Constructs an ee.Geometry describing a MultiPolygon.	ee.Geometry.MultiPolygon(coords, proj, geodesic, maxError, evenOdd)	Geometry.MultiPolygon	coords|proj|geodesic|maxError|evenOdd	List|Projection, optional|Boolean, optional|ErrorMargin, optional|Boolean, optional	A list of polygons. May be a list of coordinates in the GeoJSON|'MultiPolygon' format, a list of ee.Geometry describing a Polygon, or a list of number defining a single polygon boundary.|The projection of this geometry. The default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left- inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order. If unspecified, defaults to true.
ee.Geometry.MultiPolygon.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	MultiPolygon.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.MultiPolygon.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	MultiPolygon.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.MultiPolygon.bounds	Returns the bounding rectangle of the geometry.	MultiPolygon.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiPolygon.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	MultiPolygon.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.MultiPolygon.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	MultiPolygon.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.MultiPolygon.containedIn	Returns true iff one geometry is contained in the other.	MultiPolygon.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.contains	Returns true iff one geometry contains the other.	MultiPolygon.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	MultiPolygon.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	MultiPolygon.coordinates()	List	geometry	Geometry
ee.Geometry.MultiPolygon.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	MultiPolygon.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.MultiPolygon.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	MultiPolygon.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.disjoint	Returns true iff the geometries are disjoint.	MultiPolygon.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	MultiPolygon.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.MultiPolygon.distance	Returns the minimum distance between two geometries.	MultiPolygon.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	MultiPolygon.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.MultiPolygon.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	MultiPolygon.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.MultiPolygon.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	MultiPolygon.geodesic()	Boolean	geometry	Geometry
ee.Geometry.MultiPolygon.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	MultiPolygon.geometries()	List	geometry	Geometry
ee.Geometry.MultiPolygon.getInfo	Retrieves the value of this object from the server.	MultiPolygon.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.MultiPolygon.intersection	Returns the intersection of the two geometries.	MultiPolygon.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.intersects	Returns true iff the geometries intersect.	MultiPolygon.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.isUnbounded	Returns whether the geometry is unbounded.	MultiPolygon.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.MultiPolygon.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	MultiPolygon.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiPolygon.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	MultiPolygon.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.MultiPolygon.projection	Returns the projection of the geometry.	MultiPolygon.projection()	Projection	geometry	Geometry
ee.Geometry.MultiPolygon.serialize	Returns the serialized representation of this object.	MultiPolygon.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPolygon.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	MultiPolygon.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.MultiPolygon.symmetricDifference	Returns the symmetric difference between two geometries.	MultiPolygon.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.toGeoJSON	Returns a GeoJSON representation of the geometry.	MultiPolygon.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPolygon.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	MultiPolygon.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.MultiPolygon.transform	Transforms the geometry to a specific projection.	MultiPolygon.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.MultiPolygon.type	Returns the GeoJSON type of the geometry.	MultiPolygon.type()	String	geometry	Geometry
ee.Geometry.MultiPolygon.union	Returns the union of the two geometries.	MultiPolygon.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.MultiPolygon.withinDistance	Returns true iff the geometries are within a specified distance.	MultiPolygon.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point	Constructs an ee.Geometry describing a point.	ee.Geometry.Point(coords, proj)	Geometry.Point	coords|proj	List|Projection, optional	A list of two [x,y] coordinates in the given projection.|The projection of this geometry, or EPSG:4326 if unspecified.
ee.Geometry.Point.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	Point.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.Point.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Point.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.Point.bounds	Returns the bounding rectangle of the geometry.	Point.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Point.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Point.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.Point.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Point.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Point.containedIn	Returns true iff one geometry is contained in the other.	Point.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.contains	Returns true iff one geometry contains the other.	Point.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Point.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Point.coordinates()	List	geometry	Geometry
ee.Geometry.Point.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	Point.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.Point.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Point.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.disjoint	Returns true iff the geometries are disjoint.	Point.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Point.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.Point.distance	Returns the minimum distance between two geometries.	Point.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Point.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.Point.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Point.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.Point.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Point.geodesic()	Boolean	geometry	Geometry
ee.Geometry.Point.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Point.geometries()	List	geometry	Geometry
ee.Geometry.Point.getInfo	Retrieves the value of this object from the server.	Point.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.Point.intersection	Returns the intersection of the two geometries.	Point.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.intersects	Returns true iff the geometries intersect.	Point.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.isUnbounded	Returns whether the geometry is unbounded.	Point.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.Point.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Point.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Point.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Point.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Point.projection	Returns the projection of the geometry.	Point.projection()	Projection	geometry	Geometry
ee.Geometry.Point.serialize	Returns the serialized representation of this object.	Point.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Point.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Point.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.Point.symmetricDifference	Returns the symmetric difference between two geometries.	Point.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.toGeoJSON	Returns a GeoJSON representation of the geometry.	Point.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.Point.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Point.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Point.transform	Transforms the geometry to a specific projection.	Point.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.Point.type	Returns the GeoJSON type of the geometry.	Point.type()	String	geometry	Geometry
ee.Geometry.Point.union	Returns the union of the two geometries.	Point.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Point.withinDistance	Returns true iff the geometries are within a specified distance.	Point.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon	Constructs an ee.Geometry describing a polygon.	ee.Geometry.Polygon(coords, proj, geodesic, maxError, evenOdd)	Geometry.Polygon	coords|proj|geodesic|maxError|evenOdd	List|Projection, optional|Boolean, optional|ErrorMargin, optional|Boolean, optional	A list of rings defining the boundaries of the polygon. May be a list of coordinates in the GeoJSON 'Polygon' format, a list of ee.Geometry describing a LinearRing, or a list of number defining a single polygon boundary.|The projection of this geometry. The default is the projection of the inputs, where Numbers are assumed to be EPSG:4326.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|Max error when input geometry must be reprojected to an explicitly requested result projection or geodesic state.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left- inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order. If unspecified, defaults to true.
ee.Geometry.Polygon.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	Polygon.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.Polygon.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Polygon.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.Polygon.bounds	Returns the bounding rectangle of the geometry.	Polygon.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Polygon.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Polygon.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.Polygon.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Polygon.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Polygon.containedIn	Returns true iff one geometry is contained in the other.	Polygon.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.contains	Returns true iff one geometry contains the other.	Polygon.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Polygon.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Polygon.coordinates()	List	geometry	Geometry
ee.Geometry.Polygon.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	Polygon.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.Polygon.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Polygon.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.disjoint	Returns true iff the geometries are disjoint.	Polygon.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Polygon.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.Polygon.distance	Returns the minimum distance between two geometries.	Polygon.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Polygon.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.Polygon.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Polygon.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.Polygon.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Polygon.geodesic()	Boolean	geometry	Geometry
ee.Geometry.Polygon.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Polygon.geometries()	List	geometry	Geometry
ee.Geometry.Polygon.getInfo	Retrieves the value of this object from the server.	Polygon.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.Polygon.intersection	Returns the intersection of the two geometries.	Polygon.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.intersects	Returns true iff the geometries intersect.	Polygon.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.isUnbounded	Returns whether the geometry is unbounded.	Polygon.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.Polygon.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Polygon.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Polygon.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Polygon.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Polygon.projection	Returns the projection of the geometry.	Polygon.projection()	Projection	geometry	Geometry
ee.Geometry.Polygon.serialize	Returns the serialized representation of this object.	Polygon.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Polygon.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Polygon.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.Polygon.symmetricDifference	Returns the symmetric difference between two geometries.	Polygon.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.toGeoJSON	Returns a GeoJSON representation of the geometry.	Polygon.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.Polygon.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Polygon.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Polygon.transform	Transforms the geometry to a specific projection.	Polygon.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.Polygon.type	Returns the GeoJSON type of the geometry.	Polygon.type()	String	geometry	Geometry
ee.Geometry.Polygon.union	Returns the union of the two geometries.	Polygon.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Polygon.withinDistance	Returns true iff the geometries are within a specified distance.	Polygon.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle	Constructs an ee.Geometry describing a rectangular polygon.	ee.Geometry.Rectangle(coords, proj, geodesic, evenOdd)	Geometry.Rectangle	coords|proj|geodesic|evenOdd	List|Projection, optional|Boolean, optional|Boolean, optional	The minimum and maximum corners of the rectangle, as a list of two points each in the format of GeoJSON 'Point' coordinates, or a list of two ee.Geometry describing a point, or a list of four numbers in the order xMin, yMin, xMax, yMax.|The projection of this geometry. If unspecified, the default is the projection of the input ee.Geometry, or EPSG:4326 if there are no ee.Geometry inputs.|If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth. The default is the geodesic state of the inputs, or true if the inputs are numbers.|If true, polygon interiors will be determined by the even/odd rule, where a point is inside if it crosses an odd number of edges to reach a point at infinity. Otherwise polygons use the left- inside rule, where interiors are on the left side of the shell's edges when walking the vertices in the given order. If unspecified, defaults to true.
ee.Geometry.Rectangle.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	Rectangle.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.Rectangle.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Rectangle.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.Rectangle.bounds	Returns the bounding rectangle of the geometry.	Rectangle.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Rectangle.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Rectangle.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.Rectangle.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Rectangle.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.Rectangle.containedIn	Returns true iff one geometry is contained in the other.	Rectangle.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.contains	Returns true iff one geometry contains the other.	Rectangle.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Rectangle.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Rectangle.coordinates()	List	geometry	Geometry
ee.Geometry.Rectangle.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	Rectangle.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.Rectangle.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Rectangle.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.disjoint	Returns true iff the geometries are disjoint.	Rectangle.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Rectangle.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.Rectangle.distance	Returns the minimum distance between two geometries.	Rectangle.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Rectangle.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.Rectangle.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Rectangle.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.Rectangle.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Rectangle.geodesic()	Boolean	geometry	Geometry
ee.Geometry.Rectangle.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Rectangle.geometries()	List	geometry	Geometry
ee.Geometry.Rectangle.getInfo	Retrieves the value of this object from the server.	Rectangle.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.Rectangle.intersection	Returns the intersection of the two geometries.	Rectangle.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.intersects	Returns true iff the geometries intersect.	Rectangle.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.isUnbounded	Returns whether the geometry is unbounded.	Rectangle.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.Rectangle.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Rectangle.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Rectangle.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Rectangle.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.Rectangle.projection	Returns the projection of the geometry.	Rectangle.projection()	Projection	geometry	Geometry
ee.Geometry.Rectangle.serialize	Returns the serialized representation of this object.	Rectangle.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Rectangle.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Rectangle.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.Rectangle.symmetricDifference	Returns the symmetric difference between two geometries.	Rectangle.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.toGeoJSON	Returns a GeoJSON representation of the geometry.	Rectangle.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.Rectangle.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Rectangle.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.Rectangle.transform	Transforms the geometry to a specific projection.	Rectangle.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.Rectangle.type	Returns the GeoJSON type of the geometry.	Rectangle.type()	String	geometry	Geometry
ee.Geometry.Rectangle.union	Returns the union of the two geometries.	Rectangle.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.Rectangle.withinDistance	Returns true iff the geometries are within a specified distance.	Rectangle.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.area	Returns the area of the geometry. Area of points and line strings is 0, and the area of multi geometries is the sum of the areas of their componenets (intersecting areas are counted multiple times).	Geometry.area(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry input.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it  will be in square meters.
ee.Geometry.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Geometry.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Geometry.bounds	Returns the bounding rectangle of the geometry.	Geometry.bounds(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Return the bounding box of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.buffer	Returns the input buffered by a given distance. If the distance is positive, the geometry is expanded, and if the distance is negative, the geometry is contracted.	Geometry.buffer(distance, maxError, proj)	Geometry	geometry|distance|maxError|proj	Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry being buffered.|The distance of the buffering, which may be negative. If no projection is specified, the unit is meters. Otherwise the unit is in the coordinate system of the projection.|The maximum amount of error tolerated when approximating the buffering circle and performing any necessary reprojection. If unspecified, defaults to 1% of the distance.|If specified, the buffering will be performed in this projection and the distance will be interpreted as units of the coordinate system of this projection. Otherwise the distance is interpereted as meters and the buffering is performed in a spherical coordinate system.
ee.Geometry.centroid	Returns a point at the center of the highest-dimension components of the geometry. Lower-dimensional components are ignored, so the centroid of a geometry containing two polygons, three lines and a point is equivalent to the centroid of a geometry containing just the two polygons.	Geometry.centroid(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the centroid of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in this projection. Otherwise it will be in WGS84.
ee.Geometry.containedIn	Returns true iff one geometry is contained in the other.	Geometry.containedIn(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.contains	Returns true iff one geometry contains the other.	Geometry.contains(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.convexHull	Returns the convex hull of the given geometry. The convex hull of a single point is the point itself, the convex hull of collinear points is a line, and the convex hull of  everything else is a polygon. Note that a degenerate polygon with all vertices on the same line will result in a line segment.	Geometry.convexHull(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	Calculates the convex hull of this geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.coordinates	Returns a GeoJSON-style list of the geometry's coordinates.	Geometry.coordinates()	List	geometry	Geometry
ee.Geometry.cutLines	Converts LineStrings into a MultiLineString by cutting it in two at each distance along the length of the LineString.	Geometry.cutLines(distances, maxError, proj)	Geometry	geometry|distances|maxError|proj	Geometry|List|ErrorMargin, default: null|Projection, default: null	Cuts the lines of this geometry.|Distances along each LineString to cut the line into separate pieces, measured in units of the given proj, or meters if proj is unspecified.|The maximum amount of error tolerated when performing any necessary reprojection.|Projection of the result and distance measurements, or WGS84 if unspecified.
ee.Geometry.difference	Returns the result of subtracting the 'right' geometry from the 'left' geometry.	Geometry.difference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.disjoint	Returns true iff the geometries are disjoint.	Geometry.disjoint(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.dissolve	Returns the union of the geometry. This leaves single geometries untouched, and unions multi geometries.	Geometry.dissolve(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The geometry to union.|The maximum amount of error tolerated when performing any  necessary reprojection.|If specified, the union will be performed in this projection. Otherwise it will be performed in a spherical coordinate system.
ee.Geometry.distance	Returns the minimum distance between two geometries.	Geometry.distance(right, maxError, proj)	Float	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.edgesAreGeodesics	Returns true if the geometry edges, if any, are geodesics along a spherical model of the earth; if false, any edges are straight lines in the projection.	Geometry.edgesAreGeodesics()	Boolean	geometry	Geometry
ee.Geometry.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Geometry.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Geometry.geodesic	If false, edges are straight in the projection. If true, edges are curved to follow the shortest path on the surface of the Earth.	Geometry.geodesic()	Boolean	geometry	Geometry
ee.Geometry.geometries	Returns the list of geometries in a GeometryCollection, or a singleton list of the geometry for single geometries.	Geometry.geometries()	List	geometry	Geometry
ee.Geometry.getInfo	Retrieves the value of this object from the server.	Geometry.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Geometry.intersection	Returns the intersection of the two geometries.	Geometry.intersection(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.intersects	Returns true iff the geometries intersect.	Geometry.intersects(right, maxError, proj)	Boolean	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.isUnbounded	Returns whether the geometry is unbounded.	Geometry.isUnbounded()	Boolean	geometry	Geometry
ee.Geometry.length	Returns the length of the linear parts of the geometry. Polygonal parts are ignored. The length of multi geometries is the sum of the lengths of their components.	Geometry.length(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.perimeter	Returns the length of the perimeter of the polygonal parts of the geometry. The perimeter of multi geometries is the sum of the perimeters of their components.	Geometry.perimeter(maxError, proj)	Float	geometry|maxError|proj	Geometry|ErrorMargin, default: null|Projection, default: null	The input geometry.|The maximum amount of error tolerated when performing any necessary reprojection.|If specified, the result will be in the units of the coordinate system of this projection. Otherwise it will be in meters.
ee.Geometry.projection	Returns the projection of the geometry.	Geometry.projection()	Projection	geometry	Geometry
ee.Geometry.serialize	Returns the serialized representation of this object.	Geometry.serialize()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.simplify	Simplifies the geometry to within a given error margin. Note that this does not respect the error margin requested by the consumer of this algorithm, unless maxError is explicitly specified to be null.	Geometry.simplify(maxError, proj)	Geometry	geometry|maxError|proj	Geometry|ErrorMargin|Projection, default: null	The geometry to simplify.|The maximum amount of error by which the result may differ from the input.|If specified, the result will be in this projection. Otherwise it will be in the same projection as the input. If the error margin is in projected units, the margin will be interpreted as units of this projection
ee.Geometry.symmetricDifference	Returns the symmetric difference between two geometries.	Geometry.symmetricDifference(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.toGeoJSON	Returns a GeoJSON representation of the geometry.	Geometry.toGeoJSON()	GeoJSONGeometry	geometry	Geometry	The Geometry instance.
ee.Geometry.toGeoJSONString	Returns a GeoJSON string representation of the geometry.	Geometry.toGeoJSONString()	String	geometry	Geometry	The Geometry instance.
ee.Geometry.transform	Transforms the geometry to a specific projection.	Geometry.transform(proj, maxError)	Geometry	geometry|proj|maxError	Geometry|Projection, optional|ErrorMargin, default: null	The geometry to reproject.|The target projection. Defaults to WGS84. If this has a geographic CRS, the edges of the geometry will be interpreted as geodesics. Otherwise they will be interpreted as straight lines in the projection.|The maximum projection error.
ee.Geometry.type	Returns the GeoJSON type of the geometry.	Geometry.type()	String	geometry	Geometry
ee.Geometry.union	Returns the union of the two geometries.	Geometry.union(right, maxError, proj)	Geometry	left|right|maxError|proj	Geometry|Geometry|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Geometry.withinDistance	Returns true iff the geometries are within a specified distance.	Geometry.withinDistance(right, distance, maxError, proj)	Boolean	left|right|distance|maxError|proj	Geometry|Geometry|Float|ErrorMargin, default: null|Projection, default: null	The geometry used as the left operand of the operation.|The geometry used as the right operand of the operation.|The distance threshold. If a projection is specified, the distance is in units of that projected coordinate system, otherwise it is in meters.|The maximum amount of error tolerated when performing any necessary reprojection.|The projection in which to perform the operation. If not specified, the operation will be performed in a spherical coordinate system, and linear distances will be in meters on the sphere.
ee.Image	An object to represent an Earth Engine image. This constructor accepts a variety of arguments:	ee.Image(args)	Image	args	Image|List, optional	Constructor argument.
ee.Image.abs	Computes the absolute value of the input.	Image.abs()	Image	value	Image	The image to which the operation is applied.
ee.Image.acos	Computes the arc cosine in radians of the input.	Image.acos()	Image	value	Image	The image to which the operation is applied.
ee.Image.add	Adds the first value to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.add(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.addBands	Returns an image containing all bands copied from the first input and selected bands from the second input, optionally overwriting bands in the first image with the same name. The new image has the metadata and footprint from the first input image.	Image.addBands(srcImg, names, overwrite)	Image	dstImg|srcImg|names|overwrite	Image|Image|List, default: null|Boolean, default: false	An image into which to copy bands.|An image containing bands to copy.|Optional list of band names to copy. If names is omitted, all bands from srcImg will be copied over.|If true, bands from srcImg will override bands with the same names in dstImg. Otherwise the new band will be renamed with a numerical suffix ('foo' to 'foo_1' unless 'foo_1' exists, then 'foo_2' unless it exists, etc).
ee.Image.and	Returns 1 iff both values are non-zero for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.and(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.arrayAccum	Accumulates elements of each array pixel along the given axis, by setting each element of the result array pixel to the reduction of elements in that pixel along the given axis, up to and including the current position on the axis. May be used to make a cumulative sum, a monotonically increasing sequence, etc.	Image.arrayAccum(axis, reducer)	Image	input|axis|reducer	Image|Integer|Reducer, default: null	Input image.|Axis along which to perform the cumulative sum.|Reducer to accumulate values. Default is SUM, to produce the cumulative sum of each vector along the given axis.
ee.Image.arrayArgmax	Computes the positional indices of the maximum value in image of array values. If there are multiple occurrences of the maximum, the indices reflect the first.	Image.arrayArgmax()	Image	image	Image	The input image.
ee.Image.arrayCat	Creates an array image by concatenating each array pixel along the given axis in each band.	Image.arrayCat(image2, axis)	Image	image1|image2|axis	Image|Image|Integer	First array image to concatenate.|Second array image to concatenate.|Axis to concatenate along.
ee.Image.arrayDimensions	Returns the number of dimensions in each array band, and 0 for scalar image bands.	Image.arrayDimensions()	Image	input	Image	Input image.
ee.Image.arrayDotProduct	Computes the dot product of each pair of 1-D arrays in the bands of the input images.	Image.arrayDotProduct(image2)	Image	image1|image2	Image|Image	First array image of 1-D vectors.|Second array image of 1-D vectors.
ee.Image.arrayFlatten	Converts a single band image of equal-shape multidimensional pixels to an image of scalar pixels, with one band for each element of the array.	Image.arrayFlatten(coordinateLabels, separator)	Image	image|coordinateLabels|separator	"Image|List|String, default: ""_"""	Image of multidimensional pixels to flatten.|Name of each position along each axis. For example, 2x2 arrays with axes meaning 'day' and 'color' could have labels like [['monday', 'tuesday'], ['red', 'green']], resulting in band names'monday_red', 'monday_green', 'tuesday_red', and 'tuesday_green'.|Separator between array labels in each band name.
ee.Image.arrayGet	For each band, an output band of the same name is created with the value at the given position extracted from the input multidimensional pixel in that band.	Image.arrayGet(position)	Image	image|position	Image|Image	Array to get an element from.|The coordinates of the element to get. There must be as many scalar bands as there are dimensions in the input image.
ee.Image.arrayLength	Returns the length of each pixel's array along the given axis.	Image.arrayLength(axis)	Image	input|axis	Image|Integer	Input image.|The axis along which to take the length.
ee.Image.arrayLengths	Returns a 1D array image with the length of each array axis.	Image.arrayLengths()	Image	input	Image	Input image.
ee.Image.arrayMask	Creates an array image where each array-valued pixel is masked with another array-valued pixel, retaining only the elements where the mask is non-zero. If the mask image has one band it will be applied to all the bands of 'input', otherwise they must have the same number of bands.	Image.arrayMask(mask)	Image	input|mask	Image|Image	Array image to mask.|Array image to mask with.
ee.Image.arrayPad	Pads the array values in each pixel to be a fixed length. The pad value will be appended to each array to extend it to given length along each axis.  All bands of the image must be array-valued and have the same dimensions.	Image.arrayPad(lengths, pad)	Image	image|lengths|pad	Image|List|Number, default: 0	Array image to pad.|A list of desired lengths for each axis in the output arrays.  Arrays are already as large or larger than the given length will be unchanged along that axis|The value to pad with.
ee.Image.arrayProject	Projects the array in each pixel to a lower dimensional space by specifying the axes to retain. Dropped axes must be at most length 1.	Image.arrayProject(axes)	Image	input|axes	Image|List	Input image.|The axes to retain. Other axes will be discarded and must be at most length 1.
ee.Image.arrayReduce	Reduces elements of each array pixel.	Image.arrayReduce(reducer, axes, fieldAxis)	Image	input|reducer|axes|fieldAxis	Image|Reducer|List|Integer, default: null	Input image.|The reducer to apply|The list of array axes to reduce in each pixel.  The output will have a length of 1 in all these axes.|The axis for the reducer's input and output fields.  Only required if the reducer has multiple inputs or outputs.
ee.Image.arrayRepeat	Repeats each array pixel along the given axis. Each output pixel will have the shape of the input pixel, except length along the repeated axis, which will be multiplied by the number of copies.	Image.arrayRepeat(axis, copies)	Image	input|axis|copies	Image|Integer|Image	Image of array pixels to be repeated.|Axis along which to repeat each pixel's array.|Number of copies of each pixel.
ee.Image.arrayReshape	Converts array bands of an image with equally-shaped, possibly multidimensional pixels to an image of arrays with a new shape.	Image.arrayReshape(lengths, dimensions)	Image	image|lengths|dimensions	Image|Image|Integer	The image of arrays to reshape.|A 1 band image specifying the new lengths of each axis of the input image specified as a 1-D array per pixel. There should be 'dimensions' lengths values in each shape' array. If one of the lengths is -1, then the corresponding length for that axis will be computed such that the total size remains constant. In particular, a shape of [-1] flattens into 1-D. At most one component of shape can be -1.|The number of dimensions shared by all output array pixels.
ee.Image.arraySlice	Creates a subarray by slicing out each position along the given axis from the 'start' (inclusive) to 'end' (exclusive) by increments of 'step'. The result will have as many dimensions as the input, and the same length in all directions except the slicing axis, where the length will be the number of positions from 'start' to 'end' by 'step' that are in range of the input array's length along 'axis'. This means the result can be length 0 along the given axis if start=end, or if the start or end values are entirely out of range.	Image.arraySlice(axis, start, end, step)	Image	input|axis|start|end|step	Image|Integer, default: 0|Image, default: null|Image, default: null|Integer, default: 1	Input array image.|Axis to subset.|The coordinate of the first slice (inclusive) along 'axis'. Negative numbers are used to position the start of slicing relative to the end of the array, where -1 starts at the last position on the axis, -2 starts at the next to last position, etc. There must one band for start indices, or one band per 'input' band. If this argument is not set or masked at some pixel, then the slice at that pixel will start at index 0.|The coordinate (exclusive) at which to stop taking slices. By default this will be the length of the given axis. Negative numbers are used to position the end of slicing relative to the end of the array, where -1 will exclude the last position, -2 will exclude the last two positions, etc. There must be one band for end indices, or one band per 'input' band. If this argument is not set or masked at some pixel, then the slice at that pixel will end just after the last index.|The separation between slices along 'axis'; a slice will be taken at each whole multiple of 'step' from 'start' (inclusive) to 'end' (exclusive). Must be positive.
ee.Image.arraySort	Sorts elements of each array pixel along one axis.	Image.arraySort(keys)	Image	image|keys	Image|Image, default: null	Array image to sort.|Optional keys to sort by. If not provided, the values are used as the keys. The keys can only have multiple elements along one axis, which determines the direction to sort in.
ee.Image.arrayTranspose	Transposes two dimensions of each array pixel.	Image.arrayTranspose(axis1, axis2)	Image	input|axis1|axis2	Image|Integer, default: 0|Integer, default: 1	Input image.|First axis to swap.|Second axis to swap.
ee.Image.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Image.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Image.asin	Computes the arc sine in radians of the input.	Image.asin()	Image	value	Image	The image to which the operation is applied.
ee.Image.atan	Computes the arc tangent in radians of the input.	Image.atan()	Image	value	Image	The image to which the operation is applied.
ee.Image.atan2	Calculates the angle formed by the 2D vector [x, y] for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.atan2(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bandNames	Returns a list containing the names of the bands of an image.	Image.bandNames()	List	image	Image	The image from which to get band names.
ee.Image.bandTypes	Returns a dictionary of the image's band types.	Image.bandTypes()	Dictionary	image	Image	The image from which to get band types.
ee.Image.bitCount	Calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Image.bitCount()	Image	value	Image	The image to which the operation is applied.
ee.Image.bitsToArrayImage	Turns the bits of an integer into a 1-D array.  The array has a lengthup to the highest 'on' bit in the input.	Image.bitsToArrayImage()	Image	input	Image	Input image.
ee.Image.bitwiseAnd	Calculates the bitwise AND of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseAnd(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bitwiseNot	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Image.bitwiseNot()	Image	value	Image	The image to which the operation is applied.
ee.Image.bitwiseOr	Calculates the bitwise OR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseOr(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bitwiseXor	Calculates the bitwise XOR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwiseXor(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bitwise_and	Calculates the bitwise AND of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwise_and(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bitwise_not	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Image.bitwise_not()	Image	value	Image	The image to which the operation is applied.
ee.Image.bitwise_or	Calculates the bitwise OR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwise_or(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.bitwise_xor	Calculates the bitwise XOR of the input values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.bitwise_xor(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.blend	Overlays one image on top of another. The images are blended together using the masks as opacity. If either of images has only 1 band, it is replicated to match the number of bands in the other image.	Image.blend(top)	Image	bottom|top	Image|Image	The bottom image.|The top image.
ee.Image.byte	Casts the input value to an unsigned 8-bit integer.	Image.byte()	Image	value	Image	The image to which the operation is applied.
ee.Image.cast	Casts some or all bands of an image to the specified types.	Image.cast(bandTypes, bandOrder)	Image	image|bandTypes|bandOrder	Image|Dictionary|List, default: null	The image to cast.|A dictionary from band name to band types. Types can be PixelTypes or strings. The valid strings are: 'int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'byte', 'short', 'int', 'long', 'float' and 'double'. If bandTypes includes bands that are not already in the input image, they will be added to the image as transparent bands. If bandOrder isn't also specified, new bands will be appended in alphabetical order.|A list specifying the order of the bands in the result. If specified, must match the full list of bands in the result.
ee.Image.cat	Concatenate the given images together into a single image.	ee.Image.cat(var_args)	Image	var_args	VarArgs	The images to be combined.
ee.Image.cbrt	Computes the cubic root of the input.	Image.cbrt()	Image	value	Image	The image to which the operation is applied.
ee.Image.ceil	Computes the smallest integer greater than or equal to the input.	Image.ceil()	Image	value	Image	The image to which the operation is applied.
ee.Image.changeProj	Tweaks the projection of the input image, moving each pixel from its location in srcProj to the same coordinates in dstProj.	Image.changeProj(srcProj, dstProj)	Image	input|srcProj|dstProj	Image|Projection|Projection	|The original projection.|The new projection.
ee.Image.clamp	Clamps the values in all bands of an image to all lie within the specified range.	Image.clamp(low, high)	Image	input|low|high	Image|Float|Float	The image to clamp.|The minimum allowed value in the range.|The maximum allowed value in the range.
ee.Image.classify	Classifies an image.	Image.classify(classifier, outputName)	Image	image|classifier|outputName	"Image|Classifier|String, default: ""classification"""	The image to classify.  Bands are extracted from this image by name, and it must contain all the bands named in the classifier's schema.|The classifier to use.|The name of the band to be added.
ee.Image.clip	Clips an image to a Geometry or Feature.	Image.clip(geometry)	Image	image|geometry	Image|Feature|Geometry|Object	The Image instance.|The Geometry or Feature to clip to.
ee.Image.clipToBoundsAndScale	Clips an image to the bounds of a Geometry, and scales the clipped image to a particular size or scale.	Image.clipToBoundsAndScale(geometry, width, height, maxDimension, scale)	Image	input|geometry|width|height|maxDimension|scale	Image|Geometry, default: null|Integer, default: null|Integer, default: null|Integer, default: null|Float, default: null	"The image to clip and scale.|The Geometry to clip the image to. The image will be clipped to the bounding box, in the image's projection, of this geometry.|The width to scale the image to, in pixels. Must be provided along with ""height"". Exclusive with ""maxDimension"" and ""scale"".|The height to scale the image to, in pixels. Must be provided along with ""width"". Exclusive with ""maxDimension"" and ""scale"".|The maximum dimension to scale the image to, in pixels. Exclusive with ""width"", ""height"" and ""scale"".|If scale is specified, then the projection is scaled by dividing the specified scale value by the nominal size of a meter in the image's projection. Exclusive with ""width"", ""height"" and ""maxDimension""."
ee.Image.clipToCollection	Clips an image to a FeatureCollection. The output bands correspond exactly the input bands, except data not covered by the geometry of at least one feature from the collection is masked. The output image retains the metadata of the input image.	Image.clipToCollection(collection)	Image	input|collection	Image|Object	The image to clip.|The FeatureCollection to clip to.
ee.Image.cluster	Applies a clusterer to an image.  Returns a new image with a single band containing values from 0 to N, indicating the cluster each pixel is assigned to.	Image.cluster(clusterer, outputName)	Image	image|clusterer|outputName	"Image|Clusterer|String, default: ""cluster"""	The image to cluster. Must contain all the bands in the clusterer's schema.|The clusterer to use.|The name of the output band.
ee.Image.connectedComponents	Finds connected components with the same value of the first band of the input and labels them with a globally unique value.  Connectedness is specified by the given kernel.  Objects larger than maxSize are considered background, and are masked.	Image.connectedComponents(connectedness, maxSize)	Image	image|connectedness|maxSize	Image|Kernel|Integer	The image to label.|Connectedness kernel.|Maximum size of objects to be labeled.
ee.Image.connectedPixelCount	Generate an image where each pixel contains the number of 4- or 8-connected neighbors (including itself).	Image.connectedPixelCount(maxSize, eightConnected)	Image	input|maxSize|eightConnected	Image|Integer, default: 100|Boolean, default: true	The input image.|The maximum size of the neighborhood in pixels.|Whether to use 8-connected rather 4-connected rules.
ee.Image.constant	Generates an image containing a constant value everywhere.	ee.Image.constant(value)	Image	value	Object	The value of the pixels in the constant image. Must be a number or an Array or a list of numbers or Arrays.
ee.Image.convolve	Convolves each band of an image with the given kernel.	Image.convolve(kernel)	Image	image|kernel	Image|Kernel	The image to convolve.|The kernel to convolve with.
ee.Image.cos	Computes the cosine of the input in radians.	Image.cos()	Image	value	Image	The image to which the operation is applied.
ee.Image.cosh	Computes the hyperbolic cosine of the input.	Image.cosh()	Image	value	Image	The image to which the operation is applied.
ee.Image.cumulativeCost	Computes a cumulative cost map based on an image containing costs to traverse each pixel and an image containing source locations.	Image.cumulativeCost(source, maxDistance, geodeticDistance)	Image	cost|source|maxDistance|geodeticDistance	Image|Image|Float|Boolean, default: true	A single-band image representing the cost to traverse each pixel. Masked pixels can't be traversed.|A single-band image representing the sources. A pixel value different from 0  defines a source pixel.|Maximum distance for computation, in meters.|If true, geodetic distance along the curved surface is used, assuming a spherical Earth of radius 6378137.0. If false, euclidean distance in the 2D plane of the map projection is used (faster, but less accurate).
ee.Image.date	Returns the acquisition time of an image as a Date object.  This helper function is equivalent to ee.Date(image.get('system:time_start')).	Image.date()	Date	image	Image	The image whose acquisition time to return.
ee.Image.derivative	Computes the X and Y discrete derivatives for each band in the input image, in pixel coordinates.	Image.derivative()	Image	image	Image	The input image.
ee.Image.digamma	Computes the digamma function of the input.	Image.digamma()	Image	value	Image	The image to which the operation is applied.
ee.Image.displace	Warps an image using an image of displacements.	Image.displace(displacement, mode)	Image	image|displacement|mode	"Image|Image|String, default: ""bicubic"""	The image to warp.|An image containing displacement values. The first band is interpreted as the 'X' displacement and the second as the 'Y' displacement. Each displacement pixel is a [dx,dy] vector added to the pixel location to determine the corresponding pixel location in 'image'. Displacements are interpreted as meters in the default projection of the displacement image.|The interpolation mode to use.  One of 'nearest_neighbor', 'bilinear' or 'bicubic'.)
ee.Image.displacement	Determines displacements required to register an image to a reference image while allowing local, rubber sheet deformations. Displacements are computed in the CRS of the reference image, at a scale dictated by the lowest resolution of the following three projections: input image projection, reference image projection, and requested projection. The displacements are then transformed into the user-specified projection for output.	Image.displacement(referenceImage, maxOffset, projection, patchWidth, stiffness)	Image	image|referenceImage|maxOffset|projection|patchWidth|stiffness	Image|Image|Float|Projection, default: null|Float, default: null|Float, default: 5	The image to register.|The image to register to.|The maximum offset allowed when attempting to align the input images, in meters. Using a smaller value can reduce computation time significantly, but it must still be large enough to cover the greatest displacement within the entire image region.|The projection in which to output displacement values. The default is the projection of the first band of the reference image.|Patch size for detecting image offsets, in meters. This should be set large enough to capture texture, as well as large enough that ignorable objects are small within the patch. Default is null. Patch size will be determined automatically if not provided.|Enforces a stiffness constraint on the solution. Valid values are in the range [0,10]. The stiffness is used for outlier rejection when determining displacements at adjacent grid points. Higher values move the solution towards a rigid transformation. Lower values allow more distortion or warping of the image during registration.
ee.Image.distance	Computes the distance to the nearest non-zero pixel in each band, using the specified distance kernel.	Image.distance(kernel, skipMasked)	Image	image|kernel|skipMasked	Image|Kernel, default: null|Boolean, default: true	The input image.|The distance kernel.|Mask output pixels if the corresponding input pixel is masked.
ee.Image.divide	Divides the first value by the second, returning 0 for division by 0 for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.divide(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.double	Casts the input value to a 64-bit float.	Image.double()	Image	value	Image	The image to which the operation is applied.
ee.Image.entropy	Computes the windowed entropy for each band using the specified kernel centered on each input pixel.	Image.entropy(kernel)	Image	image|kernel	Image|Kernel	The image for which to compute the entropy.|A kernel specifying the window in which to compute.
ee.Image.eq	Returns 1 iff the first value is equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.eq(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.erf	Computes the error function of the input.	Image.erf()	Image	value	Image	The image to which the operation is applied.
ee.Image.erfInv	Computes the inverse error function of the input.	Image.erfInv()	Image	value	Image	The image to which the operation is applied.
ee.Image.erfc	Computes the complementary error function of the input.	Image.erfc()	Image	value	Image	The image to which the operation is applied.
ee.Image.erfcInv	Computes the inverse complementary error function of the input.	Image.erfcInv()	Image	value	Image	The image to which the operation is applied.
ee.Image.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Image.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Image.exp	Computes the Euler's number e raised to the power of the input.	Image.exp()	Image	value	Image	The image to which the operation is applied.
ee.Image.expression	Evaluates an arithmetic expression on an image, possibly involving additional images.	Image.expression(expression, map)	Image	image|expression|map	Image|String|Dictionary, optional	The Image instance.|The expression to evaluate.|A map of input images available by name.
ee.Image.fastDistanceTransform	Returns the distance, as determined by the specified distance metric, to the nearest non-zero valued pixel in the input.  The output contains values for all pixels within the given neighborhood size, regardless of the input's mask.  Note: the default distance metric returns squared distance.	Image.fastDistanceTransform(neighborhood, units, metric)	Image	image|neighborhood|units|metric	"Image|Integer, default: 256|String, default: ""pixels""|String, default: ""squared_euclidean"""	The input image.|Neighborhood size in pixels.|The units of the neighborhood, currently only 'pixels' are supported.|Distance metric to use: options are 'squared_euclidean', 'manhattan' or 'chebyshev'.
ee.Image.first	Selects the value of the first value for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.first(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.firstNonZero	Selects the first value if it is non-zero, and the second value otherwise for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.firstNonZero(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.first_nonzero	Selects the first value if it is non-zero, and the second value otherwise for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.first_nonzero(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.float	Casts the input value to a 32-bit float.	Image.float()	Image	value	Image	The image to which the operation is applied.
ee.Image.floor	Computes the largest integer less than or equal to the input.	Image.floor()	Image	value	Image	The image to which the operation is applied.
ee.Image.focal_max	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focal_max(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	The image to which to apply the operations.|The radius of the kernel to use.|The type of kernel to use. Options include: 'circle', 'square', 'cross', 'plus', octagon' and 'diamond'.|If a kernel is not specified, this determines whether the kernel is in meters or pixels.|The number of times to apply the given kernel.|A custom kernel. If used, kernelType and radius are ignored.
ee.Image.focal_mean	Applies a morphological mean filter to each band of an image using a named or custom kernel.	Image.focal_mean(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	The image to which to apply the operations.|The radius of the kernel to use.|The type of kernel to use. Options include: 'circle', 'square', 'cross', 'plus', octagon' and 'diamond'.|If a kernel is not specified, this determines whether the kernel is in meters or pixels.|The number of times to apply the given kernel.|A custom kernel. If used, kernelType and radius are ignored.
ee.Image.focal_median	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focal_median(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	The image to which to apply the operations.|The radius of the kernel to use.|The type of kernel to use. Options include: 'circle', 'square', 'cross', 'plus', octagon' and 'diamond'.|If a kernel is not specified, this determines whether the kernel is in meters or pixels.|The number of times to apply the given kernel.|A custom kernel. If used, kernelType and radius are ignored.
ee.Image.focal_min	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focal_min(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	The image to which to apply the operations.|The radius of the kernel to use.|The type of kernel to use. Options include: 'circle', 'square', 'cross', 'plus', octagon' and 'diamond'.|If a kernel is not specified, this determines whether the kernel is in meters or pixels.|The number of times to apply the given kernel.|A custom kernel. If used, kernelType and radius are ignored.
ee.Image.focal_mode	Applies a morphological reducer() filter to each band of an image using a named or custom kernel.	Image.focal_mode(radius, kernelType, units, iterations, kernel)	Image	image|radius|kernelType|units|iterations|kernel	"Image|Float, default: 1.5|String, default: ""circle""|String, default: ""pixels""|Integer, default: 1|Kernel, default: null"	The image to which to apply the operations.|The radius of the kernel to use.|The type of kernel to use. Options include: 'circle', 'square', 'cross', 'plus', octagon' and 'diamond'.|If a kernel is not specified, this determines whether the kernel is in meters or pixels.|The number of times to apply the given kernel.|A custom kernel. If used, kernelType and radius are ignored.
ee.Image.gamma	Computes the gamma function of the input.	Image.gamma()	Image	value	Image	The image to which the operation is applied.
ee.Image.gammainc	Calculates the regularized lower incomplete Gamma function γ(x,a) for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.gammainc(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.get	Extract a property from a feature.	Image.get(property)		object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Image.getArray	Extract a property from a feature.	Image.getArray(property)	Array	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Image.getDownloadURL	Get a Download URL for the image, which always downloads a zipped GeoTIFF. Use getThumbURL for other file formats like PNG, JPG, or raw GeoTIFF.	Image.getDownloadURL(params, callback)	Object|String	image|params|callback	Image|Object|Function, optional	The Image instance.|An object containing download options with the following possible values:|  - name: a base name to use when constructing filenames.|  - bands: a description of the bands to download. Must be an array of dictionaries, each with the following keys:|    + id: the name of the band, a string, required.|    + crs: an optional CRS string defining the band projection.|    + crs_transform: an optional array of 6 numbers specifying an affine transform from the specified CRS, in row-major order:|[xScale, xShearing, xTranslation, yShearing, yScale, yTranslation]|    + dimensions: an optional array of two integers defining the width and height to which the band is cropped.|    + scale: an optional number, specifying the scale in meters of the band; ignored if crs and crs_transform is specified.|  - crs: a default CRS string to use for any bands that do not explicitly specify one.|  - crs_transform: a default affine transform to use for any bands that do not specify one, of the same format as the crs_transform of bands.|  - dimensions: default image cropping dimensions to use for any bands that do not specify them.|  - scale: a default scale to use for any bands that do not specify one; ignored if crs and crs_transform is specified.|  - region: a polygon specifying a region to download; ignored if crs and crs_transform is specified.|  - filePerBand: Whether to produce a different GeoTIFF per band (boolean). Defaults to true. If false, a single GeoTIFF is produced and all band-level transformations will be ignored.|An optional callback. If not supplied, the call is made synchronously.
ee.Image.getInfo	An imperative function that returns information about this image via an AJAX call.	Image.getInfo(callback)	ImageDescription	image|callback	Image|Function, optional	The Image instance.|An optional callback. If not supplied, the call is made synchronously. If supplied, will be called with the first parameter if successful and the second if unsuccessful.
ee.Image.getMap	An imperative function that returns a map id and optional token, suitable for generating a Map overlay.	Image.getMap(visParams, callback)	MapId|Object	image|visParams|callback	Image|ImageVisualizationParameters, optional|Function, optional	The Image instance.|The visualization parameters.|An async callback. If not supplied, the call is made synchronously.
ee.Image.getNumber	Extract a property from a feature.	Image.getNumber(property)	Number	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Image.getString	Extract a property from a feature.	Image.getString(property)	String	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.Image.getThumbId	Applies transformations and returns the thumbId.	Image.getThumbId(params, callback)	ThumbnailId	image|params|callback	Image|Object|Function, optional	The Image instance.|Parameters identical to ee.data.getMapId, plus, optionally:|  - dimensions (a number or pair of numbers in format WIDTHxHEIGHT) Maximum dimensions of the thumbnail to render, in pixels. If only one number is passed, it is used as the maximum, and the other dimension is computed by proportional scaling.|  - region Geospatial region of the image to render, it may be an ee.Geometry, GeoJSON, or an array of lat/lon points (E,S,W,N). If not set the default is the bounds image.|An optional callback. If not supplied, the call is made synchronously.
ee.Image.getThumbURL	Get a thumbnail URL for this image.	Image.getThumbURL(params, callback)	Object|String	image|params|callback	Image|Object|Function, optional	The Image instance.|Parameters identical to ee.data.getMapId, plus, optionally:|  - dimensions (a number or pair of numbers in format WIDTHxHEIGHT) Maximum dimensions of the thumbnail to render, in pixels. If only one number is passed, it is used as the maximum, and the other dimension is computed by proportional scaling.|  - region Geospatial region of the image to render, it may be an ee.Geometry, GeoJSON, or an array of lat/lon points (E,S,W,N). If not set the default is the bounds image.|  - format (string) Either 'png' or 'jpg'.|An optional callback. If not supplied, the call is made synchronously.
ee.Image.glcmTexture	Computes texture metrics from the Gray Level Co-occurrence Matrix around each pixel of every band.  The GLCM is a tabulation of how often different combinations of pixel brightness values (grey levels) occur in an image.  It counts the number of times a pixel of value X lies next to a pixel of value Y, in a particular direction and distance. and then derives statistics from this tabulation.	Image.glcmTexture(size, kernel, average)	Image	image|size|kernel|average	Image|Integer, default: 1|Kernel, default: null|Boolean, default: true	The image for which to compute texture metrics.|The size of the neighborhood to include in each GLCM.|A kernel specifying the x and y offsets over which to compute the GLCMs.  A GLCM is computed for each pixel in the kernel that is non-zero, except the center pixel and as long as a GLCM hasn't already been computed for the same direction and distance.  For example, if either or both of the east and west pixels are set, only 1 (horizontal) GLCM is computed.  Kernels are scanned from left to right and top to bottom.  The default is a 3x3 square, resulting in 4 GLCMs with the offsets (-1, -1), (0, -1), (1, -1) and (-1, 0).|If true, the directional bands for each metric are averaged.
ee.Image.gradient	Calculates the x and y gradient.	Image.gradient()	Image	input	Image	The input image.
ee.Image.gt	Returns 1 iff the first value is greater than the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.gt(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.gte	Returns 1 iff the first value is greater than or equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.gte(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.hsvToRgb	Transforms the image from the HSV color space to the RGB color space.  Expects a 3 band image in the range [0, 1], and produces three bands: red, green and blue with values in the range [0, 1].	Image.hsvToRgb()	Image	image	Image	The image to transform.
ee.Image.hypot	Calculates the magnitude of the 2D vector [x, y] for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.hypot(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.id	Returns the ID of a given element within a collection. Objects outside collections are not guaranteed to have IDs.	Image.id()	String	element	Element	The element from which the ID is taken.
ee.Image.int	Casts the input value to a signed 32-bit integer.	Image.int()	Image	value	Image	The image to which the operation is applied.
ee.Image.int16	Casts the input value to a signed 16-bit integer.	Image.int16()	Image	value	Image	The image to which the operation is applied.
ee.Image.int32	Casts the input value to a signed 32-bit integer.	Image.int32()	Image	value	Image	The image to which the operation is applied.
ee.Image.int64	Casts the input value to a signed 64-bit integer.	Image.int64()	Image	value	Image	The image to which the operation is applied.
ee.Image.int8	Casts the input value to a signed 8-bit integer.	Image.int8()	Image	value	Image	The image to which the operation is applied.
ee.Image.interpolate	"Interpolates each point in the first band of the input image into the piecewise-linear function specified by the x and y arrays.  The x values must be strictly increasing.  If an input point is less than the first or greater than the last x value, then the output is specified by the ""behavior"" argument: ""extrapolate"" specifies the output value is extrapolated from the two nearest points, ""clamp"" specifies the output value is taken from the nearest point, ""input""  specifies the output value is copied from the input and ""mask"" specifies the output value is masked."	Image.interpolate(x, y, behavior)	Image	image|x|y|behavior	"Image|List|List|String, default: ""extrapolate"""	The image to which the interpolation is applied.|The x axis (input) values in the piecewise function.|The y axis (output) values in the piecewise function.|The behavior for points that are outside of the range of the supplied function.  Options are: 'extrapolate', 'clamp', 'mask' or 'input'.
ee.Image.lanczos	Computes the Lanczos approximation of the input.	Image.lanczos()	Image	value	Image	The image to which the operation is applied.
ee.Image.leftShift	Calculates the left shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.leftShift(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.left_shift	Calculates the left shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.left_shift(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.load	Returns the image given its ID.	ee.Image.load(id, version)	Image	id|version	String|Long, default: -1	The asset ID of the image.|The version of the asset. -1 signifies the latest version.
ee.Image.log	Computes the natural logarithm of the input.	Image.log()	Image	value	Image	The image to which the operation is applied.
ee.Image.log10	Computes the base-10 logarithm of the input.	Image.log10()	Image	value	Image	The image to which the operation is applied.
ee.Image.long	Casts the input value to a signed 64-bit integer.	Image.long()	Image	value	Image	The image to which the operation is applied.
ee.Image.lt	Returns 1 iff the first value is less than the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.lt(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.lte	Returns 1 iff the first value is less than or equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.lte(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.mask	Gets or sets an image's mask. The output image retains the metadata and footprint of the input image. Pixels where the mask changes from zero to another value will be filled with zeros, or the values closest to zero within the range of the pixel type.	Image.mask(mask)	Image	image|mask	Image|Image, default: null	The input image.|The mask image. If specified, the input image is copied to the output but given the mask by the values of this image. If this is a single band, it is used for all bands in the input image. If not specified, returns an image created from the mask of the input image, scaled to the range [0:1] (invalid = 0, valid = 1.0).
ee.Image.matrixCholeskyDecomposition	Calculates the Cholesky decomposition of a matrix. The Cholesky decomposition is a decomposition into the form L*L' where L is a lower triangular matrix. The input must be a symmetric positive-definite matrix. Returns an image with 1 band named 'L'.	Image.matrixCholeskyDecomposition()	Image	image	Image	Image of 2-D matrices to be decomposed.
ee.Image.matrixDeterminant	Computes the determinant of the matrix.	Image.matrixDeterminant()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixDiagonal	Computes the diagonal of the matrix in a single column.	Image.matrixDiagonal()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixFnorm	Computes the Frobenius norm of the matrix.	Image.matrixFnorm()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixIdentity	Creates an image where each pixel is a 2D identity matrix of the given size.	ee.Image.matrixIdentity(size)	Image	size	Integer	The length of each axis.
ee.Image.matrixInverse	Computes the inverse of the matrix.	Image.matrixInverse()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixLUDecomposition	Calculates the LU matrix decomposition such that P×input=L×U, where L is lower triangular (with unit diagonal terms), U is upper triangular and P is a partial pivot permutation matrix. The input matrix must be square. Returns an image with bands named 'L', 'U' and 'P'.	Image.matrixLUDecomposition()	Image	image	Image	Image of 2-D matrices to be decomposed.
ee.Image.matrixMultiply	Returns the matrix multiplication A*B for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.matrixMultiply(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.matrixPseudoInverse	Computes the Moore-Penrose pseudoinverse of the matrix.	Image.matrixPseudoInverse()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixQRDecomposition	Calculates the QR-decomposition of a matrix into two matrices Q and R such that input = QR, where Q is orthogonal, and R is upper triangular. Returns an image with bands named 'Q' and 'R'.	Image.matrixQRDecomposition()	Image	image	Image	Image of 2-D matrices to be decomposed.
ee.Image.matrixSingularValueDecomposition	Calculates the Singular Value Decomposition of the input matrix into U×S×V', such that U and V are orthogonal and S is diagonal. Returns an image with bands named 'U', 'S' and 'V'.	Image.matrixSingularValueDecomposition()	Image	image	Image	Image of 2-D matrices to be decomposed.
ee.Image.matrixSolve	Solves for x in the matrix equation A*x=B, finding a least-squares solution if A is overdetermined for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.matrixSolve(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.matrixToDiag	Computes a square diagonal matrix from a single column matrix.	Image.matrixToDiag()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixTrace	Computes the trace of the matrix.	Image.matrixTrace()	Image	value	Image	The image to which the operation is applied.
ee.Image.matrixTranspose	Transposes two dimensions of each array pixel.	Image.matrixTranspose(axis1, axis2)	Image	input|axis1|axis2	Image|Integer, default: 0|Integer, default: 1	Input image.|First axis to swap.|Second axis to swap.
ee.Image.max	Selects the maximum of the first and second values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.max(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.medialAxis	Computes the discrete medial axis of the zero valued pixels of the first band of the input.  Outputs 4 bands:	Image.medialAxis(neighborhood, units)	Image	image|neighborhood|units	"Image|Integer, default: 256|String, default: ""pixels"""	The input image.|Neighborhood size in pixels.|The units of the neighborhood, currently only 'pixels' are supported.
ee.Image.metadata	Generates a constant image of type double from a metadata property.	Image.metadata(property, name)	Image	image|property|name	Image|String|String, default: null	The image from which to get the metadata|The property from which to take the value.|The name for the output band.  If unspecified, it will be the same as the property name.
ee.Image.min	Selects the minimum of the first and second values for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.min(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.mod	Calculates the remainder of the first value divided by the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.mod(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.multiply	Multiplies the first value by the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.multiply(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.neighborhoodToArray	Turns the neighborhood of each pixel in a scalar image into a 2D array. Axes 0 and 1 of the output array correspond to Y and X axes of the image, respectively. The output image will have as many bands as the input; each output band has the same mask as the corresponding input band. The footprint and metadata of the input image are preserved.	Image.neighborhoodToArray(kernel, defaultValue)	Image	image|kernel|defaultValue	Image|Kernel|Float, default: 0	The image to get pixels from; must be scalar-valued.|The kernel specifying the shape of the neighborhood. Only fixed, square and rectangle kernels are supported. Weights are ignored; only the shape of the kernel is used.|The value to use in the output arrays to replace the invalid (masked) pixels of the input. If the band type is integral, the fractional part of this value is discarded; in all cases, the value is clamped to the value range of the band.
ee.Image.neighborhoodToBands	Turn the neighborhood of a pixel into a set of bands. The neighborhood is specified using a Kernel, and only non-zero-weight kernel values are used. The weights of the kernel is otherwise ignored.	Image.neighborhoodToBands(kernel)	Image	image|kernel	Image|Kernel	The image to get pixels from.|The kernel specifying the neighborhood. Zero-weight values are ignored.
ee.Image.neq	Returns 1 iff the first value is not equal to the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.neq(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.normalizedDifference	Computes the normalized difference between two bands. If the bands to use are not specified, uses the first two bands. The normalized difference is computed as (first − second) / (first + second). Note that negative input values are forced to 0 so that the result is confined to the range (-1, 1).	Image.normalizedDifference(bandNames)	Image	input|bandNames	Image|List, default: null	The input image.|A list of names specifying the bands to use.  If not specified, the first and second bands are used.
ee.Image.not	Returns 0 if the input is non-zero, and 1 otherwise.	Image.not()	Image	value	Image	The image to which the operation is applied.
ee.Image.or	Returns 1 iff either input value is non-zero for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is boolean.	Image.or(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.paint	Paints the geometries of a collection onto an image.	Image.paint(featureCollection, color, width)	Image	image|featureCollection|color|width	Image|FeatureCollection|Object, default: 0|Object, default: null	The image on which the collection is painted.|The collection painted onto the image.|Either the name of a color property or a number.|Either the name of a line-width property or a number.
ee.Image.pixelArea	Generate an image in which the value of each pixel is the area of that pixel in square meters.	ee.Image.pixelArea()	Image
ee.Image.pixelCoordinates	Creates a two band image containing the x and y coordinates of each pixel in the given projection.	ee.Image.pixelCoordinates(projection)	Image	projection	Projection	The projection in which to provide pixels.
ee.Image.pixelLonLat	Creates an image with two bands named 'longitude' and 'latitude', containing the longitude and latitude at each pixel, in degrees.	ee.Image.pixelLonLat()	Image
ee.Image.polynomial	Compute a polynomial at each pixel using the given coefficients.	Image.polynomial(coefficients)	Image	image|coefficients	Image|List	The input image.|The polynomial coefficients in increasing order of degree starting with the constant term.
ee.Image.pow	Raises the first value to the power of the second for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is float.	Image.pow(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.projection	Returns the default projection of an Image.  Throws an error if the bands of the image don't all have the same projection.	Image.projection()	Projection	image	Image	The image from which to get the projection.
ee.Image.propertyNames	Returns the names of properties on this element.	Image.propertyNames()	List	element	Element
ee.Image.random	Generates a uniform random number at each pixel location, in the range of 0 to 1.	ee.Image.random(seed)	Image	seed	Long, default: 0	Seed for the random number generator.
ee.Image.randomVisualizer	Creates a vizualization image by assigning a random color to each unique value of the pixels of the first band. The first three bands of the output image will contan 8-bit R, G and B values, followed by all bands of the input image.	Image.randomVisualizer()	Image	image	Image	Image with at least one band.
ee.Image.reduce	Applies a reducer to all of the bands of an image.	Image.reduce(reducer)	Image	image|reducer	Image|Reducer	The image to reduce.|The reducer to apply to the given image.
ee.Image.reduceConnectedComponents	Applies a reducer to all of the pixels inside of each 'object'. Pixels are considered to belong to an object if they are connected (8-way) and have the same value in the 'label' band.  The label band is only used to identify the connectedness; the rest are provided as inputs to the reducer.	Image.reduceConnectedComponents(reducer, labelBand, maxSize)	Image	image|reducer|labelBand|maxSize	Image|Reducer|String, default: null|Integer, default: 256	The input image.|The reducer to apply to pixels within the connected component.|The name of the band to use to detect connectedness.  If unspecified, the first band is used.|Size of the neighborhood to consider when aggregating values.  Any objects larger than maxSize in either the horizontal or vertical dimension will be masked, since portions of the object might be outside of the neighborhood.
ee.Image.reduceNeighborhood	Applies the given reducer to the neighborhood around each pixel, as determined by the given kernel. If the reducer has a single input, it will be applied separately to each band of the collection; otherwise it must have the same number of inputs as the input image has bands.	Image.reduceNeighborhood(reducer, kernel, inputWeight, skipMasked, optimization)	Image	image|reducer|kernel|inputWeight|skipMasked|optimization	"Image|Reducer|Kernel|String, default: ""kernel""|Boolean, default: true|String, default: null"	The input image.|The reducer to apply to pixels within the neighborhood.|The kernel defining the neighborhood.|One of 'mask', 'kernel', or 'min'.|Mask output pixels if the corresponding input pixel is masked.|Optimization strategy.  Options are 'boxcar' and 'window'.  The 'boxcar' method is a fast method for computing count, sum or mean.  It requires a homogeneous kernel, a single-input reducer and either MASK, KERNEL or no weighting. The 'window' method uses a running window, and has the same requirements as 'boxcar', but can use any single input reducer.  Both methods require considerable additional memory.
ee.Image.reduceRegion	Apply a reducer to all the pixels in a specific region.	Image.reduceRegion(reducer, geometry, scale, crs, crsTransform, bestEffort, maxPixels, tileScale)	Dictionary	image|reducer|geometry|scale|crs|crsTransform|bestEffort|maxPixels|tileScale	Image|Reducer|Geometry, default: null|Float, default: null|Projection, default: null|List, default: null|Boolean, default: false|Long, default: 10000000|Float, default: 1	The image to reduce.|The reducer to apply.|The region over which to reduce data.  Defaults to the footprint of the image's first band.|A nominal scale in meters of the projection to work in.|The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale.|The list of CRS transform values.  This is a row-major ordering of the 3x2 transform matrix.  This option is mutually exclusive with 'scale', and replaces any transform already set on the projection.|If the polygon would contain too many pixels at the given scale, compute and use a larger scale which would allow the operation to succeed.|The maximum number of pixels to reduce.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.
ee.Image.reduceRegions	Apply a reducer over the area of each feature in the given collection.	Image.reduceRegions(collection, reducer, scale, crs, crsTransform, tileScale)	FeatureCollection	image|collection|reducer|scale|crs|crsTransform|tileScale	Image|FeatureCollection|Reducer|Float, default: null|Projection, default: null|List, default: null|Float, default: 1	The image to reduce.|The features to reduce over.|The reducer to apply.|A nominal scale in meters of the projection to work in.|The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale.|The list of CRS transform values.  This is a row-major ordering of the 3x2 transform matrix.  This option is mutually exclusive with 'scale', and will replace any transform already set on the projection.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.
ee.Image.reduceResolution	Enables reprojection using the given reducer to combine all input pixels corresponding to each output pixel. If the reducer has a single input, it will be applied separately to each band of the collection; otherwise it must have the same number of inputs as the input image has bands.	Image.reduceResolution(reducer, bestEffort, maxPixels)	Image	image|reducer|bestEffort|maxPixels	Image|Reducer|Boolean, default: false|Integer, default: 64	The input image.|The reducer to apply to be used for combining pixels.|If using the input at its default resolution would require too many pixels, start with already-reduced input pixels from a pyramid level that allows the operation to succeed.|The maximum number of input pixels to combine for each output pixel.  Setting this too large will cause out-of-memory problems.
ee.Image.reduceToVectors	Convert an image to a feature collection by reducing homogenous regions. Given an image containing a band of labeled segments and zero or more additional bands, runs a reducer over the pixels in each segment producing a feature per segment.	Image.reduceToVectors(reducer, geometry, scale, geometryType, eightConnected, labelProperty, crs, crsTransform, bestEffort, maxPixels, tileScale, geometryInNativeProjection)	FeatureCollection	image|reducer|geometry|scale|geometryType|eightConnected|labelProperty|crs|crsTransform|bestEffort|maxPixels|tileScale|geometryInNativeProjection	"Image|Reducer, default: null|Geometry, default: null|Float, default: null|String, default: ""polygon""|Boolean, default: true|String, default: ""label""|Projection, default: null|List, default: null|Boolean, default: false|Long, default: 10000000|Float, default: 1|Boolean, default: false"	The input image. The first band is expected to be an integer type; adjacent pixels will be in the same segment if they have the same value in this band.|The reducer to apply.  Its inputs will be taken from the image's bands after dropping the first band.  Defaults to Reducer.countEvery()|The region over which to reduce data.  Defaults to the footprint of the image's first band.|A nominal scale in meters of the projection to work in.|How to choose the geometry of each generated feature; one of 'polygon' (a polygon enclosing the pixels in the segment), 'bb' (a rectangle bounding the pixels), or 'centroid' (the centroid of the pixels).|If true, diagonally-connected pixels are considered adjacent; otherwise only pixels that share an edge are.|If non-null, the value of the first band will be saved as the specified property of each feature.|The projection to work in. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale.|The list of CRS transform values.  This is a row-major ordering of the 3x2 transform matrix.  This option is mutually exclusive with 'scale', and replaces any transform already set on the projection.|If the polygon would contain too many pixels at the given scale, compute and use a larger scale which would allow the operation to succeed.|The maximum number of pixels to reduce.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.|Create geometries in the pixel projection, rather than WGS84.
ee.Image.regexpRename	Renames the bands of an image by applying a regular expression replacement to the current band names.  Any bands not matched by the regex will be copied over without renaming.	Image.regexpRename(regex, replacement, all)	Image	input|regex|replacement|all	Image|String|String|Boolean, default: true	The image containing the bands to rename.|A regular expression to match in each band name.|The text with which to replace each match.  Supports $n syntax for captured values.|If true, all matches in a given string will be replaced.  Otherwise, only the first match in each string will be replaced.
ee.Image.register	Registers an image to a reference image while allowing local, rubber sheet deformations. Displacements are computed in the CRS of the reference image, at a scale dictated by the lowest resolution of the following three projections: input image projection, reference image projection, and requested projection. The displacements then applied to the input image to register it with the reference.	Image.register(referenceImage, maxOffset, patchWidth, stiffness)	Image	image|referenceImage|maxOffset|patchWidth|stiffness	Image|Image|Float|Float, default: null|Float, default: 5	The image to register.|The image to register to.|The maximum offset allowed when attempting to align the input images, in meters. Using a smaller value can reduce computation time significantly, but it must still be large enough to cover the greatest displacement within the entire image region.|Patch size for detecting image offsets, in meters. This should be set large enough to capture texture, as well as large enough that ignorable objects are small within the patch. Default is null. Patch size will be determined automatically if notprovided.|Enforces a stiffness constraint on the solution. Valid values are in the range [0,10]. The stiffness is used for outlier rejection when determining displacements at adjacent grid points. Higher values move the solution towards a rigid transformation. Lower values allow more distortion or warping of the image during registration.
ee.Image.remap	Maps from input values to output values, represented by two parallel lists. Any input values not included in the input list are either set to defaultValue if it is given, or masked if it isn't.  Note that inputs containing floating point values might sometimes fail to match due to  floating point precision errors.	Image.remap(from, to, defaultValue, bandName)	Image	image|from|to|defaultValue|bandName	Image|List|List|Object, default: null|String, default: null	The image to which the remapping is applied.|The source values (numbers or EEArrays). All values in this list will be mapped to the corresponding value in 'to'.|The destination values (numbers or EEArrays). These are used to replace the corresponding values in 'from'. Must have the same number of values as 'from'.|The default value to replace values that weren't matched by a value in 'from'. If not specified, unmatched values are masked out.|The name of the band to remap. If not specified, the first  band in the image is used.
ee.Image.rename	Rename the bands of an image.	Image.rename(var_args)	Image	image|var_args	Image|List	The Image instance.|The new names for the bands. Must match the number of bands in the Image.
ee.Image.reproject	Force an image to be computed in a given projection and resolution.	Image.reproject(crs, crsTransform, scale)	Image	image|crs|crsTransform|scale	Image|Projection|List, default: null|Float, default: null	The Image to reproject.|The CRS to project the image to.|The list of CRS transform values.  This is a row-major ordering of the 3x2 transform matrix.  This option is mutually exclusive with the scale option, and replaces any transform already on the projection.|If scale is specified, then the projection is scaled by dividing the specified scale value by the nominal size of a meter in the specified projection. If scale is not specified, then the scale of the given projection will be used.
ee.Image.resample	An algorithm that returns an image identical to its argument, but which uses bilinear or bicubic interpolation (rather than the default nearest-neighbor) to compute pixels in projections other than its native projection or other levels of the same image pyramid.	Image.resample(mode)	Image	image|mode	"Image|String, default: ""bilinear"""	The Image to resample.|The interpolation mode to use.  One of 'bilinear' or 'bicubic'.)
ee.Image.rgb	Create a 3-band image specifically for visualization. This uses the first band in each image.	ee.Image.rgb(r, g, b)	Image	r|g|b	Image|Image|Image	The red image.|The green image.|The blue image.
ee.Image.rgbToHsv	Transforms the image from the RGB color space to the HSV color space.  Expects a 3 band image in the range [0, 1], and produces three bands: hue, saturation and value with values in the range [0, 1].	Image.rgbToHsv()	Image	image	Image	The image to transform.
ee.Image.rightShift	Calculates the signed right shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.rightShift(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.right_shift	Calculates the signed right shift of v1 by v2 bits for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.right_shift(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.round	Computes the integer nearest to the input.	Image.round()	Image	value	Image	The image to which the operation is applied.
ee.Image.rsedTransform	Computes the 2D maximal height surface created by placing an inverted parabola over each non-zero pixel of the input image, where the pixel's value is the height of the parabola.  Viewed as a binary image (zero/not-zero) this is equivalent to buffering each non-zero input pixel by the square root of its value, in pixels.	Image.rsedTransform(neighborhood, units)	Image	image|neighborhood|units	"Image|Integer, default: 256|String, default: ""pixels"""	The input image.|Neighborhood size in pixels.|The units of the neighborhood, currently only 'pixels' are supported.
ee.Image.sample	Samples the pixels of an image, returning them as a FeatureCollection. Each feature will have 1 property per band in the input image. Note that the default behavior is to drop features that intersect masked pixels, which result in null-valued properties (see dropNulls argument).	Image.sample(region, scale, projection, factor, numPixels, seed, dropNulls, tileScale, geometries)	FeatureCollection	image|region|scale|projection|factor|numPixels|seed|dropNulls|tileScale|geometries	Image|Geometry, default: null|Float, default: null|Projection, default: null|Float, default: null|Long, default: null|Integer, default: 0|Boolean, default: true|Float, default: 1|Boolean, default: false	The image to sample.|The region to sample from. If unspecified, uses the image's whole footprint.|A nominal scale in meters of the projection to sample in.|The projection in which to sample. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale.|A subsampling factor, within (0, 1]. If specified, 'numPixels' must not be specified. Defaults to no subsampling.|The approximate number of pixels to sample. If specified, 'factor' must not be specified.|A randomization seed to use for subsampling.|Post filter the result to drop features that have null-valued properties.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.|If true, adds the center of the sampled pixel as the geometry property of the output feature.  Otherwise, geometries will be omitted (saving memory).
ee.Image.sampleRectangle	Extracts a rectangular region of pixels from an image into a 2D array per band. The arrays are returned in a feature retaining the same properties as the image and a geometry the same as that used to sample the image (or the image footprint if unspecified). Each band is sampled in its input projection, and if no geometry is specified, sampled using it's footprint.	Image.sampleRectangle(region, properties, defaultValue)	Feature	image|region|properties|defaultValue	Image|Geometry, default: null|List, default: null|Float, default: null	The image to sample.|The region whose projected bounding box is used to sample the image. Defaults to the footprint in each band.|The properties to copy over from the sampled image. Defaults to all non-system properties.|A default value used when a sampled pixel is masked or outside a band's footprint.
ee.Image.sampleRegions	Samples the pixels of an image in one or more regions, returning them as a FeatureCollection.  Each output feature will have 1 property per band in the input image, as well as any specified properties copied from the input feature. Note that geometries will be snapped to pixel centers.	Image.sampleRegions(collection, properties, scale, projection, tileScale, geometries)	FeatureCollection	image|collection|properties|scale|projection|tileScale|geometries	Image|FeatureCollection|List, default: null|Float, default: null|Projection, default: null|Float, default: 1|Boolean, default: false	The image to sample.|The regions to sample over.|The list of properties to copy from each input feature.  Defaults to all non-system properties.|A nominal scale in meters of the projection to sample in.  If unspecified,the scale of the image's first band is used.|The projection in which to sample. If unspecified, the projection of the image's first band is used. If specified in addition to scale, rescaled to the specified scale.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.|If true, the results will include a geometry per sampled pixel.  Otherwise, geometries will be omitted (saving memory).
ee.Image.select	Selects bands from an image.	Image.select(var_args)	Image	image|var_args	Image|VarArgs	The Image instance.|One of two possibilities:|  - Any number of non-list arguments. All of these will be interpreted as band selectors. These can be band names, regexes, or numeric indices. E.g. selected = image.select('a', 'b', 3, 'd');|  - Two lists. The first will be used as band selectors and the second as new names for the selected bands. The number of new names must match the number of selected bands. E.g. selected = image.select(['a', 4], ['newA', 'newB']);
ee.Image.selfMask	Updates an image's mask at all positions where the existing mask is not zero using the value of the image as the new mask value. The output image retains the metadata and footprint of the input image.	Image.selfMask()	Image	image	Image	The image to mask with itself.
ee.Image.serialize	Returns the serialized representation of this object.	Image.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Image.set	Overrides one or more metadata properties of an Element.	Image.set(var_args)	Element	element|var_args	Element|VarArgs	The Element instance.|Either a dictionary of properties, or a vararg sequence of properties, e.g. key1, value1, key2, value2, ...
ee.Image.setDefaultProjection	Set a default projection to be applied to this image. The projection's resolution may be overridden by later operations.	Image.setDefaultProjection(crs, crsTransform, scale)	Image	image|crs|crsTransform|scale	Image|Projection|List, default: null|Float, default: null	The Image to reproject.|The CRS to project the image to.|The list of CRS transform values.  This is a row-major ordering of the 3x2 transform matrix.  This option is mutually exclusive with the scale option, and replaces any transform already on the projection.|If scale is specified, then the projection is scaled by dividing the specified scale value by the nominal size of a meter in the specified projection. If scale is not specified, then the scale of the given projection will be used.
ee.Image.setMulti	Overrides one or more metadata properties of an object.	Image.setMulti(properties)	Element	object|properties	Element|Dictionary	The object whose properties to override.|The property values to override.
ee.Image.short	Casts the input value to a signed 16-bit integer.	Image.short()	Image	value	Image	The image to which the operation is applied.
ee.Image.sin	Computes the sine of the input in radians.	Image.sin()	Image	value	Image	The image to which the operation is applied.
ee.Image.sinh	Computes the hyperbolic sine of the input.	Image.sinh()	Image	value	Image	The image to which the operation is applied.
ee.Image.sldStyle	Styles a raster input with the provided OGC SLD styling.	Image.sldStyle(sldXml)	Image	input|sldXml	Image|String	The image to rendering using the SLD.|The OGC SLD 1.0 or 1.1 document (or fragment).
ee.Image.slice	Selects a contiguous group of bands from an image by position.	Image.slice(start, end)	Image	image|start|end	Image|Integer|Integer, default: null	The image from which to select bands.|Where to start the selection.  Negative numbers select from the end, counting backwards.|Where to end the selection.  If omitted, selects all bands from the start position to the end.
ee.Image.spectralDilation	Computes the spectral/spatial dilation of an image by computing the spectral distance of each pixel under a structuring kernel from the centroid of all pixels under the kernel and taking the most distant result. See 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralDilation(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	The input image.|The spectral distance metric to use.  One of  'sam' (spectral angle mapper), 'sid' (spectral information divergence),  'sed' (squared euclidean distance), or 'emd' (earth movers distance).|Connectedness kernel.  Defaults to a square of radius 1 (8-way connected).|If true, distances are computed from the mean of all pixels under the kernel instead of the kernel's center pixel.
ee.Image.spectralDistance	Computes the per-pixel spectral distance between two images.  If the images are array based then only the first band of each image is used; otherwise all bands are involved in the distance computation.  The two images are therefore expected  to contain the same number of bands or have the same 1-dimensional array length.	Image.spectralDistance(image2, metric)	Image	image1|image2|metric	"Image|Image|String, default: ""sam"""	The first image.|The second image.|The spectral distance metric to use.  One of  'sam' (spectral angle mapper), 'sid' (spectral information divergence),  'sed' (squared euclidean distance), or 'emd' (earth movers distance).
ee.Image.spectralErosion	Computes the spectral/spatial erosion of an image by computing the spectral distance of each pixel under a structuring kernel from the centroid of all pixels under the kernel and taking the closest result.  See 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralErosion(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	The input image.|The spectral distance metric to use.  One of  'sam' (spectral angle mapper), 'sid' (spectral information divergence),  'sed' (squared euclidean distance), or 'emd' (earth movers distance).|Connectedness kernel.  Defaults to a square of radius 1 (8-way connected).|If true, distances are computed from the mean of all pixels under the kernel instead of the kernel's center pixel.
ee.Image.spectralGradient	Computes the spectral gradient over all bands of an image (or the first band if the image is Array typed) by computing the per-pixel difference between the spectral erosion and dilation with a given structuring kernel and distance metric. See: Plaza, Antonio, et al. 'Spatial/spectral endmember extraction by multidimensional morphological operations.' IEEE transactions on geoscience and remote sensing 40.9 (2002): 2025-2041.	Image.spectralGradient(metric, kernel, useCentroid)	Image	image|metric|kernel|useCentroid	"Image|String, default: ""sam""|Kernel, default: null|Boolean, default: false"	The input image.|The spectral distance metric to use.  One of  'sam' (spectral angle mapper), 'sid' (spectral information divergence),  'sed' (squared euclidean distance), or 'emd' (earth movers distance).|Connectedness kernel.  Defaults to a square of radius 1 (8-way connected).|If true, distances are computed from the mean of all pixels under the kernel instead of the kernel's center pixel.
ee.Image.sqrt	Computes the square root of the input.	Image.sqrt()	Image	value	Image	The image to which the operation is applied.
ee.Image.stratifiedSample	Extracts a stratified random sample of points from an image.  Extracts the specified number of samples for each distinct value discovered within the 'classBand'.  Returns a FeatureCollection of 1 Feature per extracted point, with each feature having 1 property per band in the input image.  If there are less than the specified number of samples available for a given class value, then all of the points for that class will be included.  Requires that the classBand contain integer values.	Image.stratifiedSample(numPoints, classBand, region, scale, projection, seed, classValues, classPoints, dropNulls, tileScale, geometries)	FeatureCollection	image|numPoints|classBand|region|scale|projection|seed|classValues|classPoints|dropNulls|tileScale|geometries	Image|Integer|String, default: null|Geometry, default: null|Float, default: null|Projection, default: null|Integer, default: 0|List, default: null|List, default: null|Boolean, default: true|Float, default: 1|Boolean, default: false	The image to sample.|The default number of points to sample in each class.  Can be overridden for specific classes using the 'classValues' and 'classPoints' properties.|The name of the band containing the classes to use for stratification. If unspecified, the first band of the input image is used.|The region to sample from. If unspecified, the input image's whole footprint is used.|A nominal scale in meters of the projection to sample in.  Defaults to the scale of the first band of the input image.|The projection in which to sample. If unspecified, the projection of the input image's first band is used. If specified in addition to scale, rescaled to the specified scale.|A randomization seed to use for subsampling.|A list of class values for which to override the numPixels parameter. Must be the same size as classPoints or null.|A list of the per-class maximum number of pixels to sample for each class in  the classValues list.  Must be the same size as classValues or null.|Skip pixels in which any band is masked.|A scaling factor used to reduce aggregation tile size; using a larger tileScale (e.g. 2 or 4) may enable computations that run out of memory with the default.|If true, the results will include a geometry per sampled pixel.  Otherwise, geometries will be omitted (saving memory).
ee.Image.subtract	Subtracts the second value from the first for each matched pair of bands in image1 and image2. If either image1 or image2 has only 1 band, then it is used against all the bands in the other image. If the images have the same number of bands, but not the same names, they're used pairwise in the natural order. The output bands are named for the longer of the two inputs, or if they're equal in length, in image1's order. The type of the output pixels is the union of the input types.	Image.subtract(image2)	Image	image1|image2	Image|Image	The image from which the left operand bands are taken.|The image from which the right operand bands are taken.
ee.Image.tan	Computes the tangent of the input in radians.	Image.tan()	Image	value	Image	The image to which the operation is applied.
ee.Image.tanh	Computes the hyperbolic tangent of the input.	Image.tanh()	Image	value	Image	The image to which the operation is applied.
ee.Image.toArray	Concatenates pixels from each band into a single array per pixel. The result will be masked if any input bands are masked.	Image.toArray(axis)	Image	image|axis	Image|Integer, default: 0	Image of bands to convert to an array per pixel. Bands must have scalar pixels, or array pixels with equal dimensionality.|Axis to concatenate along; must be at least 0 and at most the dimension of the inputs. If the axis equals the dimension of the inputs, the result will have 1 more dimension than the inputs.
ee.Image.toByte	Casts the input value to an unsigned 8-bit integer.	Image.toByte()	Image	value	Image	The image to which the operation is applied.
ee.Image.toDictionary	Extract properties from a feature as a dictionary.	Image.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	The feature to extract the property from.|The list of properties to extract.  Defaults to all non-system properties.
ee.Image.toDouble	Casts the input value to a 64-bit float.	Image.toDouble()	Image	value	Image	The image to which the operation is applied.
ee.Image.toFloat	Casts the input value to a 32-bit float.	Image.toFloat()	Image	value	Image	The image to which the operation is applied.
ee.Image.toInt	Casts the input value to a signed 32-bit integer.	Image.toInt()	Image	value	Image	The image to which the operation is applied.
ee.Image.toInt16	Casts the input value to a signed 16-bit integer.	Image.toInt16()	Image	value	Image	The image to which the operation is applied.
ee.Image.toInt32	Casts the input value to a signed 32-bit integer.	Image.toInt32()	Image	value	Image	The image to which the operation is applied.
ee.Image.toInt64	Casts the input value to a signed 64-bit integer.	Image.toInt64()	Image	value	Image	The image to which the operation is applied.
ee.Image.toInt8	Casts the input value to a signed 8-bit integer.	Image.toInt8()	Image	value	Image	The image to which the operation is applied.
ee.Image.toLong	Casts the input value to a signed 64-bit integer.	Image.toLong()	Image	value	Image	The image to which the operation is applied.
ee.Image.toShort	Casts the input value to a signed 16-bit integer.	Image.toShort()	Image	value	Image	The image to which the operation is applied.
ee.Image.toUint16	Casts the input value to an unsigned 16-bit integer.	Image.toUint16()	Image	value	Image	The image to which the operation is applied.
ee.Image.toUint32	Casts the input value to an unsigned 32-bit integer.	Image.toUint32()	Image	value	Image	The image to which the operation is applied.
ee.Image.toUint8	Casts the input value to an unsigned 8-bit integer.	Image.toUint8()	Image	value	Image	The image to which the operation is applied.
ee.Image.translate	Translate the input image.	Image.translate(x, y, units, proj)	Image	input|x|y|units|proj	"Image|Float|Float|String, default: ""meters""|Projection, default: null"	"|||The units for x and y; ""meters"" or ""pixels"".|The projection in which to translate the image; defaults to the projection of the first band."
ee.Image.trigamma	Computes the trigamma function of the input.	Image.trigamma()	Image	value	Image	The image to which the operation is applied.
ee.Image.uint16	Casts the input value to an unsigned 16-bit integer.	Image.uint16()	Image	value	Image	The image to which the operation is applied.
ee.Image.uint32	Casts the input value to an unsigned 32-bit integer.	Image.uint32()	Image	value	Image	The image to which the operation is applied.
ee.Image.uint8	Casts the input value to an unsigned 8-bit integer.	Image.uint8()	Image	value	Image	The image to which the operation is applied.
ee.Image.unitScale	Scales the input so that the range of input values [low, high] becomes [0, 1]. Values outside the range are NOT clamped. This algorithm always produces floating point pixels.	Image.unitScale(low, high)	Image	input|low|high	Image|Float|Float	The image to scale.|The value mapped to 0.|The value mapped to 1.
ee.Image.unmask	Replaces mask and value of the input image with the mask and value of another image at all positions where the input mask is zero. The output image retains the metadata of the input image. By default, the output image also retains the footprint of the input, but setting sameFootprint to false allows to extend the footprint.	Image.unmask(value, sameFootprint)	Image	input|value|sameFootprint	Image|Image, default: null|Boolean, default: true	Input image.|New value and mask for the masked pixels of the input image. If not specified, defaults to constant zero image which is valid everywhere.|If true (or unspecified), the output retains the footprint of the input image. If false, the footprint of the output is the union of the input footprint with the footprint of the value image.
ee.Image.unmix	Unmix each pixel with the given endmembers, by computing the pseudo-inverse and multiplying it through each pixel.  Returns an image of doubles with the same number of bands as endmembers.	Image.unmix(endmembers, sumToOne, nonNegative)	Image	image|endmembers|sumToOne|nonNegative	Image|List|Boolean, default: false|Boolean, default: false	The input image.|The endmembers to unmix with.|Constrain the outputs to sum to one.|Constrain the outputs to be non-negative.
ee.Image.updateMask	Updates an image's mask at all positions where the existing mask is not zero. The output image retains the metadata and footprint of the input image.	Image.updateMask(mask)	Image	image|mask	Image|Image	Input image.|New mask for the image, as a floating-point value in the range [0, 1] (invalid = 0, valid = 1). If this image has a single band, it is used for all bands in the input image; otherwise, must have the same number of bands as the input image.
ee.Image.visualize	Produces an RGB or grayscale visualization of an image.  Each of the gain, bias, min, max and gamma arguments can take either a single value, which will be applied to all bands, or a list of values the same length as bands.	Image.visualize(bands, gain, bias, min, max, gamma, opacity, palette, forceRgbOutput)	Image	image|bands|gain|bias|min|max|gamma|opacity|palette|forceRgbOutput	Image|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Object, default: null|Number, default: null|Object, default: null|Boolean, default: false	The image to visualize.|A list of the bands to visualize.  If empty, the first 3 are used.|The visualization gain(s) to use.|The visualization bias(es) to use.|The value(s) to map to RGB8 value 0.|The value(s) to map to RGB8 value 255.|The gamma correction factor(s) to use.|The opacity scaling factor to use.|The color palette to use. List of CSS color identifiers or hexadecimal color strings (e.g. ['red', '00FF00', 'bluevlolet']).|Whether to produce RGB output even for single-band inputs.
ee.Image.where	Performs conditional replacement of values.	Image.where(test, value)	Image	input|test|value	Image|Image|Image	The input image.|The test image. The pixels of this image determines which of the input pixels is returned. If this is a single band, it is used for all bands in the input image. This may not be an array image.|The output value to use where test is not zero. If this is a single band, it is used for all bands in the input image.
ee.Image.zeroCrossing	Finds zero-crossings on each band of an image.	Image.zeroCrossing()	Image	image	Image	The image from which to compute zero crossings.
ee.ImageCollection	ImageCollections can be constructed from the following arguments:	ee.ImageCollection(args)	ImageCollection	args	ComputedObject|Image|List	The constructor arguments.
ee.ImageCollection.aggregate_array	Aggregates over a given property of the objects in a collection, calculating a list of all the values of the selected property.	ImageCollection.aggregate_array(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_count	Aggregates over a given property of the objects in a collection, calculating the number of non-null values of the property.	ImageCollection.aggregate_count(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_count_distinct	Aggregates over a given property of the objects in a collection, calculating the number of distinct values for the selected property.	ImageCollection.aggregate_count_distinct(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_first	Aggregates over a given property of the objects in a collection, calculating the property value of the first object in the collection.	ImageCollection.aggregate_first(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_histogram	Aggregates over a given property of the objects in a collection, calculating a histogram of the selected property.	ImageCollection.aggregate_histogram(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_max	Aggregates over a given property of the objects in a collection, calculating the maximum of the values of the selected property.	ImageCollection.aggregate_max(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_mean	Aggregates over a given property of the objects in a collection, calculating the mean of the selected property.	ImageCollection.aggregate_mean(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_min	Aggregates over a given property of the objects in a collection, calculating the minimum of the values of the selected property.	ImageCollection.aggregate_min(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_product	Aggregates over a given property of the objects in a collection, calculating the product of the values of the selected property.	ImageCollection.aggregate_product(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_sample_sd	Aggregates over a given property of the objects in a collection, calculating the sample std. deviation of the values of the selected property.	ImageCollection.aggregate_sample_sd(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_sample_var	Aggregates over a given property of the objects in a collection, calculating the sample variance of the values of the selected property.	ImageCollection.aggregate_sample_var(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_stats	Aggregates over a given property of the objects in a collection, calculating the sum, min, max, mean, sample standard deviation, sample variance, total standard deviation and total variance of the selected property.	ImageCollection.aggregate_stats(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_sum	Aggregates over a given property of the objects in a collection, calculating the sum of the values of the selected property.	ImageCollection.aggregate_sum(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_total_sd	Aggregates over a given property of the objects in a collection, calculating the total std. deviation of the values of the selected property.	ImageCollection.aggregate_total_sd(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.aggregate_total_var	Aggregates over a given property of the objects in a collection, calculating the total variance of the values of the selected property.	ImageCollection.aggregate_total_var(property)	Object	collection|property	FeatureCollection|String	The collection to aggregate over.|The property to use from each element of the collection.
ee.ImageCollection.and	Reduces an image collection by setting each pixel to 1 iff all the non-masked values at that pixel are non-zero across the stack of all matching bands. Bands are matched by name.	ImageCollection.and()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	ImageCollection.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.ImageCollection.cast	Casts some or all bands of each image in an ImageCollection to the specified types.	ImageCollection.cast(bandTypes, bandOrder)	ImageCollection	collection|bandTypes|bandOrder	ImageCollection|Dictionary|List	The image collection to cast.|A dictionary from band name to band types. Types can be PixelTypes or strings. The valid strings are: 'int8', 'int16', 'int32', 'int64', 'uint8', 'uint16', 'uint32', 'byte', 'short', 'int', 'long', 'float' and 'double'. Must include all bands already in any image in the collection. If this includes bands that are not already in an input image, they will be added to the image as transparent bands.|A list specifying the order of the bands in the result.Must match the keys of bandTypes.
ee.ImageCollection.combine	Makes a new collection that is a copy of the images in primary, adding all the bands from the image in secondary with a matching ID. If there's no matching image, the primary image is just copied. This is equivalent to a join on ID with merging of the bands of the result.	ImageCollection.combine(secondary, overwrite)	ImageCollection	primary|secondary|overwrite	ImageCollection|ImageCollection|Boolean, default: false	The primary collection to join.|The secondary collection to join.|If true, bands with the same name will get overwritten. If false, bands with the same name will be renamed.
ee.ImageCollection.copyProperties	Copies metadata properties from one element to another.	ImageCollection.copyProperties(source, properties, exclude)	Element	destination|source|properties|exclude	Element, default: null|Element, default: null|List, default: null|List, default: null	The object whose properties to override.|The object from which to copy the properties.|The properties to copy.  If omitted, all ordinary (i.e. non-system) properties are copied.|The list of properties to exclude when copying all properties. Must not be specified if properties is.
ee.ImageCollection.count	Reduces an image collection by calculating the number of images with a valid mask at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.count()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.distance	Produces a DOUBLE image where each pixel is the distance in meters from the pixel center to the nearest Point, LineString, or polygonal boundary in the collection. Note distance is also measured within interiors of polygons. Pixels that are not within 'searchRadius' meters of a geometry will be masked out.	ImageCollection.distance(searchRadius, maxError)	Image	features|searchRadius|maxError	FeatureCollection|Float, default: 100000|Float, default: 100	Feature collection from which to get features used to compute pixel distances.|Maximum distance in meters from each pixel to look for edges. Pixels will be masked unless there are edges within this distance.|Maximum reprojection error in meters, only used if the input polylines require reprojection. If '0' is provided, then this operation will fail if projection is required.
ee.ImageCollection.distinct	Removes duplicates from a collection. Note that duplicates are determined using a strong hash over the serialized form of the selected properties.	ImageCollection.distinct(properties)	FeatureCollection	collection|properties	FeatureCollection|Object	The input collection from which objects will be selected.|A property name or a list of property names to use for comparison. The '.geo' property can be included to compare object geometries.
ee.ImageCollection.draw	Paints a vector collection for visualization. Not intended for use as input to other algorithms.	ImageCollection.draw(color, pointRadius, strokeWidth)	Image	collection|color|pointRadius|strokeWidth	FeatureCollection|String|Integer, default: 3|Integer, default: 2	The collection to draw.|A hex string in the format RRGGBB specifying the color to use for drawing the features.|The radius in pixels of the point markers.|The width in pixels of lines and polygon borders.
ee.ImageCollection.errorMatrix	Computes a 2D error matrix for a collection by comparing two columns of a collection: one containing the actual values, and one containing predicted values.The values are expected to be small contiguous integers, starting from 0. Axis 0 (the rows) of the matrix correspond to the actual values, and Axis 1 (the columns) to the predicted values.	ImageCollection.errorMatrix(actual, predicted, order)	ConfusionMatrix	collection|actual|predicted|order	FeatureCollection|String|String|List, default: null	The input collection.|The name of the property containing the actual value.|The name of the property containing the predicted value.|A list of the expected values.  If this argument is not specified, the values are assumed to be contiguous and span the range 0 to maxValue. If specified, only values matching this list are used, and the matrix will have dimensions and order matching the this list.
ee.ImageCollection.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	ImageCollection.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.ImageCollection.filter	Apply a filter to this collection.	ImageCollection.filter(filter)	Collection	collection|filter	Collection|Filter	The Collection instance.|A filter to apply to this collection.
ee.ImageCollection.filterBounds	Shortcut to filter a collection by intersection with geometry.  Items in the collection with a footprint that fails to intersect the given geometry will be excluded.	ImageCollection.filterBounds(geometry)	Collection	collection|geometry	Collection|Feature|Geometry	The Collection instance.|The geometry to filter to.
ee.ImageCollection.filterDate	Shortcut to filter a collection by a date range. The start and end may be Dates, numbers (interpreted as milliseconds since 1970-01-01T00:00:00Z), or strings (such as '1996-01-01T08:00'). Based on 'system:time_start'.	ImageCollection.filterDate(start, end)	Collection	collection|start|end	Collection|Date|Number|String|Date|Number|String, optional	The Collection instance.|The start date (inclusive).|The end date (exclusive). Optional. If not specified, a 1-millisecond range starting at 'start' is created.
ee.ImageCollection.filterMetadata	Shortcuts to filter a collection by metadata.  This is equivalent to this.filter(ee.Filter.metadata(...)).	ImageCollection.filterMetadata(name, operator, value)	Collection	collection|name|operator|value	Collection|String|String|Object	"The Collection instance.|The name of a property to filter.|The name of a comparison operator. Possible values are: ""equals"", ""less_than"", ""greater_than"",|""not_equals"", ""not_less_than"", ""not_greater_than"", ""starts_with"",|""ends_with"", ""not_starts_with"", ""not_ends_with"", ""contains"",|""not_contains"".|  - The value to compare against."
ee.ImageCollection.first	Returns the first entry from a given collection.	ImageCollection.first()	Image	imagecollection	ImageCollection	The ImageCollection instance.
ee.ImageCollection.flatten	Flattens collections of collections.	ImageCollection.flatten()	FeatureCollection	collection	FeatureCollection	The input collection of collections.
ee.ImageCollection.formaTrend	Computes the long and short term trends of a time series or optionally, the trends of the ratio of the time series and a covariate.  The long term trend is estimated from the linear term of a regression on the full time series.  The short term trend is computed as the windowed minimum over the time series.	ImageCollection.formaTrend(covariates, windowSize)	Image	timeSeries|covariates|windowSize	ImageCollection|ImageCollection, default: null|Integer, default: 6	Collection from which to extract trends.|Cofactors to use in the trend analysis.|Short term trend analysis window size, in images.
ee.ImageCollection.fromImages	Returns the image collection containing the given images.	ee.ImageCollection.fromImages(images)	ImageCollection	images	List	The images to include in the collection.
ee.ImageCollection.geometry	Extracts and merges the geometries of a collection. Requires that all the geometries in the collection share the projection and edge interpretation.	ImageCollection.geometry(maxError)	Geometry	collection|maxError	FeatureCollection|ErrorMargin, optional	The collection whose geometries will be extracted.|An error margin to use when merging geometries.
ee.ImageCollection.get	Extract a property from a feature.	ImageCollection.get(property)		object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.ImageCollection.getArray	Extract a property from a feature.	ImageCollection.getArray(property)	Array	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.ImageCollection.getFilmstripThumbURL	Get the URL of a tiled thumbnail for this ImageCollection.	ImageCollection.getFilmstripThumbURL(params, callback)	Object|String	imagecollection|params|callback	ImageCollection|Object|Function, optional	The ImageCollection instance.|Parameters identical to ee.data.getMapId, plus, optionally:|  - dimensions (a number or pair of numbers in format WIDTHxHEIGHT) Maximum dimensions of each thumbnail frame to render, in pixels. If only one number is passed, it is used as the maximum, and the other dimension is computed by proportional scaling.|  - region (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.|  - format (string) Encoding format. Only 'png' or 'jpg' are accepted.|An optional callback which handles the resulting URL string. If not supplied, the call is made synchronously.
ee.ImageCollection.getInfo	An imperative function that returns all the known information about this collection via an AJAX call.	ImageCollection.getInfo(callback)	ImageCollectionDescription	imagecollection|callback	ImageCollection|Function, optional	The ImageCollection instance.|An optional callback. If not supplied, the call is made synchronously. If supplied, will be called with the first parameter if successful and the second if unsuccessful.
ee.ImageCollection.getMap	An imperative function that returns a mapid via a synchronous AJAX call.	ImageCollection.getMap(visParams, callback)	MapId|Object	imagecollection|visParams|callback	ImageCollection|Object, optional|Function, optional	The ImageCollection instance.|The visualization parameters.|An async callback. If not supplied, the call is made synchronously.
ee.ImageCollection.getNumber	Extract a property from a feature.	ImageCollection.getNumber(property)	Number	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.ImageCollection.getRegion	Output an array of values for each [pixel, band, image] tuple in an ImageCollection.  The output contains rows of id, lon, lat, time, and all bands for each image that intersects each pixel in the given region.	ImageCollection.getRegion(geometry, scale, crs, crsTransform)	List	collection|geometry|scale|crs|crsTransform	ImageCollection|Geometry|Float, default: null|Projection, optional|List, default: null	The image collection to extract data from.|The region over which to extract data.|A nominal scale in meters of the projection to work in.|The projection to work in. If unspecified, defaults to EPSG:4326. If specified in addition to scale, the projection is rescaled to the specified scale.|The array of CRS transform values.  This is a row-major ordering of a 3x2 affine transform.  This option is mutually exclusive with the scale option, and will replace any transform already set on the given projection.
ee.ImageCollection.getString	Extract a property from a feature.	ImageCollection.getString(property)	String	object|property	Element|String	The feature to extract the property from.|The property to extract.
ee.ImageCollection.getVideoThumbURL	Get the URL of an animated thumbnail for this ImageCollection.	ImageCollection.getVideoThumbURL(params, callback)	Object|String	imagecollection|params|callback	ImageCollection|Object|Function, optional	The ImageCollection instance.|Parameters identical to ee.data.getMapId, plus, optionally:|  - dimensions (a number or pair of numbers in format WIDTHxHEIGHT) Maximum dimensions of the thumbnail to render, in pixels. If only one number is passed, it is used as the maximum, and the other dimension is computed by proportional scaling.|  - region (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.|  - format (string) Encoding format. Only 'gif' is accepted.|  - framesPerSecond (number) Animation speed.|An optional callback which handles the resulting URL string. If not supplied, the call is made synchronously.
ee.ImageCollection.iterate	Applies a user-supplied function to each element of a collection. The user-supplied function is given two arguments: the current element, and the value returned by the previous call to iterate() or the first argument, for the first iteration. The result is the value returned by the final call to the user-supplied function.	ImageCollection.iterate(algorithm, first)	ComputedObject	collection|algorithm|first	Collection|Function|Object, optional	The Collection instance.|The function to apply to each element. Must take two arguments: an element of the collection and the value from the previous iteration.|The initial state.
ee.ImageCollection.limit	Limit a collection to the specified number of elements, optionally sorting them by a specified property first.	ImageCollection.limit(max, property, ascending)	Collection	collection|max|property|ascending	Collection|Number|String, optional|Boolean, optional	The Collection instance.|The number to limit the collection to.|The property to sort by, if sorting.|Whether to sort in ascending or descending order.  The default is true (ascending).
ee.ImageCollection.load	Returns the image collection given its ID.	ee.ImageCollection.load(id, version)	ImageCollection	id|version	String|Long, default: null	The asset ID of the image collection.|The version of the asset. -1 signifies the latest version.
ee.ImageCollection.map	Maps an algorithm over a collection.	ImageCollection.map(algorithm, dropNulls)	Collection	collection|algorithm|dropNulls	Collection|Function|Boolean, optional	The Collection instance.|The operation to map over the images or features of the collection. A JavaScript function that receives an image or features and returns one. The function is called only once and the result is captured as a description, so it cannot perform imperative operations or rely on external state.|If true, the mapped algorithm is allowed to return nulls, and the elements for which it returns nulls will be dropped.
ee.ImageCollection.max	Reduces an image collection by calculating the maximum value of each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.max()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.mean	Reduces an image collection by calculating the mean of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.mean()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.median	Reduces an image collection by calculating the median of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.median()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.merge	Merges two image collections into one. The result has all the images that were in either collection.	ImageCollection.merge(collection2)	ImageCollection	collection1|collection2	ImageCollection|ImageCollection	The first collection to merge.|The second collection to merge.
ee.ImageCollection.min	Reduces an image collection by calculating the minimum value of each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.min()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.mode	Reduces an image collection by calculating the most common value at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.mode()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.mosaic	Composites all the images in a collection, using the mask.	ImageCollection.mosaic()	Image	collection	ImageCollection	The collection to mosaic.
ee.ImageCollection.or	Reduces an image collection by setting each pixel to 1 iff any of the non-masked values at that pixel are non-zero across the stack of all matching bands. Bands are matched by name.	ImageCollection.or()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.product	Reduces an image collection by calculating the product of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.product()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.propertyNames	Returns the names of properties on this element.	ImageCollection.propertyNames()	List	element	Element
ee.ImageCollection.qualityMosaic	Composites all the images in a collection, using a quality band as a per-pixel ordering function.	ImageCollection.qualityMosaic(qualityBand)	Image	collection|qualityBand	ImageCollection|String	The collection to mosaic.|The name of the quality band in the collection.
ee.ImageCollection.randomColumn	Adds a column of deterministic pseudorandom numbers to a collection.  The numbers are double-precision floating point numbers in the range 0.0 (inclusive) to 1.0 (exclusive).	ImageCollection.randomColumn(columnName, seed)	FeatureCollection	collection|columnName|seed	"FeatureCollection|String, default: ""random""|Long, default: 0"	The input collection to which to add a random column.|The name of the column to add.|A seed used when generating the random numbers.
ee.ImageCollection.reduce	Applies a reducer across all of the images in a collection.	ImageCollection.reduce(reducer, parallelScale)	Image	collection|reducer|parallelScale	ImageCollection|Reducer|Float, default: 1	The image collection to reduce.|The reducer to apply to the given collection.|A scaling factor used to limit memory use; using a larger parallelScale (e.g. 2 or 4) may enable computations that run out of memory with the default.
ee.ImageCollection.reduceColumns	Apply a reducer to each element of a collection, using the given selectors to determine the inputs.	ImageCollection.reduceColumns(reducer, selectors, weightSelectors)	Dictionary	collection|reducer|selectors|weightSelectors	FeatureCollection|Reducer|List|List, default: null	The collection to aggregate over.|The reducer to apply.|A selector for each input of the reducer.|A selector for each weighted input of the reducer.
ee.ImageCollection.reduceToImage	Creates an image from a feature collection by applying a reducer over the selected properties of all the features that intersect each pixel.	ImageCollection.reduceToImage(properties, reducer)	Image	collection|properties|reducer	FeatureCollection|List|Reducer	Feature collection to intersect with each output pixel.|Properties to select from each feature and pass into the reducer.|A Reducer to combine the properties of each intersecting feature into a final result to store in the pixel.
ee.ImageCollection.remap	Remaps the value of a specific property in a collection. Takes two parallel lists and maps values found in one to values in the other. Any element with a value that is not specified in the first list is dropped from the output collection.	ImageCollection.remap(lookupIn, lookupOut, columnName)	FeatureCollection	collection|lookupIn|lookupOut|columnName	FeatureCollection|List|List|String	The collection to be modified.|The input mapping values. Restricted to strings and integers.|The output mapping values. Must be the same size as lookupIn.|The name of the property to remap.
ee.ImageCollection.select	Select bands from each image in a collection.	ImageCollection.select(selectors, names)	ImageCollection	imagecollection|selectors|names	ImageCollection|List|List, optional	The ImageCollection instance.|A list of names, regexes or numeric indices specifying the bands to select.|A list of new names for the output bands. Must match the number of bands selected.
ee.ImageCollection.serialize	Returns the serialized representation of this object.	ImageCollection.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.ImageCollection.set	Overrides one or more metadata properties of an Element.	ImageCollection.set(var_args)	Element	element|var_args	Element|VarArgs	The Element instance.|Either a dictionary of properties, or a vararg sequence of properties, e.g. key1, value1, key2, value2, ...
ee.ImageCollection.setMulti	Overrides one or more metadata properties of an object.	ImageCollection.setMulti(properties)	Element	object|properties	Element|Dictionary	The object whose properties to override.|The property values to override.
ee.ImageCollection.size	Returns the number of elements in the collection.	ImageCollection.size()	Integer	collection	FeatureCollection	The collection to count.
ee.ImageCollection.sort	Sort a collection by the specified property.	ImageCollection.sort(property, ascending)	Collection	collection|property|ascending	Collection|String|Boolean, optional	The Collection instance.|The property to sort by.|Whether to sort in ascending or descending order.  The default is true (ascending).
ee.ImageCollection.style	Draw a vector collection for visualization using a simple style language.	ImageCollection.style(color, pointSize, pointShape, width, fillColor, styleProperty, neighborhood, lineType)	Image	collection|color|pointSize|pointShape|width|fillColor|styleProperty|neighborhood|lineType	"FeatureCollection|String, default: ""black""|Integer, default: 3|String, default: ""circle""|Float, default: 2|String, default: null|String, default: null|Integer, default: 5|String, default: ""solid"""	The collection to draw.|A default color (CSS 3.0 color value e.g. 'FF0000' or 'red') to use for drawing the features.  Supports opacity (e.g.: 'FF000088' for 50% transparent red).|The default size in pixels of the point markers.|The default shape of the marker to draw at each point location.  One of: circle, square, diamond, cross, plus, pentagram, hexagram, triangle, triangle_up triangle_down, triangle_left, triangle_right, pentagon, hexagon, star5, star6. This argument also supports the following Matlab marker abbreviations: o, s, d, x, +, p, h, ^, v, <, >.|The default line width for lines and outlines for polygons and point shapes.|The color for filling polygons and point shapes.  Defaults to 'color' at 0.66 opacity.|A per-feature property expected to contain a dictionary. Values in the dictionary override any default values for that feature.|If styleProperty is used and any feature has a pointSize or width larger than the defaults, tiling artifacts can occur. Specifies the maximum neighborhood (pointSize + width) needed for any feature.|The default line style for lines and outlines of polygons and point shapes. Defaults to 'solid'. One of: solid, dotted, dashed.
ee.ImageCollection.sum	Reduces an image collection by calculating the sum of all values at each pixel across the stack of all matching bands. Bands are matched by name.	ImageCollection.sum()	Image	collection	ImageCollection	The image collection to reduce.
ee.ImageCollection.toArray	Converts an image collection into an image of 2D arrays.  At each pixel, the images that have valid (unmasked) values in all bands are laid out along the first axis of the array in the order they appear in the image collection.  The bands of each image are laid out along the second axis of the array, in the order the bands appear in that image.  The array element type will be the union of the types of each band.	ImageCollection.toArray()	Image	collection	ImageCollection	Image collection to convert to an array image. Bands must have scalar values, not array values.
ee.ImageCollection.toArrayPerBand	Concatenates multiple images into a single array image. The result will be masked if any input is masked.	ImageCollection.toArrayPerBand(axis)	Image	collection|axis	ImageCollection|Integer, default: 0	Images to concatenate. A separate concatenation is done per band, so all the images must have the same dimensionality and shape per band, except length along the concatenation axis.|Axis to concatenate along; must be at least 0 and at most the minimum dimension of any band in the collection.
ee.ImageCollection.toBands	Converts a collection to a single multi-band image containing all of the bands of every image in the collection.  Output bands are named by prefixing the existing band names with the image id from which it came (e.g.: 'image1_band1')	ImageCollection.toBands()	Image	collection	ImageCollection	The input collection.
ee.ImageCollection.toDictionary	Extract properties from a feature as a dictionary.	ImageCollection.toDictionary(properties)	Dictionary	element|properties	Element|List, default: null	The feature to extract the property from.|The list of properties to extract.  Defaults to all non-system properties.
ee.ImageCollection.toList	Returns the elements of a collection as a list.	ImageCollection.toList(count, offset)	List	collection|count|offset	FeatureCollection|Integer|Integer, default: 0	The input collection to fetch.|The maximum number of elements to fetch.|The number of elements to discard from the start. If set, (offset + count) elements will be fetched and the first offset elements will be discarded.
ee.ImageCollection.union	Merges all geometries in a given collection into one and returns a collection containing a single feature with only an ID of 'union_result' and a geometry.	ImageCollection.union(maxError)	FeatureCollection	collection|maxError	FeatureCollection|ErrorMargin, default: null	The collection being merged.|The maximum error allowed when performing any necessary reprojections. If not specified, defaults to the error margin requested from the output.
ee.Join.apply	Joins two collections.	Join.apply(primary, secondary, condition)	FeatureCollection	join|primary|secondary|condition	Join|FeatureCollection|FeatureCollection|Filter	The join to apply; determines how the the results are constructed.|The primary collection.|The secondary collection.|The join condition used to select the matches from the two collections.
ee.Join.inner	Returns a join that pairs elements from the primary collection with matching elements from the secondary collection. Each result has a 'primary' property that contains the element from the primary collection, and a 'secondary' property containing the matching element from the secondary collection. If measureKey is specified, the join measure is also attached to the object as a property.	ee.Join.inner(primaryKey, secondaryKey, measureKey)	Join	primaryKey|secondaryKey|measureKey	"String, default: ""primary""|String, default: ""secondary""|String, default: null"	The property name used to save the primary match.|The property name used to save the secondary match.|An optional property name used to save the measure of the join condition.
ee.Join.inverted	Returns a join that produces the elements of the primary collection that match no elements of the secondary collection. No properties are added to the results.	ee.Join.inverted()	Join
ee.Join.saveAll	Returns a join that pairs each element from the first collection with a group of matching elements from the second collection. The list of matches is added to each result as an additional property. If measureKey is specified, each match has the value of its join measure attached. Join measures are produced when withinDistance or maxDifference filters are used as the join condition.	ee.Join.saveAll(matchesKey, ordering, ascending, measureKey, outer)	Join	matchesKey|ordering|ascending|measureKey|outer	String|String, default: null|Boolean, default: true|String, default: null|Boolean, default: false	The property name used to save the matches list.|The property on which to sort the matches list.|Whether the ordering is ascending.|An optional property name used to save the measure of the join condition on each match.|If true, primary rows without matches will be included in the result.
ee.Join.saveBest	Returns a join that pairs each element from the first collection with a matching element from the second collection. The match with the best join measure is added to each result as an additional property. Join measures are produced when withinDistance or maxDifference filters are used as the join condition.	ee.Join.saveBest(matchKey, measureKey, outer)	Join	matchKey|measureKey|outer	String|String|Boolean, default: false	The key used to save the match.|The key used to save the measure of the join condition on the match.|If true, primary rows without matches will be included in the result.
ee.Join.saveFirst	Returns a join that pairs each element from the first collection with a matching element from the second collection. The first match is added to the result as an additional property.	ee.Join.saveFirst(matchKey, ordering, ascending, measureKey, outer)	Join	matchKey|ordering|ascending|measureKey|outer	String|String, default: null|Boolean, default: true|String, default: null|Boolean, default: false	The property name used to save the match.|The property on which to sort the matches before selecting the first.|Whether the ordering is ascending.|An optional property name used to save the measure of the join condition on the match.|If true, primary rows without matches will be included in the result.
ee.Join.simple	Returns a join that produces the elements of the primary collection that match any element of the secondary collection. No properties are added to the results.	ee.Join.simple()	Join
ee.Kernel.add	Adds two kernels (pointwise), after aligning their centers.	Kernel.add(kernel2, normalize)	Kernel	kernel1|kernel2|normalize	Kernel|Kernel|Boolean, default: false	The first kernel.|The second kernel.|Normalize the kernel.
ee.Kernel.chebyshev	Generates a distance kernel based on Chebyshev distance (greatest distance along any dimension).	ee.Kernel.chebyshev(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.circle	Generates a circle-shaped boolean kernel.	ee.Kernel.circle(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.compass	Generates a 3x3 Prewitt's Compass edge-detection kernel.	ee.Kernel.compass(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.cross	Generates a cross-shaped boolean kernel.	ee.Kernel.cross(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.diamond	Generates a diamond-shaped boolean kernel.	ee.Kernel.diamond(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.euclidean	Generates a distance kernel based on Euclidean (straight-line) distance.	ee.Kernel.euclidean(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.fixed	Creates a Kernel.	ee.Kernel.fixed(width, height, weights, x, y, normalize)	Kernel	width|height|weights|x|y|normalize	Integer, default: -1|Integer, default: -1|List|Integer, default: -1|Integer, default: -1|Boolean, default: false	The width of the kernel in pixels.|The height of the kernel in pixels.|The pixel values of the kernel.|The location of the focus, as an offset from the left.|The location of the focus, as an offset from the top.|Normalize the kernel values to sum to 1.
ee.Kernel.gaussian	Generates a Gaussian kernel from a sampled continuous Gaussian.	ee.Kernel.gaussian(radius, sigma, units, normalize, magnitude)	Kernel	radius|sigma|units|normalize|magnitude	"Float|Float, default: 1|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|Standard deviation of the Gaussian function (same units as radius).|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.inverse	Returns a kernel which has each of its weights multiplicatively inverted. Weights with a value of zero are not inverted and remain zero.	Kernel.inverse()	Kernel	kernel	Kernel	The kernel to have its entries inverted.
ee.Kernel.kirsch	Generates a 3x3 Kirsch's Compass edge-detection kernel.	ee.Kernel.kirsch(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.laplacian4	Generates a 3x3 Laplacian-4 edge-detection kernel.	ee.Kernel.laplacian4(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.laplacian8	Generates a 3x3 Laplacian-8 edge-detection kernel.	ee.Kernel.laplacian8(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.manhattan	Generates a distance kernel based on rectilinear (city-block) distance.	ee.Kernel.manhattan(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: false|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.octagon	Generates an octagon-shaped boolean kernel.	ee.Kernel.octagon(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.plus	Generates a plus-shaped boolean kernel.	ee.Kernel.plus(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.Kernel.prewitt	Generates a 3x3 Prewitt edge-detection kernel.	ee.Kernel.prewitt(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.rectangle	Generates a rectangular-shaped kernel.	ee.Kernel.rectangle(xRadius, yRadius, units, normalize, magnitude)	Kernel	xRadius|yRadius|units|normalize|magnitude	"Float|Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	"The horizontal radius of the kernel to generate.|The vertical radius of the kernel to generate.|The system of measurement for the kernel (""pixels"" or ""meters""). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount."
ee.Kernel.roberts	Generates a 2x2 Roberts edge-detection kernel.	ee.Kernel.roberts(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.rotate	Creates a Kernel.	Kernel.rotate(rotations)	Kernel	kernel|rotations	Kernel|Integer	The kernel to be rotated.|Number of 90 deg. rotations to make (negative numbers rotate counterclockwise).
ee.Kernel.sobel	Generates a 3x3 Sobel edge-detection kernel.	ee.Kernel.sobel(magnitude, normalize)	Kernel	magnitude|normalize	Float, default: 1|Boolean, default: false	Scale each value by this amount.|Normalize the kernel values to sum to 1.
ee.Kernel.square	Generates a square-shaped boolean kernel.	ee.Kernel.square(radius, units, normalize, magnitude)	Kernel	radius|units|normalize|magnitude	"Float|String, default: ""pixels""|Boolean, default: true|Float, default: 1"	The radius of the kernel to generate.|The system of measurement for the kernel ('pixels' or 'meters'). If the kernel is specified in meters, it will resize when the zoom-level is changed.|Normalize the kernel values to sum to 1.|Scale each value by this amount.
ee.List	Constructs a new list.	ee.List(list)	List	list	List	A list or a computed object.
ee.List.add	Appends the element to the end of list.	List.add(element)	List	list|element	List|Object	|
ee.List.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	List.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.List.cat	Concatenates the contents of other onto list.	List.cat(other)	List	list|other	List|List	|
ee.List.contains	Returns true if list contains element.	List.contains(element)	Boolean	list|element	List|Object	|
ee.List.containsAll	Returns true if list contains all of the elements of other, regardless of order.	List.containsAll(other)	Boolean	list|other	List|List	|
ee.List.distinct	Returns a copy of list without duplicate elements.	List.distinct()	List	list	List
ee.List.equals	Returns true if list contains the same elements as other, in the same order.	List.equals(other)	Boolean	list|other	List|List	|
ee.List.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	List.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.List.filter	Filters a list to only the elements that match the given filter. To filter list items that aren't images or features, test a property named'item', e.g.: ee.Filter.gt('item', 3)	List.filter(filter)	List	list|filter	List|Filter	|
ee.List.flatten	Flattens any sublists into a single list.	List.flatten()	List	list	List
ee.List.frequency	Returns the number of elements in list equal to element.	List.frequency(element)	Integer	list|element	List|Object	|
ee.List.get	Returns the element at the specified position in list.  A negative index counts backwards from the end of the list.	List.get(index)	Object	list|index	List|Integer	|
ee.List.getArray	Returns the array at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a array, an error will occur.	List.getArray(index)	Array	list|index	List|Integer	|
ee.List.getGeometry	Returns the geometry at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a geometry, an error will occur.	List.getGeometry(index)	Geometry	list|index	List|Integer	|
ee.List.getInfo	Retrieves the value of this object from the server.	List.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.List.getNumber	Returns the number at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a number, an error will occur.	List.getNumber(index)	Number	list|index	List|Integer	|
ee.List.getString	Returns the string at the specified position in list.  A negative index counts backwards from the end of the list. If the value is not a string, an error will occur.	List.getString(index)	String	list|index	List|Integer	|
ee.List.indexOf	Returns the position of the first occurrence of target in list, or -1 if list does not contain target.	List.indexOf(element)	Integer	list|element	List|Object	|
ee.List.indexOfSublist	Returns the starting position of the first occurrence of target within list, or -1 if there is no such occurrence.	List.indexOfSublist(target)	Integer	list|target	List|List	|
ee.List.insert	Inserts element at the specified position in list. A negative index counts backwards from the end of the list.	List.insert(index, element)	List	list|index|element	List|Integer|Object	||
ee.List.iterate	Iterate an algorithm over a list.  The algorithm is expected to take two objects, the current list item, and the result from the previous iteration or the value of first for the first iteration.	List.iterate(function, first)	Object	list|function|first	List|Algorithm|Object	||
ee.List.join	Returns a string containing the elements of the list joined together with the specified separator between elements.	List.join(separator)	String	list|separator	"List|String, default: """""	|
ee.List.lastIndexOfSubList	Returns the starting position of the last occurrence of target within list, or -1 if there is no such occurrence.	List.lastIndexOfSubList(target)	Integer	list|target	List|List	|
ee.List.length	Returns the number of elements in list.	List.length()	Integer	list	List
ee.List.map	Map an algorithm over a list.  The algorithm is expected to take an Object and return an Object.	List.map(baseAlgorithm, dropNulls)	List	list|baseAlgorithm|dropNulls	List|Algorithm|Boolean, default: false	||If true, the mapped algorithm is allowed to return nulls, and the elements for which it returns nulls will be dropped.
ee.List.reduce	Apply a reducer to a list.  If the reducer takes more than 1 input, then each element in the list is assumed to be a list of inputs.  If the reducer returns a single output, it is returned directly, otherwise returns a dictionary containing the named reducer outputs.	List.reduce(reducer)	Object	list|reducer	List|Reducer	|
ee.List.remove	Removes the first occurrence of the specified element from list, if it is present.	List.remove(element)	List	list|element	List|Object	|
ee.List.removeAll	Removes from list all of the elements that are contained in other list.	List.removeAll(other)	List	list|other	List|List	|
ee.List.repeat	Returns a new list containing value repeated count times.	ee.List.repeat(value, count)	List	value|count	Object|Integer	|
ee.List.replace	Replaces the first occurrence of oldVal in list with newVal.	List.replace(oldval, newval)	List	list|oldval|newval	List|Object|Object	||
ee.List.replaceAll	Replaces all occurrences of oldVal in list with newVal.	List.replaceAll(oldval, newval)	List	list|oldval|newval	List|Object|Object	||
ee.List.reverse	Reverses the order of the elements in list.	List.reverse()	List	list	List
ee.List.rotate	Rotates the elements of the list by the specified distance.	List.rotate(distance)	List	list|distance	List|Integer	|
ee.List.sequence	Generate a sequence of numbers from start to end (inclusive) in increments of step, or in count equally-spaced increments.  If end is not specified it is computed from start + step * count, so at least one of end or count must be specified.	ee.List.sequence(start, end, step, count)	List	start|end|step|count	Number|Number, default: null|Number, default: 1|Integer, default: null	|||
ee.List.serialize	Returns the serialized representation of this object.	List.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.List.set	Replaces the value at the specified position in list with element.  A negative index counts backwards from the end of the list.	List.set(index, element)	List	list|index|element	List|Integer|Object	||
ee.List.size	Returns the number of elements in list.	List.size()	Integer	list	List
ee.List.slice	Returns a portion of list between the start index, inclusive, and end index, exclusive.  Negative values for start or end count backwards from the end of the list.  Values greater than the size of the list are legal but are truncated to the size of list.	List.slice(start, end)	List	list|start|end	List|Integer|Integer, default: null	||
ee.List.sort	Sorts the list into ascending order.  If the 'keys' argument is provided, then it is sorted first, and the elements of 'list' are placed in the same order.	List.sort(keys)	List	list|keys	List|List, default: null	The list to sort.|Optional keys to sort by.  If 'keys' is provided, it must have the same length as 'list'.
ee.List.splice	Starting at the start index, removes count elements from list and insert the contents of other at that location.  If start is negative, it counts backwards from the end of the list.	List.splice(start, count, other)	List	list|start|count|other	List|Integer|Integer|List, default: null	|||
ee.List.swap	Swaps the elements at the specified positions.  A negative position counts backwards from the end of the list.	List.swap(pos1, pos2)	List	list|pos1|pos2	List|Integer|Integer	||
ee.List.zip	Pairs the elements of two lists to create a list of two-element lists.  When the input lists are of different sizes, the final list has the same size as the shortest one.	List.zip(other)	List	list|other	List|List	|
ee.Model.fromAiPlatformPredictor	Returns an ee.Model from a description of an AI Platform prediction model. (See https://cloud.google.com/ml-engine/).	ee.Model.fromAiPlatformPredictor(projectName, modelName, version, inputProperties, inputTypeOverride, inputShapes, proj, fixInputProj, inputTileSize, inputOverlapSize, outputTileSize, outputBands)	Model	projectName|modelName|version|inputProperties|inputTypeOverride|inputShapes|proj|fixInputProj|inputTileSize|inputOverlapSize|outputTileSize|outputBands	Object|String, default: null|String, default: null|List, default: null|Dictionary, default: null|Dictionary, default: null|Projection, default: null|Boolean, default: null|List, default: null|List, default: null|List, default: null|Dictionary, default: null	"The Google Cloud project that owns the model.|The name of the model.|The model version. Defaults to the AI Platform default model version.|Properties passed with each prediction instance. Image predictions are tiled, so these properties will be replicated into each image tile instance. Defaults to no properties.|Types to which model inputs will be coerced if specified. Both Image bands and Image/Feature properties are valid.|The fixed shape of input array bands. For each array band not specified, the fixed array shape will be automatically deduced from a non-masked pixel.|The input projection at which to sample all bands. Defaults to the default projection of an image's first band.|If true, pixels will be sampled in a fixed projection specified by 'proj'. The output projection is used otherwise. Defaults to false.|Rectangular dimensions of pixel tiles passed in to prediction instances. Required for image predictions.|Amount of adjacent-tile overlap in X/Y along each edge of pixel tiles passed in to prediction instances. Defaults to [0, 0].|Rectangular dimensions of pixel tiles returned from AI Platform. Defaults to the value in 'inputTileSize'.|A map from output band names to a dictionary of output band info. Valid band info fields are 'type' and 'dimensions'. 'type' should be a ee.PixelType describing the output band, and 'dimensions' is an optional integer with the number of dimensions in that band e.g.: ""outputBands: {'p': {'type': ee.PixelType.int8(), 'dimensions': 1}}"". Required for image predictions."
ee.Model.predictImage	Make predictions from pixel tiles of an image.	Model.predictImage(image)	Image	model|image	Model|Image	|The input image.
ee.Number	Constructs a new Number.	ee.Number(number)	Number	number	Number|Object	A number or a computed object.
ee.Number.abs	Computes the absolute value of the input.	Number.abs()	Number	input	Number	The input value.
ee.Number.acos	Computes the arc cosine in radians of the input.	Number.acos()	Number	input	Number	The input value.
ee.Number.add	Adds the first value to the second.	Number.add(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.and	Returns 1 iff both values are non-zero.	Number.and(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	Number.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.Number.asin	Computes the arc sine in radians of the input.	Number.asin()	Number	input	Number	The input value.
ee.Number.atan	Computes the arc tangent in radians of the input.	Number.atan()	Number	input	Number	The input value.
ee.Number.atan2	Calculates the angle formed by the 2D vector [x, y].	Number.atan2(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitCount	Calculates the number of one-bits in the 64-bit two's complement binary representation of the input.	Number.bitCount()	Number	input	Number	The input value.
ee.Number.bitwiseAnd	Calculates the bitwise AND of the input values.	Number.bitwiseAnd(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitwiseNot	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Number.bitwiseNot()	Number	input	Number	The input value.
ee.Number.bitwiseOr	Calculates the bitwise OR of the input values.	Number.bitwiseOr(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitwiseXor	Calculates the bitwise XOR of the input values.	Number.bitwiseXor(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitwise_and	Calculates the bitwise AND of the input values.	Number.bitwise_and(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitwise_not	Calculates the bitwise NOT of the input, in the smallest signed integer type that can hold the input.	Number.bitwise_not()	Number	input	Number	The input value.
ee.Number.bitwise_or	Calculates the bitwise OR of the input values.	Number.bitwise_or(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.bitwise_xor	Calculates the bitwise XOR of the input values.	Number.bitwise_xor(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.byte	Casts the input value to an unsigned 8-bit integer.	Number.byte()	Number	input	Number	The input value.
ee.Number.cbrt	Computes the cubic root of the input.	Number.cbrt()	Number	input	Number	The input value.
ee.Number.ceil	Computes the smallest integer greater than or equal to the input.	Number.ceil()	Number	input	Number	The input value.
ee.Number.clamp	Clamps the value to lie within the range of min to max.	ee.Number.clamp(number, min, max)	Number	number|min|max	Float|Float|Float	||
ee.Number.cos	Computes the cosine of the input in radians.	Number.cos()	Number	input	Number	The input value.
ee.Number.cosh	Computes the hyperbolic cosine of the input.	Number.cosh()	Number	input	Number	The input value.
ee.Number.digamma	Computes the digamma function of the input.	Number.digamma()	Number	input	Number	The input value.
ee.Number.divide	Divides the first value by the second, returning 0 for division by 0.	Number.divide(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.double	Casts the input value to a 64-bit float.	Number.double()	Number	input	Number	The input value.
ee.Number.eq	Returns 1 iff the first value is equal to the second.	Number.eq(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.erf	Computes the error function of the input.	Number.erf()	Number	input	Number	The input value.
ee.Number.erfInv	Computes the inverse error function of the input.	Number.erfInv()	Number	input	Number	The input value.
ee.Number.erfc	Computes the complementary error function of the input.	Number.erfc()	Number	input	Number	The input value.
ee.Number.erfcInv	Computes the inverse complementary error function of the input.	Number.erfcInv()	Number	input	Number	The input value.
ee.Number.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	Number.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.Number.exp	Computes the Euler's number e raised to the power of the input.	Number.exp()	Number	input	Number	The input value.
ee.Number.expression	Computes a numeric expression.	ee.Number.expression(expression, vars)	Number	expression|vars	String|Dictionary, default: null	A mathematical expression string to be evaluated. In addiiton to the standard arithmetic, boolean and relational operators, expressions also support any function in Number, the '.' operator to extract child elements from the 'vars' dictionary, and mathematical constants Math.PI and Math.E|A dictionary of named values that can be used in the expression.
ee.Number.first	Selects the value of the first value.	Number.first(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.firstNonZero	Selects the first value if it is non-zero, and the second value otherwise.	Number.firstNonZero(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.first_nonzero	Selects the first value if it is non-zero, and the second value otherwise.	Number.first_nonzero(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.float	Casts the input value to a 32-bit float.	Number.float()	Number	input	Number	The input value.
ee.Number.floor	Computes the largest integer less than or equal to the input.	Number.floor()	Number	input	Number	The input value.
ee.Number.format	Convert a number to a string using printf-style formatting.	Number.format(pattern)	String	number|pattern	"Number|String, default: ""%s"""	The number to convert to a string.|A printf-style format string. For example, '%.2f' produces numbers formatted like '3.14', and '%05d' produces numbers formatted like '00042'. The format string must satisfy the following criteria:|1. Zero or more prefix characters.|2. Exactly one '%'.|3. Zero or more modifier characters in the set [#-+ 0,(.\d].|4. Exactly one conversion character in the set [sdoxXeEfgGaA].|5. Zero or more suffix characters.| |For more about format strings, see https://docs.oracle.com/javase/7/docs/api/java/util/Formatter.html
ee.Number.gamma	Computes the gamma function of the input.	Number.gamma()	Number	input	Number	The input value.
ee.Number.gammainc	Calculates the regularized lower incomplete Gamma function γ(x,a).	Number.gammainc(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.getInfo	Retrieves the value of this object from the server.	Number.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.Number.gt	Returns 1 iff the first value is greater than the second.	Number.gt(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.gte	Returns 1 iff the first value is greater than or equal to the second.	Number.gte(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.hypot	Calculates the magnitude of the 2D vector [x, y].	Number.hypot(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.int	Casts the input value to a signed 32-bit integer.	Number.int()	Number	input	Number	The input value.
ee.Number.int16	Casts the input value to a signed 16-bit integer.	Number.int16()	Number	input	Number	The input value.
ee.Number.int32	Casts the input value to a signed 32-bit integer.	Number.int32()	Number	input	Number	The input value.
ee.Number.int64	Casts the input value to a signed 64-bit integer.	Number.int64()	Number	input	Number	The input value.
ee.Number.int8	Casts the input value to a signed 8-bit integer.	Number.int8()	Number	input	Number	The input value.
ee.Number.lanczos	Computes the Lanczos approximation of the input.	Number.lanczos()	Number	input	Number	The input value.
ee.Number.leftShift	Calculates the left shift of v1 by v2 bits.	Number.leftShift(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.left_shift	Calculates the left shift of v1 by v2 bits.	Number.left_shift(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.log	Computes the natural logarithm of the input.	Number.log()	Number	input	Number	The input value.
ee.Number.log10	Computes the base-10 logarithm of the input.	Number.log10()	Number	input	Number	The input value.
ee.Number.long	Casts the input value to a signed 64-bit integer.	Number.long()	Number	input	Number	The input value.
ee.Number.lt	Returns 1 iff the first value is less than the second.	Number.lt(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.lte	Returns 1 iff the first value is less than or equal to the second.	Number.lte(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.max	Selects the maximum of the first and second values.	Number.max(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.min	Selects the minimum of the first and second values.	Number.min(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.mod	Calculates the remainder of the first value divided by the second.	Number.mod(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.multiply	Multiplies the first value by the second.	Number.multiply(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.neq	Returns 1 iff the first value is not equal to the second.	Number.neq(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.not	Returns 0 if the input is non-zero, and 1 otherwise.	Number.not()	Number	input	Number	The input value.
ee.Number.or	Returns 1 iff either input value is non-zero.	Number.or(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.parse	Convert a string to a number.	ee.Number.parse(input, radix)	Number	input|radix	String|Integer, default: 10	The string to convert to a number.|An integer representing the base number system from which to convert. If input is not an integer, radix must equal 10 or not be specified.
ee.Number.pow	Raises the first value to the power of the second.	Number.pow(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.rightShift	Calculates the signed right shift of v1 by v2 bits.	Number.rightShift(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.right_shift	Calculates the signed right shift of v1 by v2 bits.	Number.right_shift(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.round	Computes the integer nearest to the input.	Number.round()	Number	input	Number	The input value.
ee.Number.serialize	Returns the serialized representation of this object.	Number.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.Number.short	Casts the input value to a signed 16-bit integer.	Number.short()	Number	input	Number	The input value.
ee.Number.sin	Computes the sine of the input in radians.	Number.sin()	Number	input	Number	The input value.
ee.Number.sinh	Computes the hyperbolic sine of the input.	Number.sinh()	Number	input	Number	The input value.
ee.Number.sqrt	Computes the square root of the input.	Number.sqrt()	Number	input	Number	The input value.
ee.Number.subtract	Subtracts the second value from the first.	Number.subtract(right)	Number	left|right	Number|Number	The left-hand value.|The right-hand value.
ee.Number.tan	Computes the tangent of the input in radians.	Number.tan()	Number	input	Number	The input value.
ee.Number.tanh	Computes the hyperbolic tangent of the input.	Number.tanh()	Number	input	Number	The input value.
ee.Number.toByte	Casts the input value to an unsigned 8-bit integer.	Number.toByte()	Number	input	Number	The input value.
ee.Number.toDouble	Casts the input value to a 64-bit float.	Number.toDouble()	Number	input	Number	The input value.
ee.Number.toFloat	Casts the input value to a 32-bit float.	Number.toFloat()	Number	input	Number	The input value.
ee.Number.toInt	Casts the input value to a signed 32-bit integer.	Number.toInt()	Number	input	Number	The input value.
ee.Number.toInt16	Casts the input value to a signed 16-bit integer.	Number.toInt16()	Number	input	Number	The input value.
ee.Number.toInt32	Casts the input value to a signed 32-bit integer.	Number.toInt32()	Number	input	Number	The input value.
ee.Number.toInt64	Casts the input value to a signed 64-bit integer.	Number.toInt64()	Number	input	Number	The input value.
ee.Number.toInt8	Casts the input value to a signed 8-bit integer.	Number.toInt8()	Number	input	Number	The input value.
ee.Number.toLong	Casts the input value to a signed 64-bit integer.	Number.toLong()	Number	input	Number	The input value.
ee.Number.toShort	Casts the input value to a signed 16-bit integer.	Number.toShort()	Number	input	Number	The input value.
ee.Number.toUint16	Casts the input value to an unsigned 16-bit integer.	Number.toUint16()	Number	input	Number	The input value.
ee.Number.toUint32	Casts the input value to an unsigned 32-bit integer.	Number.toUint32()	Number	input	Number	The input value.
ee.Number.toUint8	Casts the input value to an unsigned 8-bit integer.	Number.toUint8()	Number	input	Number	The input value.
ee.Number.trigamma	Computes the trigamma function of the input.	Number.trigamma()	Number	input	Number	The input value.
ee.Number.uint16	Casts the input value to an unsigned 16-bit integer.	Number.uint16()	Number	input	Number	The input value.
ee.Number.uint32	Casts the input value to an unsigned 32-bit integer.	Number.uint32()	Number	input	Number	The input value.
ee.Number.uint8	Casts the input value to an unsigned 8-bit integer.	Number.uint8()	Number	input	Number	The input value.
ee.Number.unitScale	Scales the input so that the range of input values [min, max] becomes [0, 1]. Values outside the range are NOT clamped.  If min == max, 0 is returned.	ee.Number.unitScale(number, min, max)	Float	number|min|max	Float|Float|Float	||
ee.PixelType	Returns a PixelType of the given precision with the given limits per element, and an optional dimensionality.	ee.PixelType(precision, minValue, maxValue, dimensions)	PixelType	precision|minValue|maxValue|dimensions	Object|Number, default: null|Number, default: null|Integer, default: 0	The pixel precision, one of 'int', 'float', or 'double'.|The minimum value of pixels of this type. If precision is 'float' or 'double', this can be null, signifying negative infinity.|The maximum value of pixels of this type. If precision is 'float' or 'double', this can be null, signifying positive infinity.|The number of dimensions in which pixels of this type can vary; 0 is a scalar, 1 is a vector, 2 is a matrix, etc.
ee.PixelType.double	Returns the 64-bit floating point pixel type.	ee.PixelType.double()	PixelType
ee.PixelType.float	Returns the 32-bit floating point pixel type.	ee.PixelType.float()	PixelType
ee.PixelType.int16	Returns the 16-bit signed integer pixel type.	ee.PixelType.int16()	PixelType
ee.PixelType.int32	Returns the 32-bit signed integer pixel type.	ee.PixelType.int32()	PixelType
ee.PixelType.int64	Returns the 64-bit signed integer pixel type.	ee.PixelType.int64()	PixelType
ee.PixelType.int8	Returns the 8-bit signed integer pixel type.	ee.PixelType.int8()	PixelType
ee.PixelType.uint16	Returns the 16-bit unsigned integer pixel type.	ee.PixelType.uint16()	PixelType
ee.PixelType.uint32	Returns the 32-bit unsigned integer pixel type.	ee.PixelType.uint32()	PixelType
ee.PixelType.uint8	Returns the 8-bit unsigned integer pixel type.	ee.PixelType.uint8()	PixelType
ee.Projection	Returns a Projection with the given base coordinate system and the given transform between projected coordinates and the base. If no transform is specified, the identity transform is assumed.	ee.Projection(crs, transform, transformWkt)	Projection	crs|transform|transformWkt	Object|List, default: null|String, default: null	The base coordinate reference system of this Projection, given as a well-known authority code (e.g. 'EPSG:4326') or a WKT string.|The transform between projected coordinates and the base coordinate system, specified as a 2x3 affine transform matrix in row-major order: [xScale, xShearing, xTranslation, yShearing, yScale, yTranslation]. May not specify both this and 'transformWkt'.|The transform between projected coordinates and the base coordinate system, specified as a WKT string. May not specify both this and 'transform'.
ee.Projection.atScale	Returns the projection scaled such that its units have the given scale in linear meters, as measured at the point of true scale.	Projection.atScale(meters)	Projection	projection|meters	Projection|Float	|
ee.Projection.crs	Returns the authority code (e.g. 'EPSG:4326') for the base coordinate system of this projection, or null if the base coordinate system is not found in any available database.	Projection.crs()	String	projection	Projection
ee.Projection.nominalScale	Returns the linear scale in meters of the units of this projection, as measured at the point of true scale.	Projection.nominalScale()	Float	proj	Projection
ee.Projection.scale	Returns the projection scaled by the given amount in each axis.	Projection.scale(x, y)	Projection	projection|x|y	Projection|Float|Float	||
ee.Projection.transform	Returns a WKT representation of the transform of this Projection. This is the transform that converts from projected coordinates to the base coordinate system.	Projection.transform()	String	projection	Projection
ee.Projection.translate	Returns the projection translated by the given amount in each axis.	Projection.translate(x, y)	Projection	projection|x|y	Projection|Float|Float	||
ee.Projection.wkt	Returns a WKT representation of the base coordinate system of this Projection.	Projection.wkt()	String	projection	Projection
ee.Reducer.allNonZero	Returns a Reducer that returns 1 if all of its inputs are non-zero, 0 otherwise.	ee.Reducer.allNonZero()	Reducer
ee.Reducer.anyNonZero	Returns a Reducer that returns 1 if any of its inputs are non-zero, 0 otherwise.	ee.Reducer.anyNonZero()	Reducer
ee.Reducer.autoHistogram	Create a reducer that will compute a histogram of the inputs.  The output is a Nx2 array of the lower bucket bounds and the counts of each bucket, and is suitable for use per-pixel.	ee.Reducer.autoHistogram(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.bitwiseAnd	Returns a Reducer that computes the bitwise-and summation of its inputs.	ee.Reducer.bitwiseAnd()	Reducer
ee.Reducer.bitwiseOr	Returns a Reducer that computes the bitwise-or summation of its inputs.	ee.Reducer.bitwiseOr()	Reducer
ee.Reducer.centeredCovariance	Creates a reducer that reduces some number of 1-D arrays of the same length N to a covariance matrix of shape NxN.  WARNING: this reducer requires that the data has been mean centered.	ee.Reducer.centeredCovariance()	Reducer
ee.Reducer.combine	Creates a Reducer that runs two reducers in parallel.  The combined reducer's outputs will be those of reducer1 followed by those of reducer2, where the output names of reducer2 are prefixed with the given string.	Reducer.combine(reducer2, outputPrefix, sharedInputs)	Reducer	reducer1|reducer2|outputPrefix|sharedInputs	"Reducer|Reducer|String, default: """"|Boolean, default: false"	||Prefix for reducer2's output names.|
ee.Reducer.count	Returns a Reducer that computes the number of non-null inputs.	ee.Reducer.count()	Reducer
ee.Reducer.countDistinct	Returns a Reducer that computes the number of distinct inputs.	ee.Reducer.countDistinct()	Reducer
ee.Reducer.countEvery	Returns a Reducer that computes the number of inputs.	ee.Reducer.countEvery()	Reducer
ee.Reducer.countRuns	Returns a Reducer that computes the number of runs of distinct, non-null inputs.	ee.Reducer.countRuns()	Reducer
ee.Reducer.covariance	Creates a reducer that reduces some number of 1-D arrays of the same length N to a covariance matrix of shape NxN.  This reducer uses the one-pass covariance formula from Sandia National Laboratories Technical Report SAND2008-6212, which can lose accuracy if the values span a large range.	ee.Reducer.covariance()	Reducer
ee.Reducer.disaggregate	Separates aggregate inputs (Arrays, Lists or Dictionaries) into individual items that are then each passed to the specified reducer.  When used on dictionaries, the dictionary keys are ignored.  Non-aggregated inputs (ie: numbers or strings) are passed to the underlying reducer directly.	Reducer.disaggregate(axis)	Reducer	reducer|axis	Reducer|Integer, default: null	The reducer for which to disaggregate inputs.|If specified, indicates an array axis along which to disaggregate.  If not specified, arrays are completely disaggregated.  Ignored for non-array types.
ee.Reducer.first	Returns a Reducer that returns the first of its inputs.	ee.Reducer.first()	Reducer
ee.Reducer.firstNonNull	Returns a Reducer that returns the first of its non-null inputs.	ee.Reducer.firstNonNull()	Reducer
ee.Reducer.fixedHistogram	Creates a reducer that will compute a histogram of the inputs using a fixed number of fixed width bins. Values outside of the [min, max) range are ignored.  The output is a Nx2 array of bucket lower edges and counts and is suitable for use per-pixel.	ee.Reducer.fixedHistogram(min, max, steps)	Reducer	min|max|steps	Float|Float|Integer	The lower (inclusive) bound of the first bucket.|The upper (exclusive) bound of the last bucket.|The number of buckets to use.
ee.Reducer.forEach	Creates a Reducer by combining a copy of the given reducer for each output name in the given list.  If the reducer has a single output, the output names are used as-is; otherwise they are prefixed to the original output names.	Reducer.forEach(outputNames)	Reducer	reducer|outputNames	Reducer|List	|
ee.Reducer.forEachBand	Creates a Reducer by combining a copy of the given reducer for each band in the given image, using the band names as output names.	Reducer.forEachBand(image)	Reducer	reducer|image	Reducer|Image	|
ee.Reducer.forEachElement	Separately reduces each position in array inputs of equal shape, producing an array output of the same shape.	Reducer.forEachElement()	Reducer	reducer	Reducer	The reducer to apply to each array element.
ee.Reducer.frequencyHistogram	Returns a Reducer that returns a (weighted) frequency table of its inputs.	ee.Reducer.frequencyHistogram()	Reducer
ee.Reducer.getOutputs	Returns a list of the output names of the given reducer.	Reducer.getOutputs()	List	reducer	Reducer
ee.Reducer.group	Groups reducer records by the value of a given input, and reduces each group with the given reducer.	Reducer.group(groupField, groupName)	Reducer	reducer|groupField|groupName	"Reducer|Integer, default: 0|String, default: ""group"""	The reducer to apply to each group, without the group field.|The field that contains record groups.|The dictionary key that contains the group. Defaults to 'group'.
ee.Reducer.histogram	Create a reducer that will compute a histogram of the inputs.	ee.Reducer.histogram(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.intervalMean	Creates a Reducer to compute the mean of all inputs in the specified percentile range.  For small numbers of inputs (up to maxRaw) the mean will be computed directly; for larger numbers of inputs the mean will be derived from a histogram.	ee.Reducer.intervalMean(minPercentile, maxPercentile, maxBuckets, minBucketWidth, maxRaw)	Reducer	minPercentile|maxPercentile|maxBuckets|minBucketWidth|maxRaw	Float|Float|Integer, default: null|Float, default: null|Integer, default: null	The lower bound of the percentile range.|The upper bound of the percentile range.|The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.kendallsCorrelation	Creates a reducer that computes the Kendall's Tau-b rank correlation.  A positive tau value indicates an increasing trend; negative value indicates a decreasing trend. See https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/correlation/KendallsCorrelation.html for details.	ee.Reducer.kendallsCorrelation(numInputs)	Reducer	numInputs	Integer, default: 1	The number of inputs to expect (1 or 2).  If 1 is specified, automatically generates sequence numbers for the x value (meaning there can be no ties).
ee.Reducer.kurtosis	Returns a Reducer that Computes the kurtosis of its inputs.	ee.Reducer.kurtosis()	Reducer
ee.Reducer.last	Returns a Reducer that returns the last of its inputs.	ee.Reducer.last()	Reducer
ee.Reducer.lastNonNull	Returns a Reducer that returns the last of its non-null inputs.	ee.Reducer.lastNonNull()	Reducer
ee.Reducer.linearFit	Returns a Reducer that computes the slope and offset for a (weighted) linear regression of 2 inputs.  The inputs are expected to be x data followed by y data..	ee.Reducer.linearFit()	Reducer
ee.Reducer.linearRegression	Creates a reducer that computes a linear least squares regression with numX independent variables and numY dependent variables.	ee.Reducer.linearRegression(numX, numY)	Reducer	numX|numY	Integer|Integer, default: 1	The number of input dimensions.|The number of output dimensions.
ee.Reducer.max	Creates a reducer that outputs the maximum value of its (first) input.  If numInputs is greater than one, also outputs the corresponding values of the additional inputs.	ee.Reducer.max(numInputs)	Reducer	numInputs	Integer, default: 1	The number of inputs.
ee.Reducer.mean	Returns a Reducer that computes the (weighted) arithmetic mean of its inputs.	ee.Reducer.mean()	Reducer
ee.Reducer.median	Create a reducer that will compute the median of the inputs.  For small numbers of inputs (up to maxRaw) the median will be computed directly; for larger numbers of inputs the median will be derived from a histogram.	ee.Reducer.median(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.min	Creates a reducer that outputs the minimum value of its (first) input.  If numInputs is greater than one, also outputs the corresponding values of the additional inputs.	ee.Reducer.min(numInputs)	Reducer	numInputs	Integer, default: 1	The number of inputs.
ee.Reducer.minMax	Returns a Reducer that computes the minimum and maximum of its inputs.	ee.Reducer.minMax()	Reducer
ee.Reducer.mode	Create a reducer that will compute the mode of the inputs.  For small numbers of inputs (up to maxRaw) the mode will be computed directly; for larger numbers of inputs the mode will be derived from a histogram.	ee.Reducer.mode(maxBuckets, minBucketWidth, maxRaw)	Reducer	maxBuckets|minBucketWidth|maxRaw	Integer, default: null|Float, default: null|Integer, default: null	The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.pearsonsCorrelation	Creates a two-input reducer that computes Pearson's product-moment correlation coefficient and the 2-sided p-value test for correlation = 0.	ee.Reducer.pearsonsCorrelation()	Reducer
ee.Reducer.percentile	Create a reducer that will compute the specified percentiles, e.g. given [0, 50, 100] will produce outputs named 'p0', 'p50', and 'p100' with the min, median, and max respectively.  For small numbers of inputs (up to maxRaw) the percentiles will be computed directly; for larger numbers of inputs the percentiles will be derived from a histogram.	ee.Reducer.percentile(percentiles, outputNames, maxBuckets, minBucketWidth, maxRaw)	Reducer	percentiles|outputNames|maxBuckets|minBucketWidth|maxRaw	List|List, default: null|Integer, default: null|Float, default: null|Integer, default: null	A list of numbers between 0 and 100.|A list of names for the outputs, or null to get default names.|The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ee.Reducer.product	Returns a Reducer that computes the product of its inputs.	ee.Reducer.product()	Reducer
ee.Reducer.repeat	Creates a Reducer by combining the specified number of copies of the given reducer.  Output names are the same as the given reducer, but each is a list of the corresponding output from each of the reducers.	Reducer.repeat(count)	Reducer	reducer|count	Reducer|Integer	|
ee.Reducer.ridgeRegression	Creates a reducer that computes a ridge regression with numX independent variables (not including constant) followed by numY dependent variables.  Ridge regression is a form of Tikhonov regularization which shrinks the regression coefficients by imposing a penalty on their size. With this implementation of ridge regression there NO NEED to include a constant value for bias.	ee.Reducer.ridgeRegression(numX, numY, lambda)	Reducer	numX|numY|lambda	Integer|Integer, default: 1|Float, default: 0.1	the number of independent variables being regressed.|the number of dependent variables.|Regularization parameter.
ee.Reducer.robustLinearRegression	Creates a reducer that computes a robust least squares regression with numX independent variables and numY dependent variables, using iteratively reweighted least squares with the Talwar cost function. A point is considered an outlier if the RMS of residuals is greater than beta.	ee.Reducer.robustLinearRegression(numX, numY, beta)	Reducer	numX|numY|beta	Integer|Integer, default: 1|Float, default: null	The number of input dimensions.|The number of output dimensions.|Residual error outlier margin. If null, a default value will be computed.
ee.Reducer.sampleStdDev	Returns a Reducer that computes the sample standard deviation of its inputs.	ee.Reducer.sampleStdDev()	Reducer
ee.Reducer.sampleVariance	Returns a Reducer that computes the sample variance of its inputs.	ee.Reducer.sampleVariance()	Reducer
ee.Reducer.sensSlope	Creates a two-input reducer that computes the Sen's slope estimator.  The inputs are expected to be x data followed by y data.  It returns two double values; the estimated slope and the offset.	ee.Reducer.sensSlope()	Reducer
ee.Reducer.setOutputs	Returns a Reducer with the same inputs as the given Reducer, but with outputs renamed and/or removed.	Reducer.setOutputs(outputs)	Reducer	reducer|outputs	Reducer|List	|The new output names; any output whose name is null or empty will be dropped.
ee.Reducer.skew	Returns a Reducer that Computes the skewness of its inputs.	ee.Reducer.skew()	Reducer
ee.Reducer.spearmansCorrelation	Creates a two-input reducer that computes the Spearman's rank-moment correlation.  See https://commons.apache.org/proper/commons-math/javadocs/api-3.6/org/apache/commons/math3/stat/correlation/SpearmansCorrelation.html for details.	ee.Reducer.spearmansCorrelation()	Reducer
ee.Reducer.splitWeights	Returns a Reducer with the same outputs as the given Reducer, but with each weighted input replaced by two unweighted inputs.	Reducer.splitWeights()	Reducer	reducer	Reducer
ee.Reducer.stdDev	Returns a Reducer that computes the standard deviation of its inputs.	ee.Reducer.stdDev()	Reducer
ee.Reducer.sum	Returns a Reducer that computes the (weighted) sum of its inputs.	ee.Reducer.sum()	Reducer
ee.Reducer.toCollection	Returns a reducer that collects its inputs into a FeatureCollection.	ee.Reducer.toCollection(propertyNames, numOptional)	Reducer	propertyNames|numOptional	List|Integer, default: 0	The property names that will be defined on each output feature; determines the number of reducer inputs.|The last numOptional inputs will be considered optional; the other inputs must be non-null or the input tuple will be dropped.
ee.Reducer.toList	Creates a reducer that collects its inputs into a list, optionally grouped into tuples.	ee.Reducer.toList(tupleSize, numOptional)	Reducer	tupleSize|numOptional	Integer, default: null|Integer, default: 0	The size of each output tuple, or null for no grouping. Also determines the number of inputs (null tupleSize has 1 input).|The last numOptional inputs will be considered optional; the other inputs must be non-null or the input tuple will be dropped.
ee.Reducer.unweighted	Returns a Reducer with the same inputs and outputs as the given Reducer, but with no weighted inputs.	Reducer.unweighted()	Reducer	reducer	Reducer
ee.Reducer.variance	Returns a Reducer that computes the variance of its inputs.	ee.Reducer.variance()	Reducer
ee.String	Constructs a new String.	ee.String(string)	String	string	Object|String	A string or a computed object.
ee.String.aside	Calls a function passing this object as the first argument, and returning itself. Convenient e.g. when debugging:	String.aside(func, var_args)	ComputedObject	computedobject|func|var_args	ComputedObject|Function|VarArgs	The ComputedObject instance.|The function to call.|Any extra arguments to pass to the function.
ee.String.cat	Concatenates two strings.	String.cat(string2)	String	string1|string2	String|String	The first string.|The second string.
ee.String.compareTo	Compares two strings lexicographically. Returns: the value 0 if the two strings are lexicographically equal; a value less than 0 if string1 is less than string2;  and a value greater than 0 if string1 is lexicographically greater than string2.	String.compareTo(string2)	Integer	string1|string2	String|String	The string to compare.|The string to be compared.
ee.String.decodeJSON	Decodes a JSON string.	String.decodeJSON()	Object	string	String	The string to decode.
ee.String.evaluate	Asynchronously retrieves the value of this object from the server and passes it to the provided callback function.	String.evaluate(callback)		computedobject|callback	ComputedObject|Function	The ComputedObject instance.|A function of the form function(success, failure), called when the server returns an answer. If the request succeeded, the success argument contains the evaluated result.  If the request failed, the failure argument will contains an error message.
ee.String.getInfo	Retrieves the value of this object from the server.	String.getInfo(callback)	Object	computedobject|callback	ComputedObject|Function, optional	The ComputedObject instance.|An optional callback. If not supplied, the call is made synchronously.
ee.String.index	Searches a string for the first occurrence of a substring.  Returns the index of the first match, or -1.	String.index(pattern)	Integer	target|pattern	String|String	The string to search.|The string to find.
ee.String.length	Returns the length of a string.	String.length()	Integer	string	String	The string from which to get the length.
ee.String.match	Matches a string against a regular expression.  Returns a list of matching strings.	String.match(regex, flags)	List	input|regex|flags	"String|String|String, default: """""	The string in which to search.|The regular expression to match.|A string specifying a combination of regular expression flags, specifically one or more of: 'g' (global match) or 'i' (ignore case)
ee.String.replace	Returns a new string with some or all matches of a pattern replaced.	String.replace(regex, replacement, flags)	String	input|regex|replacement|flags	"String|String|String|String, default: """""	The string in which to search.|The regular expression to match.|The string that replaces the matched substring.|A string specifying a combination of regular expression flags, specifically one or more of: 'g' (global match) or 'i' (ignore case)
ee.String.rindex	Searches a string for the last occurrence of a substring.  Returns the index of the first match, or -1.	String.rindex(pattern)	Integer	target|pattern	String|String	The string to search.|The string to find.
ee.String.serialize	Returns the serialized representation of this object.	String.serialize()	String	computedobject	ComputedObject	The ComputedObject instance.
ee.String.slice	Returns a substring of the given string. If the specified range exceeds the length of the string, returns a shorter substring.	String.slice(start, end)	String	string|start|end	String|Integer|Integer, default: null	The string to subset.|The beginning index, inclusive.  Negative numbers count backwards from the end of the string.|The ending index, exclusive.  Defaults to the length of the string. Negative numbers count backwards from the end of the string.
ee.String.split	Splits a string on a regular expression, Returning a list of strings.	String.split(regex, flags)	List	string|regex|flags	"String|String|String, default: """""	The string to split.|A regular expression to split on. If regex is the empty string, then the input string is split into individual characters.|A string specifying the regular expression flag: 'i' (ignore case)
ee.String.toLowerCase	Converts all of the characters in a string to lower case.	String.toLowerCase()	String	string	String	The string to convert to lower case.
ee.String.toUpperCase	Converts all of the characters in a string to upper case.	String.toUpperCase()	String	string	String	The string to convert to upper case.
ee.String.trim	Returns a string whose value is the original string, with any leading and trailing whitespace removed.	String.trim()	String	string	String	The string to trim.
ee.Terrain.aspect	Calculates aspect in degrees from a terrain DEM.	ee.Terrain.aspect(input)	Image	input	Image	An elevation image, in meters.
ee.Terrain.fillMinima	Fills local minima.  Only works on INT types.	ee.Terrain.fillMinima(image, borderValue, neighborhood)	Image	image|borderValue|neighborhood	Image|Long, default: null|Integer, default: 50	The image to fill.|The border value.|The size of the neighborhood to compute over.
ee.Terrain.hillShadow	Creates a shadow band, with output 1 where pixels are illumunated and 0 where they are shadowed. Takes as input an elevation band, azimuth and zenith of the light source in degrees, a neighborhood size, and whether or not to apply hysteresis when a shadow appears. Currently, this algorithm only works for Mercator projections, in which light rays are parallel.	ee.Terrain.hillShadow(image, azimuth, zenith, neighborhoodSize, hysteresis)	Image	image|azimuth|zenith|neighborhoodSize|hysteresis	Image|Float|Float|Integer, default: 0|Boolean, default: false	The image to which to apply the shadow algorithm, in whicheach pixel should represent an elevation in meters.|Azimuth in degrees.|Zenith in degrees.|Neighborhood size.|Use hysteresis. Less physically accurate, but may generate better images.
ee.Terrain.hillshade	Computes a simple hillshade from a DEM.	ee.Terrain.hillshade(input, azimuth, elevation)	Image	input|azimuth|elevation	Image|Float, default: 270|Float, default: 45	An elevation image, in meters.|The illumination azimuth in degrees from north.|The illumination elevation in degrees.
ee.Terrain.products	Calculates slope, aspect, and a simple hillshade from a terrain DEM.	ee.Terrain.products(input)	Image	input	Image	An elevation image, in meters.
ee.Terrain.slope	Calculates slope in degrees from a terrain DEM.	ee.Terrain.slope(input)	Image	input	Image	An elevation image, in meters.
ee.apply	Call a function with a dictionary of named arguments.	ee.apply(func, namedArgs)	ComputedObject	func|namedArgs	Function|String|Object	The function to call. Either an ee.Function object or the name of an API function.|A dictionary of arguments to the function.
ee.call	Call a function with the given positional arguments.	ee.call(func, var_args)	ComputedObject	func|var_args	Function|String|VarArgs	The function to call. Either an ee.Function object or the name of an API function.|Positional arguments to pass to the function.
ee.data.authenticateViaOauth	Configures client-side authentication of EE API calls through the Google APIs Client Library for JavaScript. The library will be loaded automatically if it is not already loaded on the page. The user will be asked to grant the application identified by clientId access to their EE data if they have not done so previously.	ee.data.authenticateViaOauth(clientId, success, error, extraScopes, onImmediateFailed)		clientId|success|error|extraScopes|onImmediateFailed	String|Function|Function, optional|List, optional|Function, optional	The application's OAuth client ID, or null to disable authenticated calls. This can be obtained through the Google Developers Console. The project must have a JavaScript origin that corresponds to the domain where the script is running.|The function to call if authentication succeeded.|The function to call if authentication failed, passed the error message. If authentication in immediate|(behind-the-scenes) mode fails and opt_onImmediateFailed is specified, that function is called instead of opt_error.|Extra OAuth scopes to request.|The function to call if automatic behind-the-scenes authentication fails. Defaults to ee.data.authenticateViaPopup(), bound to the passed callbacks.
ee.data.authenticateViaPopup	Shows a popup asking for the user's permission. Should only be called if ee.data.authenticate() called its opt_onImmediateFailed argument in the past.	ee.data.authenticateViaPopup(success, error)		success|error	Function, optional|Function, optional	The function to call if authentication succeeds.|The function to call if authentication fails, passing the error message.
ee.data.authenticateViaPrivateKey	Configures server-side authentication of EE API calls through the Google APIs Node.js Client. Private key authentication is strictly for server-side API calls: for browser-based applications, use ee.data.authenticateViaOauth(). No user interaction (e.g. authentication popup) is necessary when using server-side authentication.	ee.data.authenticateViaPrivateKey(privateKey, success, error, extraScopes)		privateKey|success|error|extraScopes	AuthPrivateKey|Function, optional|Function, optional|List, optional	JSON content of private key.|The function to call if authentication succeeded.|The function to call if authentication failed, passed the error message.|Extra OAuth scopes to request.
ee.data.computeValue	Sends a request to compute a value.	ee.data.computeValue(obj, callback)	Object|Value	obj|callback	Object|Function, optional	|
ee.data.copyAsset	Copies the asset from sourceId into destinationId.	ee.data.copyAsset(sourceId, destinationId, overwrite, callback)		sourceId|destinationId|overwrite|callback	String|String|Boolean, optional|Function, optional	The ID of the asset to copy.|The ID of the new asset created by copying.|Overwrite any existing destination asset ID.|An optional callback. If not supplied, the call is made synchronously. The callback is passed an empty object and an error message, if any.
ee.data.createAsset	"Creates an asset from a JSON value. To create an empty image collection or folder, pass in a ""value"" object with a ""type"" key whose value is one of ee.data.AssetType.* (i.e. ""ImageCollection"" or ""Folder"")."	ee.data.createAsset(value, path, force, properties, callback)	Object	value|path|force|properties|callback	Object|String|String, optional|Boolean, optional|Object, optional|Function, optional	An object describing the asset to create or a JSON string with the already-serialized value for the new asset.|An optional desired ID, including full path.|Force overwrite.|The keys and values of the properties to set|An optional callback. If not supplied, the call is made synchronously.
ee.data.createAssetHome	"Attempts to create a home root folder (e.g. ""users/joe"") for the current user. This results in an error if the user already has a home root folder or the requested ID is unavailable."	ee.data.createAssetHome(requestedId, callback)		requestedId|callback	String|Function, optional	"The requested ID of the home folder|(e.g. ""users/joe"").|An optional callback. If not supplied, the call is made synchronously."
ee.data.createFolder	Creates an asset folder.	ee.data.createFolder(path, force, callback)	Object	path|force|callback	String|Boolean, optional|Function, optional	The path of the folder to create.|Force overwrite.|An optional callback. If not supplied, the call is made synchronously.
ee.data.deleteAsset	Deletes the asset with the given id.	ee.data.deleteAsset(assetId, callback)		assetId|callback	String|Function, optional	The ID of the asset to delete.|An optional callback. If not supplied, the call is made synchronously. The callback is passed an empty object and an error message, if any.
ee.data.getAssetAcl	Returns the access control list of the asset with the given ID.	ee.data.getAssetAcl(assetId, callback)	AssetAcl	assetId|callback	String|Function, optional	The ID of the asset to check.|An optional callback. If not supplied, the call is made synchronously.
ee.data.getAssetRootQuota	Returns quota usage details for the asset root with the given ID.	ee.data.getAssetRootQuota(rootId, callback)	AssetQuotaDetails	rootId|callback	String|Function, optional	"The ID of the asset root to check, e.g. ""users/foo"".|An optional callback. If not supplied, the call is made synchronously."
ee.data.getAssetRoots	"Returns the list of the root folders the user owns. The ""id"" values for roots are two levels deep, e.g. ""users/johndoe"" not ""users/johndoe/notaroot""."	ee.data.getAssetRoots(callback)	List	callback	Function, optional	An optional callback. If not supplied, the call is made synchronously.
ee.data.getDownloadId	Get a Download ID.	ee.data.getDownloadId(params, callback)	DownloadId	params|callback	Object|Function, optional	An object containing download options with the following possible values:|  - image: The image to download.|  - name: a base name to use when constructing filenames.|  - bands: a description of the bands to download. Must be an array of dictionaries, each with the following keys:|    + id: the name of the band, a string, required.|    + crs: an optional CRS string defining the band projection.|    + crs_transform: an optional array of 6 numbers specifying an affine transform from the specified CRS, in row-major order:|[xScale, xShearing, xTranslation, yShearing, yScale, yTranslation]|    + dimensions: an optional array of two integers defining the width and height to which the band is cropped.|    + scale: an optional number, specifying the scale in meters of the band; ignored if crs and crs_transform is specified.|  - crs: a default CRS string to use for any bands that do not explicitly specify one.|  - crs_transform: a default affine transform to use for any bands that do not specify one, of the same format as the crs_transform of bands.|  - dimensions: default image cropping dimensions to use for any bands that do not specify them.|  - scale: a default scale to use for any bands that do not specify one; ignored if dimensions is specified.|  - region: a polygon specifying a region to download.|  - filePerBand: Whether to produce a different GeoTIFF per band (boolean). Defaults to true. If false, a single GeoTIFF is produced and all band-level transformations will be ignored.|  - id: deprecated, use image: ee.Image(id)|An optional callback. If not supplied, the call is made synchronously.
ee.data.getMapId	Get a Map ID for a given asset	ee.data.getMapId(params, callback)	RawMapId	params|callback	ImageVisualizationParameters|Function, optional	"The visualization parameters as a (client-side) JavaScript object. For Images and ImageCollections:|  - image (JSON string) The image to render.|  - version (number) Version number of image (or latest).|  - bands (comma-separated strings) Comma-delimited list of band names to be mapped to RGB.|  - min (comma-separated numbers) Value (or one per band) to map onto 00.|  - max (comma-separated numbers) Value (or one per band) to map onto FF.|  - gain (comma-separated numbers) Gain (or one per band) to map onto 00-FF.|  - bias (comma-separated numbers) Offset (or one per band) to map onto 00-FF.|  - gamma (comma-separated numbers) Gamma correction factor (or one per band)|  - palette (comma-separated strings) List of CSS-style color strings (single-band previews only).|  - opacity (number) a number between 0 and 1 for opacity.|  - format (string) Either ""jpg"" or ""png"".|An optional callback. If not supplied, the call is made synchronously."
ee.data.getTableDownloadId	Get a download ID.	ee.data.getTableDownloadId(params, callback)	DownloadId	params|callback	Object|Function, optional	An object containing table download options with the following possible values:|  - format: The download format, CSV or JSON.|  - selectors: Comma separated string of selectors that can be used to determine which attributes will be downloaded.|  - filename: The name of the file that will be downloaded.|An optional callback. If not supplied, the call is made synchronously.
ee.data.getThumbId	Get a Thumbnail Id for a given asset.	ee.data.getThumbId(params, callback)	ThumbnailId	params|callback	ThumbnailOptions|Function, optional	"An object containing thumbnail options with the following possible values:|  - image (ee.Image) The image to make a thumbnail.|  - bands (array of strings) An array of band names.|  - format (string) The file format (""png"", ""jpg"", ""geotiff"").|  - name (string): The base name. Use ee.Image.getThumbURL for region, dimensions, and visualization options support.|An optional callback. If not supplied, the call is made synchronously."
ee.data.getTileUrl	Generate a URL for map tiles from a Map ID and coordinates. If formatTileUrl is not present, we generate it by using or guessing the urlFormat string, and add urlFormat and formatTileUrl to `id` for future use.	ee.data.getTileUrl(id, x, y, z)	String	id|x|y|z	RawMapId|Number|Number|Number	The Map ID to generate tiles for.|The tile x coordinate.|The tile y coordinate.|The tile zoom level.
ee.data.makeDownloadUrl	Create a download URL from a docid and token.	ee.data.makeDownloadUrl(id)	String	id	DownloadId	A download id and token.
ee.data.makeTableDownloadUrl	Create a table download URL from a docid and token.	ee.data.makeTableDownloadUrl(id)	String	id	DownloadId	A table download id and token.
ee.data.makeThumbUrl	Create a thumbnail URL from a thumbid and token.	ee.data.makeThumbUrl(id)	String	id	ThumbnailId	A thumbnail ID and token.
ee.data.newTaskId	Generate an ID for a long-running task.	ee.data.newTaskId(count, callback)	List	count|callback	Number, optional|Function, optional	The number of IDs to generate, one by default.|An optional callback. If not supplied, the call is made synchronously.
ee.data.renameAsset	Renames the asset from sourceId to destinationId.	ee.data.renameAsset(sourceId, destinationId, callback)		sourceId|destinationId|callback	String|String|Function, optional	The ID of the asset to rename.|The new ID of the asset.|An optional callback. If not supplied, the call is made synchronously. The callback is passed an empty object and an error message, if any.
ee.data.setAssetAcl	Sets the access control list of the asset with the given ID.	ee.data.setAssetAcl(assetId, aclUpdate, callback)		assetId|aclUpdate|callback	String|AssetAclUpdate|Function, optional	The ID of the asset to set the ACL on.|The updated ACL.|An optional callback. If not supplied, the call is made synchronously. The callback is passed an empty object.
ee.data.startIngestion	Creates an image asset ingestion task.	ee.data.startIngestion(taskId, request, callback)	ProcessingResponse	taskId|request|callback	String|IngestionRequest|Function, optional	ID for the task (obtained using newTaskId).|The object that describes the ingestion.|An optional callback. If not supplied, the call is made synchronously.
ee.data.startProcessing	Create processing task that exports or pre-renders an image.	ee.data.startProcessing(taskId, params, callback)	ProcessingResponse	taskId|params|callback	String|Object|Function, optional	ID for the task (obtained using newTaskId).|The object that describes the processing task; only fields that are common for all processing types are documented here. type (string) Either 'EXPORT_IMAGE', 'EXPORT_FEATURES', 'EXPORT_VIDEO' or 'EXPORT_TILES'. json (string) JSON description of the image.|An optional callback. If not supplied, the call is made synchronously.
ee.data.startTableIngestion	Creates a table asset ingestion task.	ee.data.startTableIngestion(taskId, request, callback)	ProcessingResponse	taskId|request|callback	String|TableIngestionRequest|Function, optional	ID for the task (obtained using newTaskId).|The object that describes the ingestion.|An optional callback. If not supplied, the call is made synchronously.
ee.data.updateAsset	Updates an asset.	ee.data.updateAsset(assetId, asset, updateFields, callback)	Object	assetId|asset|updateFields|callback	String|api.EarthEngineAsset|List|Function, optional	"The ID of the asset to update.|The updated version of the asset, containing only the new values of the fields to be updated. Only the|""start_time"", ""end_time"", and ""properties"" fields can be updated. If a value is named in ""updateMask"", but is unset in ""asset"", then that value will be deleted from the asset.|A list of the field names to update. This may contain:|""start_time"" or ""end_time"" to update the corresponding timestamp,|""properties.PROPERTY_NAME"" to update a given property, or|""properties"" to update all properties. If the list is empty, all properties and both timestamps will be updated.|An optional callback. If not supplied, the call is made synchronously."
ee.data.updateTask	Update one or more tasks' properties. For now, only the following properties may be updated: State (to CANCELLED)	ee.data.updateTask(taskId, action, callback)	List	taskId|action|callback	List|TaskUpdateActions|Function, optional	ID of the task or an array of multiple task IDs.|Action performed on tasks.|An optional callback. If not supplied, the call is made synchronously.
ee.initialize	Initialize the library.  If this hasn't been called by the time any object constructor is used, it will be called then.  If this is called a second time with a different baseurl or tileurl, this doesn't do an un-initialization of e.g.: the previously loaded Algorithms, but will overwrite them and let point at alternate servers.	ee.initialize(baseurl, tileurl, successCallback, errorCallback, xsrfToken)		baseurl|tileurl|successCallback|errorCallback|xsrfToken	String, optional|String, optional|Function, optional|Function, optional|String, optional	"The (proxied) EarthEngine REST API endpoint.|The (unproxied) EarthEngine REST tile endpoint.|An optional callback to be invoked when the initialization is successful. If not provided, the initialization is done synchronously.|An optional callback to be invoked with an error if the initialization fails.|A string to pass in the ""xsrfToken"" parameter of EE API XHRs."
ee.reset	Reset the library to its base state. Useful for re-initializing to a different server.	ee.reset()
Export.image.toAsset	Creates a batch task to export an Image as a raster to an Earth Engine asset. Tasks can be started from the Tasks tab.	Export.image.toAsset(image, description, assetId, pyramidingPolicy, dimensions, region, scale, crs, crsTransform, maxPixels)		image|description|assetId|pyramidingPolicy|dimensions|region|scale|crs|crsTransform|maxPixels	Image|String, optional|String, optional|Object, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional	"The image to export.|A human-readable name of the task. Defaults to ""myExportImageTask"".|The destination asset ID.|The pyramiding policy to apply to each band in the image, keyed by band name. Values must be one of: mean, sample, min, max, or mode. Defaults to ""mean"". A special key,|"".default"" may be used to change the default for all bands.|The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or|""WIDTHxHEIGHT"" where WIDTH and HEIGHT are each positive integers.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.|Resolution in meters per pixel. Defaults to 1000.|CRS to use for the exported image.|Affine transform to use for the exported image. Requires ""crs"" to be defined.|Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit."
Export.image.toCloudStorage	Creates a batch task to export an Image as a raster to Google Cloud Storage. Tasks can be started from the Tasks tab.	Export.image.toCloudStorage(image, description, bucket, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)		image|description|bucket|fileNamePrefix|dimensions|region|scale|crs|crsTransform|maxPixels|shardSize|fileDimensions|skipEmptyTiles|fileFormat|formatOptions	Image|String, optional|String, optional|String, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional|Number, optional|List, optional|Boolean, optional|String, optional|ImageExportFormatConfig, optional	"The image to export.|A human-readable name of the task. Defaults to ""myExportImageTask"".|The Cloud Storage destination bucket.|The string used as the output's prefix. A trailing ""/"" indicates a path. Defaults to the task's description.|The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or|""WIDTHxHEIGHT"" where WIDTH and HEIGHT are each positive integers.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.|Resolution in meters per pixel. Defaults to 1000.|CRS to use for the exported image.|Affine transform to use for the exported image. Requires ""crs"" to be defined.|Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.|Size in pixels of the shards in which this image will be computed. Defaults to 256.|The dimensions in pixels of each image file, if the image is too large to fit in a single file. May specify a single number to indicate a square shape, or an array of two dimensions to indicate (width,height). Note that the image will still be clipped to the overall image dimensions. Must be a multiple of shardSize.|If true, skip writing empty (i.e. fully-masked) image tiles. Defaults to false.|The string file format to which the image is exported. Currently only 'GeoTIFF' and 'TFRecord' are supported, defaults to 'GeoTIFF'.|A dictionary of string keys to format specific options."
Export.image.toDrive	"Creates a batch task to export an Image as a raster to Drive. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.image.toDrive(image, description, folder, fileNamePrefix, dimensions, region, scale, crs, crsTransform, maxPixels, shardSize, fileDimensions, skipEmptyTiles, fileFormat, formatOptions)		image|description|folder|fileNamePrefix|dimensions|region|scale|crs|crsTransform|maxPixels|shardSize|fileDimensions|skipEmptyTiles|fileFormat|formatOptions	Image|String, optional|String, optional|String, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|List, optional|Number, optional|Number, optional|List, optional|Boolean, optional|String, optional|ImageExportFormatConfig, optional	"The image to export.|A human-readable name of the task. Defaults to ""myExportImageTask"".|The Google Drive Folder that the export will reside in.|The Google Drive filename for the export. Defaults to the description.|The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or|""WIDTHxHEIGHT"" where WIDTH and HEIGHT are each positive integers.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.|Resolution in meters per pixel. Defaults to 1000.|CRS to use for the exported image.|Affine transform to use for the exported image. Requires ""crs"" to be defined.|Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.|Size in pixels of the shards in which this image will be computed. Defaults to 256.|The dimensions in pixels of each image file, if the image is too large to fit in a single file. May specify a single number to indicate a square shape, or an array of two dimensions to indicate (width,height). Note that the image will still be clipped to the overall image dimensions. Must be a multiple of shardSize.|If true, skip writing empty (i.e. fully-masked) image tiles. Defaults to false.|The string file format to which the image is exported. Currently only 'GeoTIFF' and 'TFRecord' are supported, defaults to 'GeoTIFF'.|A dictionary of string keys to format specific options."
Export.map.toCloudStorage	Creates a batch task to export an Image as a rectangular pyramid of map tiles for use with web map viewers. The map tiles will be accompanied by a reference index.html file that displays them using the Google Maps API, and an earth.html file for opening the map on Google Earth.	Export.map.toCloudStorage(image, description, bucket, fileFormat, path, writePublicTiles, maxZoom, scale, minZoom, region, skipEmptyTiles, mapsApiKey, bucketCorsUris)		image|description|bucket|fileFormat|path|writePublicTiles|maxZoom|scale|minZoom|region|skipEmptyTiles|mapsApiKey|bucketCorsUris	Image|String, optional|String, optional|String, optional|String, optional|Boolean, optional|Number, optional|Number, optional|Number, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Boolean, optional|String, optional|List, optional	"The image to export as tiles.|A human-readable name of the task. Defaults to ""myExportMapTask"".|The destination bucket to write to.|The map tiles' file format, one of|""auto"", ""png"", or ""jpg"". Defaults to ""auto"", which means that opaque tiles will be encoded as ""jpg"" and tiles with transparency will be encoded as ""png"".|The string used as the output's path. A trailing ""/"" is optional. Defaults to the task's description.|Whether to write public tiles instead of using the bucket's default object ACL. Defaults to true and requires invoker to be OWNER of bucket.|The maximum zoom level of the map tiles to export.|The max image resolution in meters per pixel, as an alternative to ""maxZoom"". The scale will be converted to the most appropriate maximum zoom level at the equator.|The optional minimum zoom level of the map tiles to export. Defaults to zero.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. Map tiles will be produced in the rectangular region containing this geometry. If not specified, the region defaults to the viewport at the time of invocation.|If true, skip writing empty (i.e. fully-transparent) map tiles. Defaults to false.|Used in index.html to initialize the Google Maps API. This removes the ""development purposes only"" message from the map.|A list of domains (e.g. https://code.earthengine.google.com) that are allowed to retrieve the exported tiles from JavaScript. Setting the tiles to public is not enough to allow them to be accessible by a web page, so you must explicitly give domains access to the bucket. This is known as Cross-Origin-Resource-Sharing, or CORS. You can allow all domains to have access using ""*"", but this is generally discouraged. See https://cloud.google.com/storage/docs/cross-origin for more details."
Export.table.toAsset	Creates a batch task to export a feature collection to an Earth Engine table asset. Tasks can be started from the Tasks tab.	Export.table.toAsset(collection, description, assetId)		collection|description|assetId	FeatureCollection|String, optional|String, optional	"The feature collection to export.|A human-readable name of the task. Defaults to ""myExportTableTask"".|The destination asset ID."
Export.table.toCloudStorage	Creates a batch task to export a FeatureCollection as a table to Google Cloud Storage. Tasks can be started from the Tasks tab.	Export.table.toCloudStorage(collection, description, bucket, fileNamePrefix, fileFormat, selectors)		collection|description|bucket|fileNamePrefix|fileFormat|selectors	FeatureCollection|String, optional|String, optional|String, optional|String, optional|List, optional	"The feature collection to export.|A human-readable name of the task. Defaults to ""myExportTableTask"".|The Cloud Storage destination bucket.|The string used as the output's prefix. A trailing ""/"" indicates a path. Defaults to the description.|The output format: ""CSV"" (default),|""GeoJSON"", ""KML"", ""KMZ"", ""SHP"", or ""TFRecord"".|A list of properties to include in the export; either a single string with comma-separated names or a list of strings."
Export.table.toDrive	Creates a batch task to export a FeatureCollection as a table to Drive. Tasks can be started from the Tasks tab.	Export.table.toDrive(collection, description, folder, fileNamePrefix, fileFormat, selectors)		collection|description|folder|fileNamePrefix|fileFormat|selectors	FeatureCollection|String, optional|String, optional|String, optional|String, optional|List, optional	"The feature collection to export.|A human-readable name of the task. Defaults to ""myExportTableTask"".|The Google Drive Folder that the export will reside in.|The filename prefix. Defaults to the task's description.|The output format: ""CSV"" (default),|""GeoJSON"", ""KML"", ""KMZ"", or ""SHP"", or ""TFRecord"".|A list of properties to include in the export; either a single string with comma-separated names or a list of strings."
Export.video.toCloudStorage	"Creates a batch task to export an ImageCollection as a video to Google Cloud Storage. The collection must only contain RGB images. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.video.toCloudStorage(collection, description, bucket, fileNamePrefix, framesPerSecond, dimensions, region, scale, crs, crsTransform, maxPixels, maxFrames)		collection|description|bucket|fileNamePrefix|framesPerSecond|dimensions|region|scale|crs|crsTransform|maxPixels|maxFrames	ImageCollection|String, optional|String, optional|String, optional|Number, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|String, optional|Number, optional|Number, optional	"The image collection to export.|A human-readable name of the task. Defaults to ""myExportVideoTask"".|The Cloud Storage destination bucket.|The string used as the output's prefix. A trailing ""/"" indicates a path. Defaults to the description.|The framerate of the exported video. Must be a value between 0.1 and 100. Defaults to 1.|The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or|""WIDTHxHEIGHT"" where WIDTH and HEIGHT are each positive integers.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.|Resolution in meters per pixel.|CRS to use for the exported image. Defaults to the Google Maps Mercator projection, SR-ORG:6627.|Affine transform to use for the exported image. Requires ""crs"" to be defined.|Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.|Set the maximum number of frames to export. By default, a maximum of 1000 frames may be exported. By setting this explicitly, you may raise or lower this limit."
Export.video.toDrive	"Creates a batch task to export an ImageCollection as a video to Drive. The collection must only contain RGB images. Tasks can be started from the Tasks tab. ""crsTransform"", ""scale"", and ""dimensions"" are mutually exclusive."	Export.video.toDrive(collection, description, folder, fileNamePrefix, framesPerSecond, dimensions, region, scale, crs, crsTransform, maxPixels, maxFrames)		collection|description|folder|fileNamePrefix|framesPerSecond|dimensions|region|scale|crs|crsTransform|maxPixels|maxFrames	ImageCollection|String, optional|String, optional|String, optional|Number, optional|Number|String, optional|Geometry.LinearRing|Geometry.Polygon|String, optional|Number, optional|String, optional|String, optional|Number, optional|Number, optional	"The image collection to export.|A human-readable name of the task. Defaults to ""myExportVideoTask"".|The Google Drive Folder that the export will reside in.|The filename prefix. Defaults to the description.|The framerate of the exported video. Must be a value between 0.1 and 100. Defaults to 1.|The dimensions to use for the exported image. Takes either a single positive integer as the maximum dimension or|""WIDTHxHEIGHT"" where WIDTH and HEIGHT are each positive integers.|A LinearRing, Polygon, or coordinates representing region to export. These may be specified as the Geometry objects or coordinates serialized as a string. If not specified, the region defaults to the viewport at the time of invocation.|Resolution in meters per pixel.|CRS to use for the exported image. Defaults to the Google Maps Mercator projection, SR-ORG:6627.|Affine transform to use for the exported image. Requires ""crs"" to be defined.|Restrict the number of pixels in the export. By default, you will see an error if the export exceeds 1e8 pixels. Setting this value explicitly allows one to raise or lower this limit.|Set the maximum number of frames to export. By default, a maximum of 1000 frames may be exported. By setting this explicitly, you may raise or lower this limit."
Map.add	Adds an item to the map. Can also be used to add widgets like ui.Label as well as some non-widget objects like ui.Map.Layer.	Map.add(item)	ui.Map	item	Object	The item to add.
Map.addLayer	Adds a given EE object to the map as a layer.	Map.addLayer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	eeObject|visParams|name|shown|opacity	Collection|Feature|Image|MapId|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	"The object to add to the map.|The visualization parameters. For Images and ImageCollection, see ee.data.getMapId for valid parameters. For Features and FeatureCollections, the only supported key is ""color"", as a CSS 3.0 color string or a hex string in ""RRGGBB"" format.|The name of the layer. Defaults to ""Layer N"".|A flag indicating whether the layer should be on by default.|The layer's opacity represented as a number between 0 and 1. Defaults to 1."
Map.centerObject	Centers the map view on a given object.	Map.centerObject(object, zoom)	ui.Map	object|zoom	Element|Geometry|Number, optional	An object to center on - a geometry, image or feature.|The zoom level, from 1 to 24. If unspecified, computed based on the object's bounding box.
Map.clear	Clears the map by removing all layers, listeners, and widgets and restoring the options to their defaults.	Map.clear()	ui.Map
Map.getBounds	Returns the bounds of the current map view, as a list in the format [west, south, east, north] in degrees.	Map.getBounds(asGeoJSON)	GeoJSONGeometry|List|String	asGeoJSON	Boolean, optional	If true, returns map bounds as GeoJSON.
Map.getCenter	Returns the coordinates at the center of the map.	Map.getCenter()	Geometry.Point
Map.getScale	Returns the approximate pixel scale of the current map view, in meters.	Map.getScale()	Number|String
Map.getZoom	Returns the current zoom level of the map.	Map.getZoom()	Number
Map.layers	Returns the list of layers associated with the default map.	Map.layers()	ui.data.ActiveList
Map.onChangeBounds	Registers a callback that's fired when the map bounds change. This is fired during pan, zoom, and when the map's bounds are changed programmatically.	Map.onChangeBounds(callback)	String	callback	Function	The callback to fire when the map bounds change. The callback is passed two parameters: an object containing the coordinates of the new map center (with keys lon, lat, and zoom) and the map widget itself.
Map.onChangeCenter	Registers a callback that's fired when the map center changes. This is fired during pan or when the map's center is changed programmatically.	Map.onChangeCenter(callback)	String	callback	Function	The callback to fire when the map center changes. The callback is passed two parameters: an object containing the coordinates of the new center (with keys lon and lat) and the map widget itself.
Map.onChangeZoom	Registers a callback that's fired when the map zoom level changes.	Map.onChangeZoom(callback)	String	callback	Function	The callback to fire when the map zoom change. The callback is passed two parameters: the new zoom level and the map widget itself.
Map.onClick	Registers a callback that's fired when the map is clicked.	Map.onClick(callback)	String	callback	Function	The callback to fire when the map is clicked.  The callback is passed an object containing the coordinates of the clicked point (with keys lon and lat) and the map widget.
Map.onTileLoaded	Registers a callback that's fired when a map tile has been loaded.	Map.onTileLoaded(callback)	String	callback	Function	Called with an array of per layer values. Each value is the fraction of tiles still pending: a value of 0 means there are no more tiles to load for the layer.
Map.remove	Removes the given item from the map, if it exists.	Map.remove(item)	Object	item	Object	The item to remove.
Map.setCenter	Centers the map view at a given coordinates with the given zoom level.	Map.setCenter(lon, lat, zoom)	ui.Map	lon|lat|zoom	Number|Number|Number, optional	The longitude of the center, in degrees.|The latitude of the center, in degrees.|The zoom level, from 1 to 24.
Map.setControlVisibility	Sets the visibility of the controls on the map.	Map.setControlVisibility(all, layerList, zoomControl, scaleControl, mapTypeControl, fullscreenControl, drawingToolsControl)	ui.Map	all|layerList|zoomControl|scaleControl|mapTypeControl|fullscreenControl|drawingToolsControl	Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional	Whether to show all controls. False hides all controls; true shows all controls. Overridden by individually set parameters. Note that setting this explicitly will affect any additional controls added in the future.|When false, hides the layer list panel or, when true, allows the layer list panel's visiblity to be determined by the presence of layers in the list. The default is to show the list.|Whether the zoom control is visible. Defaults to true.|Whether to show the control which indicates the scale at the map's current zoom level. Defaults to true.|Whether to show the control that allows the user to change the base map. Defaults to true.|Whether to show the control that allows the user to make the map full-screen. Defaults to true.|Whether to show the control that allows the user to add or edit the geometry drawing tools. Defaults to true.
Map.setGestureHandling	Controls how gestures are handled on the map.	Map.setGestureHandling(option)		option	String	"The option that controls how gestures are handled on the map. Allowed values:|  - ""cooperative"": Scroll events and one-finger touch gestures scroll the page, and do not zoom or pan the map. Two-finger touch gestures pan and zoom the map. Scroll events with a ctrl key or ⌘ key pressed zoom the map. In this mode the map cooperates with the page.|  - ""greedy"": All touch gestures and scroll events pan or zoom the map.|  - ""none"": The map cannot be panned or zoomed by user gestures.|  - ""auto"": (default) Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or in an iframe."
Map.setLocked	Sets the lock state of the map. A locked map cannot be zoomed or panned.	Map.setLocked(locked)		locked	Boolean	Whether to lock the map.
Map.setOptions	Modifies the Google Maps basemap.  Allows for:	Map.setOptions(mapTypeId, styles, types)	ui.Map	mapTypeId|styles|types	String, optional|Object, optional|List, optional	"A mapTypeId to set the basemap to. Can be one of ""ROADMAP"", ""SATELLITE"", ""HYBRID"" or ""TERRAIN"" to select one of the standard Google Maps API map types, or one of the keys specified in the opt_styles dictionary. If left as null and only 1 style is specified in opt_styles, that style will be used.|A dictionary of custom MapTypeStyle objects keyed with a name that will appear in the map's Map Type Controls. See: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle|A list of mapTypeIds to make available. If omitted, but opt_styles is specified, appends all of the style keys to the standard Google Maps API map types."
Map.setZoom	Sets the zoom level of the map.	Map.setZoom(zoom)	ui.Map	zoom	Number	The zoom level, from 1 to 24, to set for the map.
Map.style	Returns the Map's style ActiveDictionary, which can be modified to update the Map's styles.	Map.style()	ui.data.ActiveDictionary
Map.unlisten	Deletes callbacks.	Map.unlisten(idOrType)		idOrType	String, optional	Either an ID returned by listen() when a callback was registered, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks registered with that event type are deleted. If nothing is passed, all callbacks are deleted.
Map.widgets	Returns the list of the widgets currently on the map.	Map.widgets()	ui.data.ActiveList
exports	The reserved namespace for exporting objects as module members.	exports()
print	Prints the arguments to the console.	print(var_args)		var_args	VarArgs	The objects to print.
require	Retrieves the script found at a given path as a module. The module is used to access exposed members of the required script.	require(path)	Object	path	String	"The path to the script to include as a module. Paths must be absolute, such as: ""users/homeFolder/repo:path/to/file""."
ui.Button	A clickable button with a text label.	ui.Button(label, onClick, disabled, style)	ui.Button	label|onClick|disabled|style	String, optional|Function, optional|Boolean, optional|Object, optional	The button's label. Defaults to an empty string.|A callback fired when the button is clicked. The callback is passed the button widget.|Whether the button is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. Defaults to an empty object.
ui.Button.getDisabled	Returns whether the button is disabled.	Button.getDisabled()	Boolean	ui.button	ui.Button	The ui.Button instance.
ui.Button.getLabel	Returns the button's label.	Button.getLabel()	String	ui.button	ui.Button	The ui.Button instance.
ui.Button.onClick	Registers a callback that's fired when the button is clicked.	Button.onClick(callback)	String	ui.button|callback	ui.Button|Function	The ui.Button instance.|The callback to fire when the button is clicked. The callback is passed the button widget.
ui.Button.setDisabled	Sets whether the button is disabled.	Button.setDisabled(disabled)	ui.Button	ui.button|disabled	ui.Button|Boolean	The ui.Button instance.|Whether the button is disabled.
ui.Button.setLabel	Sets the button's label.	Button.setLabel(label)	ui.Button	ui.button|label	ui.Button|String	The ui.Button instance.|The button's label.
ui.Button.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Button.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Button.unlisten	Deletes callbacks.	Button.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Chart	A chart widget.	ui.Chart(dataTable, chartType, options, view)	ui.Chart	dataTable|chartType|options|view	List, optional|String, optional|Object, optional|Object, optional	A 2-D array of data or a Google Visualization DataTable literal. See: http://developers.google.com/chart/interactive/docs/reference#DataTable|The chart type; e.g 'ScatterChart',|'LineChart', and 'ColumnChart'. For the complete list of charts, see: https://developers.google.com/chart/interactive/docs/gallery|An object defining chart style options such as:|  - title (string) The title of the chart.|  - colors (Array) An array of colors used to draw the chart. Its format should follow the Google Visualization API's options: https://developers.google.com/chart/interactive/docs/customizing_charts|Sets a DataView initializer object, which acts as a filter over the underlying data. See: https://developers.google.com/chart/interactive/docs/reference#DataView
ui.Chart.array.values	Generates a Chart from an array. Plots separate series for each 1-D vector along the given axis.	ui.Chart.array.values(array, axis, xLabels)	ui.Chart	array|axis|xLabels	Array|List|Number|Array|List, optional	Array to chart.|The axis along which to generate the 1-D vector series.|Labels for ticks along the x-axis of the chart.
ui.Chart.feature.byFeature	Generates a Chart from a set of features. Plots the value of one or more properties for each feature:	ui.Chart.feature.byFeature(features, xProperty, yProperties)	ui.Chart	features|xProperty|yProperties	Feature|FeatureCollection|List|String, optional|List, optional	The features to include in the chart.|The property used as the value of each feature on the x-axis. Defaults to 'system:index'.|Property or properties used on the y-axis. If omitted, all properties of all features will be charted on the y-axis (except xProperty).
ui.Chart.feature.byProperty	Generates a Chart from a set of features. Plots property values of one or more features.	ui.Chart.feature.byProperty(features, xProperties, seriesProperty)	ui.Chart	features|xProperties|seriesProperty	Feature|FeatureCollection|List|List, optional|String, optional	The features to include in the chart.|One of (1) a property to be plotted on the x-axis; (2) a list of properties to be plotted on the x-axis; or (3) a (property, label) dictionary specifying labels for properties to be used as values on the x-axis. If omitted, all properties will be plotted on the x-axis, labeled with their names.|The name of the property used to label each feature in the legend. Defaults to 'system:index'.
ui.Chart.feature.groups	Generates a Chart from a set of features. Plots the value of a given property across groups of features. Features with the same value of groupProperty will be grouped and plotted as a single series.	ui.Chart.feature.groups(features, xProperty, yProperty, seriesProperty)	ui.Chart	features|xProperty|yProperty|seriesProperty	Feature|FeatureCollection|List|String|String|String	The features to include in the chart.|Property to be used as the label for each feature on the x-axis.|Property to be plotted on the y-axis.|Property used to determine feature groups. Features with the same value of groupProperty will be plotted as a single series on the chart.
ui.Chart.feature.histogram	Generates a Chart from a set of features. Computes and plots a histogram of the given property.	ui.Chart.feature.histogram(features, property, maxBuckets, minBucketWidth, maxRaw)	ui.Chart	features|property|maxBuckets|minBucketWidth|maxRaw	Feature|FeatureCollection|List|String|Number, optional|Number, optional|Number, optional	The features to include in the chart.|The name of the property to generate the histogram for.|The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2. Not used when the value of property is non-numeric.|The minimum histogram bucket width, or null to allow any power of 2. Not used when property is non-numeric.|The number of values to accumulate before building the initial histogram. Not used when property is non-numeric.
ui.Chart.getChartType	Returns this chart's type; e.g 'ScatterChart', 'LineChart', and 'ColumnChart'. For the complete list of charts, see: https://developers.google.com/chart/interactive/docs/gallery	Chart.getChartType()	String	ui.chart	ui.Chart	The ui.Chart instance.
ui.Chart.getDataTable	Returns the DataTable containing data for this chart. See: http://developers.google.com/chart/interactive/docs/reference#DataTable	Chart.getDataTable()	Object	ui.chart	ui.Chart	The ui.Chart instance.
ui.Chart.getOptions	Returns this chart's options. See: https://developers.google.com/chart/interactive/docs/customizing_charts	Chart.getOptions()	Object	ui.chart	ui.Chart	The ui.Chart instance.
ui.Chart.getView	Returns this chart's DataView initializer object, which acts as a filter over the underlying data in the chart. See: https://developers.google.com/chart/interactive/docs/reference#DataView	Chart.getView()	Object	ui.chart	ui.Chart	The ui.Chart instance.
ui.Chart.image.byClass	Generates a Chart from an image. Plots derived band values in classified regions in an image.	ui.Chart.image.byClass(image, classBand, region, reducer, scale, classLabels, xLabels)	ui.Chart	image|classBand|region|reducer|scale|classLabels|xLabels	Image|Number|String|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|List., optional|List, optional	Classified image to derive band values from.|The class label band in this image.|The region to reduce. If omitted, uses the entire image.|Reducer that generates the value(s) for the y-axis. Must return a single value per band. Defaults to ee.Reducer.mean().|Scale to use with the reducer in meters.|A dictionary of labels used to identify classes in the series legend. If omitted, classes will be labeled with the value of classBand.|A list of labels used to label bands on the xAxis. Must have one fewer elements than the number of image bands. If omitted, bands will be labeled with their names. If the labels are numeric (e.g. wavelengths), x-axis will be continuous.
ui.Chart.image.byRegion	Generates a Chart from an image. Extracts and plots band values in one or more regions in the image, with each band in a separate series.	ui.Chart.image.byRegion(image, regions, reducer, scale, xProperty)	ui.Chart	image|regions|reducer|scale|xProperty	Image|Feature|FeatureCollection|Geometry|List, optional|Reducer, optional|Number, optional|String, optional	Image to extract band values from.|Regions to reduce. Defaults to the image's footprint.|Reducer that generates the value(s) for the y-axis. Must return a single value per band. Defaults to ee.Reducer.mean().|Scale to use with the reducer in meters.|Property to be used as the label for each Region on the x-axis. Defaults to 'system:index'.
ui.Chart.image.doySeries	Generates a Chart from an ImageCollection. Plots derived values of each band in a region for a each day of the year.	ui.Chart.image.doySeries(imageCollection, region, regionReducer, scale, yearReducer, startDay, endDay)	ui.Chart	imageCollection|region|regionReducer|scale|yearReducer|startDay|endDay	ImageCollection|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|Reducer, optional|Number, optional|Number, optional	The ImageCollection to chart.|The region to reduce. Defaults to the union of all geometries in the image collection.|Reducer for aggregating band values within the region. Must return a single value. Defaults to ee.Reducer.mean().|Scale to use with the region reducer in meters.|Reducer for aggregating regionReducer outputs across years (for a given day). Must return a single value. Defaults to ee.Reducer.mean().|Day of year to start the series. Must be between 1 and 366.|Day of year to end the series. Must be between startDay and 366.
ui.Chart.image.doySeriesByRegion	Generates a Chart from an ImageCollection. Plots the derived value of the given band in different regions at each day-of-year.	ui.Chart.image.doySeriesByRegion(imageCollection, bandName, regions, regionReducer, scale, yearReducer, seriesProperty, startDay, endDay)	ui.Chart	imageCollection|bandName|regions|regionReducer|scale|yearReducer|seriesProperty|startDay|endDay	ImageCollection|Number|String|Feature|FeatureCollection|Geometry|List|Reducer, optional|Number, optional|Reducer, optional|String, optional|Number, optional|Number, optional	The ImageCollection to chart.|The name of the band to chart.|The regions to reduce.|Reducer for aggregating band values within the region. Must return a single value. Defaults to ee.Reducer.mean().|Scale to use with the region reducer in meters.|Reducer for aggregating band values across years (for a given day of year). Must return a single value. Defaults to ee.Reducer.mean().|Property of features in opt_regions to be used for series labels. Defaults to 'system:index'.|Day of year to start the series. Must be between 1 and 366.|Day of year to end the series. Must be between startDay and 366.
ui.Chart.image.doySeriesByYear	Generates a Chart from an ImageCollection. Plots the derived value of the given band in a region for each day-of-year across different years.	ui.Chart.image.doySeriesByYear(imageCollection, bandName, region, regionReducer, scale, sameDayReducer, startDay, endDay)	ui.Chart	imageCollection|bandName|region|regionReducer|scale|sameDayReducer|startDay|endDay	ImageCollection|Number|String|Feature|FeatureCollection|Geometry, optional|Reducer, optional|Number, optional|Reducer, optional|Number, optional|Number, optional	The ImageCollection to chart.|The name of the band to chart.|The region to reduce. Defaults to the union of all geometries in the image collection.|Reducer for aggregating band values within the region. Must return a single value. Defaults to ee.Reducer.mean().|Scale to use with the region reducer in meters.|Reducer for aggregating band values across images with the same (DoY, year) pair. Must return a single value. Defaults to ee.Reducer.mean().|Day of year to start the series. Must be between 1 and 366.|Day of year to end the series. Must be between startDay and 366.
ui.Chart.image.histogram	Generates a Chart from an image. Computes and plots histograms of the values of the bands in the specified region of the image.	ui.Chart.image.histogram(image, region, scale, maxBuckets, minBucketWidth, maxRaw)	ui.Chart	image|region|scale|maxBuckets|minBucketWidth|maxRaw	Image|Feature|FeatureCollection|Geometry, optional|Number, optional|Number, optional|Number, optional|Number, optional	The image to generate a histogram from.|The region to reduce. If omitted, uses the entire image.|The pixel scale used when applying the histogram reducer, in meters.|The maximum number of buckets to use when building a histogram; will be rounded up to a power of 2.|The minimum histogram bucket width, or null to allow any power of 2.|The number of values to accumulate before building the initial histogram.
ui.Chart.image.regions	Generates a Chart from an image. Extracts and plots the value of each band in one or more regions.	ui.Chart.image.regions(image, regions, reducer, scale, seriesProperty, xLabels)	ui.Chart	image|regions|reducer|scale|seriesProperty|xLabels	Image|Feature|FeatureCollection|Geometry|List, optional|Reducer, optional|Number, optional|String, optional|List, optional	Image to extract band values from.|Regions to reduce. Defaults to the image's footprint.|Reducer that generates the value(s) for the y-axis. Must return a single value per band.|The pixel scale in meters.|Property to be used as the label for each region in the legend. Defaults to 'system:index'.|A list of labels used for bands on the x-axis. Must have the same number of elements as the image bands. If omitted, bands will be labeled with their names. If the labels are numeric (e.g. wavelengths), x-axis will be continuous.
ui.Chart.image.series	Generates a Chart from an ImageCollection. Plots derived values of each band in a region across images. Usually a time series.	ui.Chart.image.series(imageCollection, region, reducer, scale, xProperty)	ui.Chart	imageCollection|region|reducer|scale|xProperty	ImageCollection|Feature|FeatureCollection|Geometry|Reducer, optional|Number, optional|String, optional	An ImageCollection with data to be included in the chart.|The region to reduce.|Reducer that generates the values for the y-axis. Must return a single value. Defaults to ee.Reducer.mean().|Scale to use with the reducer in meters.|Property to be used as the label for each image on the x-axis. Defaults to 'system:time_start'.
ui.Chart.image.seriesByRegion	Generates a Chart from an image collection. Extracts and plots the value of the specified band in each region for each image in the collection. Usually a time series.	ui.Chart.image.seriesByRegion(imageCollection, regions, reducer, band, scale, xProperty, seriesProperty)	ui.Chart	imageCollection|regions|reducer|band|scale|xProperty|seriesProperty	ImageCollection|Feature|FeatureCollection|Geometry|List|Reducer|Number|String, optional|Number, optional|String, optional|String, optional	An ImageCollection with data to be included in the chart.|The regions to reduce.|Reducer that generates the value for the y-axis. Must return a single value.|The band name to reduce using the reducer. Defaults to the first band.|Scale to use with the reducer in meters.|Property to be used as the label for each image on the x-axis. Defaults to 'system:time_start'.|Property of features in opt_regions to be used for series labels. Defaults to 'system:index'.
ui.Chart.onClick	Registers a callback that's fired when the chart is clicked.	Chart.onClick(callback)	String	ui.chart|callback	ui.Chart|Function	"The ui.Chart instance.|The callback to fire when the chart is clicked. The callback is passed three arguments: the x-value, the y-value, and the series name. Time values are represented in UTC epoch milliseconds, like ""system:time_start"" values on assets. If the user clicks on a legend entry to select an entire series, the x- and y-values are null. If the user clicks an already-selected point, all arguments are null, indicating the selection was cleared."
ui.Chart.setChartType	Sets the chartType of this chart.	Chart.setChartType(chartType)	ui.Chart	ui.chart|chartType	ui.Chart|String	The ui.Chart instance.|The chart type; e.g 'ScatterChart', 'LineChart', and 'ColumnChart'. For the complete list of charts, see: https://developers.google.com/chart/interactive/docs/gallery
ui.Chart.setDataTable	Sets the DataTable containing data for this chart.	Chart.setDataTable(dataTable)	ui.Chart	ui.chart|dataTable	ui.Chart|List	The ui.Chart instance.|A 2-D array of data to chart or a Google Visualization DataTable literal. See: http://developers.google.com/chart/interactive/docs/reference#DataTable
ui.Chart.setOptions	Sets options used to style this chart.	Chart.setOptions(options)	ui.Chart	ui.chart|options	ui.Chart|Object	The ui.Chart instance.|An object defining chart style options such as:|  - title (string) The title of the chart.|  - colors (Array) An array of colors used to draw the chart. Its format should follow the Google Visualization API's options: https://developers.google.com/chart/interactive/docs/customizing_charts
ui.Chart.setSeriesNames	Returns a copy of this chart with updated series names.	Chart.setSeriesNames(seriesNames, seriesIndex)	ui.Chart	ui.chart|seriesNames|seriesIndex	ui.Chart|Dictionary|Dictionary|Number, optional	The ui.Chart instance.|New series names. If it's a string, the name of the series at seriesIndex is set to seriesNames. If it's a list, the value at index i in the list is used as a label for series number i. If it's a dictionary or an object, it's treated as a map from existing series names to new series names. In the last two cases, seriesIndex is ignored.|The index of the series to rename. Ignored if seriesNames is a list or dictionary. Series are 0-indexed.
ui.Chart.setView	Sets a view for this chart.	Chart.setView(view)	ui.Chart	ui.chart|view	ui.Chart|Object	The ui.Chart instance.|A DataView initializer object, which acts as a filter over the underlying data in the chart. See: https://developers.google.com/chart/interactive/docs/reference#DataView
ui.Chart.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Chart.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Chart.unlisten	Deletes callbacks.	Chart.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Checkbox	A checkbox with a label.	ui.Checkbox(label, value, onChange, disabled, style)	ui.Checkbox	label|value|onChange|disabled|style	String, optional|Boolean, optional|Function, optional|Boolean, optional|Object, optional	The checkbox's label. Defaults to an empty string.|Whether the checkbox is checked. A null value indicates that the checkbox is in an indeterminate state. Defaults to false.|A callback to fire when the value of the checkbox changes. The callback is passed a boolean indicating whether the checkbox is now checked and the checkbox widget.|Whether the checkbox is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation.
ui.Checkbox.getDisabled	Returns whether the checkbox is disabled.	Checkbox.getDisabled()	Boolean	ui.checkbox	ui.Checkbox	The ui.Checkbox instance.
ui.Checkbox.getValue	Returns whether the checkbox is checked. A null value indicates the checkbox is in an indeterminate state.	Checkbox.getValue()	Boolean	ui.checkbox	ui.Checkbox	The ui.Checkbox instance.
ui.Checkbox.onChange	Registers a callback that's fired when the value of the checkbox changes.	Checkbox.onChange(callback)	String	ui.checkbox|callback	ui.Checkbox|Function	The ui.Checkbox instance.|The callback to fire when the value of the checkbox changes. The callback is passed a boolean indicating whether the checkbox is now checked and the checkbox widget.
ui.Checkbox.setDisabled	Sets whether the checkbox is disabled.	Checkbox.setDisabled(disabled)	ui.Checkbox	ui.checkbox|disabled	ui.Checkbox|Boolean	The ui.Checkbox instance.|Whether the checkbox is disabled.
ui.Checkbox.setValue	Sets whether the checkbox is checked.	Checkbox.setValue(value, trigger)	ui.Checkbox	ui.checkbox|value|trigger	ui.Checkbox|Boolean|Boolean, optional	The ui.Checkbox instance.|Whether the checkbox is checked. A null value indicates the checkbox is in an indeterminate state.|Whether to trigger onChange callbacks when the checked property changes. Defaults to true.
ui.Checkbox.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Checkbox.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Checkbox.unlisten	Deletes callbacks.	Checkbox.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.DateSlider	A draggable target that ranges linearly between two dates. The date slider can be configured to display dates of various interval sizes, including day, 8-day, and year. The value of the slider is displayed as a label alongside it.	ui.DateSlider(start, end, value, period, onChange, disabled, style)	ui.DateSlider	start|end|value|period|onChange|disabled|style	Number|String, optional|Number|String, optional|Number|String, optional|Number, optional|Function, optional|Boolean, optional|Object, optional	The start date, as either a UTC timestamp or a date string. Defaults to one week ago.|The end date, as either a UTC timestamp or a date string. Defaults to today.|The initial value. The value is an array consisting of the start and end date for the selected date range, but for convenience, it can be set by specifying the start date alone. Defaults to yesterday.|The interval size for values on the slider in days. Defaults to one.|A callback to fire when the slider's state changes. The callback is passed an ee.DateRange representing the slider's current value and the slider widget.|Whether the slider is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. Defaults to an empty object.
ui.DateSlider.getDisabled	Returns whether the slider is disabled.	DateSlider.getDisabled()	Boolean	ui.dateslider	ui.DateSlider	The ui.DateSlider instance.
ui.DateSlider.getEnd	Returns the slider's end date as a UTC timestamp.	DateSlider.getEnd()	Number	ui.dateslider	ui.DateSlider	The ui.DateSlider instance.
ui.DateSlider.getPeriod	Returns the slider's period interval.	DateSlider.getPeriod()	Number	ui.dateslider	ui.DateSlider	The ui.DateSlider instance.
ui.DateSlider.getStart	Returns the slider's start date as a UTC timestamp.	DateSlider.getStart()	Number	ui.dateslider	ui.DateSlider	The ui.DateSlider instance.
ui.DateSlider.getValue	Returns the slider's current value, and array with the start and end datetimes as epoch UTC timestamps.	DateSlider.getValue()	List	ui.dateslider	ui.DateSlider	The ui.DateSlider instance.
ui.DateSlider.onChange	Registers a callback that's fired when the slider's value changes.	DateSlider.onChange(callback)	String	ui.dateslider|callback	ui.DateSlider|Function	The ui.DateSlider instance.|The callback to fire when the slider's state changes. The callback is passed an ee.DateRange representing the slider's current value and the slider widget.
ui.DateSlider.setDisabled	Sets whether the slider is disabled.	DateSlider.setDisabled(disabled)	ui.DateSlider	ui.dateslider|disabled	ui.DateSlider|Boolean	The ui.DateSlider instance.|Whether the slider is disabled.
ui.DateSlider.setEnd	Sets the end date of the slider.	DateSlider.setEnd(value)	ui.DateSlider	ui.dateslider|value	ui.DateSlider|Number|String	The ui.DateSlider instance.|The slider's end date.
ui.DateSlider.setPeriod	Sets the period interval of the slider.	DateSlider.setPeriod(value)	ui.DateSlider	ui.dateslider|value	ui.DateSlider|Number	The ui.DateSlider instance.|The slider's period interval.
ui.DateSlider.setStart	Sets the start date of the slider.	DateSlider.setStart(start)	ui.DateSlider	ui.dateslider|start	ui.DateSlider|Number|String	The ui.DateSlider instance.|The start date. Defaults to one week ago.
ui.DateSlider.setValue	Set the value of the slider.	DateSlider.setValue(value, trigger)	ui.DateSlider	ui.dateslider|value|trigger	ui.DateSlider|Number|String|Boolean, optional	The ui.DateSlider instance.|The value to set on the slider.|Whether to trigger onChange callbacks when the value property changes. Defaults to true.
ui.DateSlider.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	DateSlider.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.DateSlider.unlisten	Deletes callbacks.	DateSlider.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Label	A text label.	ui.Label(value, style, targetUrl)	ui.Label	value|style|targetUrl	String, optional|Object, optional|String, optional	The text to display. Defaults to an empty string.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation.|The url to link to. Defaults to an empty string.
ui.Label.getUrl	Returns the url of the label if it exists.	Label.getUrl()	String	ui.label	ui.Label	The ui.Label instance.
ui.Label.getValue	Returns the value of the label.	Label.getValue()	String	ui.label	ui.Label	The ui.Label instance.
ui.Label.setUrl	Sets the url of the label, which will cause it to render as a link.	Label.setUrl(targetUrl)	ui.Label	ui.label|targetUrl	ui.Label|String	The ui.Label instance.|The url of the hyperlink.
ui.Label.setValue	Sets the value of the label.	Label.setValue(value)	ui.Label	ui.label|value	ui.Label|String	The ui.Label instance.|The value of the label.
ui.Label.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Label.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Map	A Google map.	ui.Map(center, onClick, style)	ui.Map	center|onClick|style	Object, optional|Function, optional|Object, optional	An object containing the latitude ('lat'), longitude ('lon') and optionally the zoom level ('zoom') for the map.|A callback fired when the map is clicked. The callback is passed an object containing the coordinates of the clicked point on the map (with keys lon and lat) and the map widget itself.|An object of whitelisted CSS styles with their values to be set for this map. See style() documentation.
ui.Map.CloudStorageLayer	A layer generated from Cloud Storage tiles for display on a ui.Map.	ui.Map.CloudStorageLayer(bucket, path, maxZoom, suffix, name, shown, opacity)	ui.Map.CloudStorageLayer	bucket|path|maxZoom|suffix|name|shown|opacity	String|String|Number|String, optional|String, optional|Boolean, optional|Number, optional	"The bucket that contains the tiles.|The path to this layer's tiles, relative to the bucket. A trailing ""/"" is optional.|The maximum zoom level for which there are tiles.|The tile source file suffix, if any.|The name of the layer.|Whether the layer is initially shown. Defaults to true.|The layer's opacity represented as a number between 0 and 1. Defaults to 1."
ui.Map.CloudStorageLayer.getBucket	Returns the name of this layer's bucket.	CloudStorageLayer.getBucket()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	The ui.Map.CloudStorageLayer instance.
ui.Map.CloudStorageLayer.getMaxZoom	Returns the maximum zoom level of this layer's tileset.	CloudStorageLayer.getMaxZoom()	Number	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	The ui.Map.CloudStorageLayer instance.
ui.Map.CloudStorageLayer.getName	Returns the name of the layer.	CloudStorageLayer.getName()	String	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.CloudStorageLayer.getOpacity	Returns the layer's opacity represented as a number between 0 and 1.	CloudStorageLayer.getOpacity()	Number	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.CloudStorageLayer.getPath	Returns the path within the bucket to the tiles.	CloudStorageLayer.getPath()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	The ui.Map.CloudStorageLayer instance.
ui.Map.CloudStorageLayer.getShown	Returns whether the layer is shown.	CloudStorageLayer.getShown()	Boolean	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.CloudStorageLayer.getSuffix	Returns the suffix for this layer's tile files.	CloudStorageLayer.getSuffix()	String	ui.map.cloudstoragelayer	ui.Map.CloudStorageLayer	The ui.Map.CloudStorageLayer instance.
ui.Map.CloudStorageLayer.setBucket	Sets the bucket for this layer.	CloudStorageLayer.setBucket(bucket)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|bucket	ui.Map.CloudStorageLayer|String	The ui.Map.CloudStorageLayer instance.|The name of the Cloud Storage bucket with this layer's tiles.
ui.Map.CloudStorageLayer.setMaxZoom	Sets the maximum zoom level for tiles. When the user zooms in beyond this level, the parent tile at this level will be fetched and zoomed on the client.	CloudStorageLayer.setMaxZoom(maxZoom)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|maxZoom	ui.Map.CloudStorageLayer|Number	The ui.Map.CloudStorageLayer instance.|The maximum zoom level with tiles.
ui.Map.CloudStorageLayer.setName	Sets the name of the layer.	CloudStorageLayer.setName(name)	ui.Map.AbstractLayer	ui.map.abstractlayer|name	ui.Map.AbstractLayer|String, optional	The ui.Map.AbstractLayer instance.|The name of the layer.
ui.Map.CloudStorageLayer.setOpacity	Sets the opacity of the layer.	CloudStorageLayer.setOpacity(opacity)	ui.Map.AbstractLayer	ui.map.abstractlayer|opacity	ui.Map.AbstractLayer|Number, optional	The ui.Map.AbstractLayer instance.|The layer's opacity represented as a number between 0 and 1.
ui.Map.CloudStorageLayer.setPath	Sets the location of the folder from which the layer will retrieve its tiles.	CloudStorageLayer.setPath(path)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|path	ui.Map.CloudStorageLayer|String	The ui.Map.CloudStorageLayer instance.|The path to this layer's tiles, relative to the bucket.
ui.Map.CloudStorageLayer.setShown	Sets the visibility of the layer.	CloudStorageLayer.setShown(shown)	ui.Map.AbstractLayer	ui.map.abstractlayer|shown	ui.Map.AbstractLayer|Boolean, optional	The ui.Map.AbstractLayer instance.|Whether the layer is shown.
ui.Map.CloudStorageLayer.setSuffix	Sets the CloudStorageLayer's file suffix.	CloudStorageLayer.setSuffix(suffix)	ui.Map.CloudStorageLayer	ui.map.cloudstoragelayer|suffix	ui.Map.CloudStorageLayer|String	"The ui.Map.CloudStorageLayer instance.|The suffix for the tile files, for example "".png""."
ui.Map.Layer	A layer generated from an Earth Engine object for display on a ui.Map.	ui.Map.Layer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	eeObject|visParams|name|shown|opacity	Collection|Feature|Image, optional|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	The object to add to the map. Defaults to an empty ee.Image.|The visualization parameters. See ee.data.getMapId() docs.|The name of the layer.|Whether the layer is initially shown. Defaults to true.|The layer's opacity represented as a number between 0 and 1. Defaults to 1.
ui.Map.Layer.getEeObject	Returns the layer's ee.Object.	Layer.getEeObject()	Collection|Feature|Image	ui.map.layer	ui.Map.Layer	The ui.Map.Layer instance.
ui.Map.Layer.getName	Returns the name of the layer.	Layer.getName()	String	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.Layer.getOpacity	Returns the layer's opacity represented as a number between 0 and 1.	Layer.getOpacity()	Number	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.Layer.getShown	Returns whether the layer is shown.	Layer.getShown()	Boolean	ui.map.abstractlayer	ui.Map.AbstractLayer	The ui.Map.AbstractLayer instance.
ui.Map.Layer.getVisParams	Returns the layer's visualization parameters.	Layer.getVisParams()	FeatureVisualizationParameters|ImageVisualizationParameters	ui.map.layer	ui.Map.Layer	The ui.Map.Layer instance.
ui.Map.Layer.setEeObject	Sets the layer's ee.Object.	Layer.setEeObject(eeObject)	ui.Map.Layer	ui.map.layer|eeObject	ui.Map.Layer|Collection|Feature|Image, optional	The ui.Map.Layer instance.|The object to add to the map. Defaults to an empty ee.Image.
ui.Map.Layer.setName	Sets the name of the layer.	Layer.setName(name)	ui.Map.AbstractLayer	ui.map.abstractlayer|name	ui.Map.AbstractLayer|String, optional	The ui.Map.AbstractLayer instance.|The name of the layer.
ui.Map.Layer.setOpacity	Sets the opacity of the layer.	Layer.setOpacity(opacity)	ui.Map.AbstractLayer	ui.map.abstractlayer|opacity	ui.Map.AbstractLayer|Number, optional	The ui.Map.AbstractLayer instance.|The layer's opacity represented as a number between 0 and 1.
ui.Map.Layer.setShown	Sets the visibility of the layer.	Layer.setShown(shown)	ui.Map.AbstractLayer	ui.map.abstractlayer|shown	ui.Map.AbstractLayer|Boolean, optional	The ui.Map.AbstractLayer instance.|Whether the layer is shown.
ui.Map.Layer.setVisParams	Sets the layer's visualization parameters.	Layer.setVisParams(visParams)	ui.Map.Layer	ui.map.layer|visParams	ui.Map.Layer|FeatureVisualizationParameters|ImageVisualizationParameters, optional	The ui.Map.Layer instance.|The visualization parameters. See ee.data.getMapId() docs.
ui.Map.Linker	A utility for creating linked maps.	ui.Map.Linker(maps, event)	ui.Map.Linker	maps|event	List, optional|String, optional	"A list of maps to link.|The event to link across the maps. Defaults to|""change-bounds"". Possible events comprise:|  - change-bounds|  - change-center|  - change-zoom"
ui.Map.Linker.add	Appends an element to the list.	Linker.add(el)	ui.data.ActiveList	ui.data.activelist|el	ui.data.ActiveList|Object	The ui.data.ActiveList instance.|The element to add.
ui.Map.Linker.forEach	Iterates over each element, calling the provided callback. The callback is called for each element like: callback(element, index).	Linker.forEach(callback)		ui.data.activelist|callback	ui.data.ActiveList|Function	The ui.data.ActiveList instance.|
ui.Map.Linker.get	Returns the element at the specified index.	Linker.get(index)	Object	ui.data.activelist|index	ui.data.ActiveList|Number	The ui.data.ActiveList instance.|The index of the element to return.
ui.Map.Linker.getJsArray	Returns the list as a JS array.	Linker.getJsArray()	List	ui.data.activelist	ui.data.ActiveList	The ui.data.ActiveList instance.
ui.Map.Linker.insert	Inserts an element at the specified index and shifts the rest of the list. If the specified index is greater than the length of the list, the element will be appended to the list.	Linker.insert(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	The ui.data.ActiveList instance.|The index at which to insert the element.|The element to insert.
ui.Map.Linker.length	Returns the number of elements in the list.	Linker.length()	Number	ui.data.activelist	ui.data.ActiveList	The ui.data.ActiveList instance.
ui.Map.Linker.remove	Removes the specified element from the list.	Linker.remove(el)	Object	ui.data.activelist|el	ui.data.ActiveList|Object	The ui.data.ActiveList instance.|The element to remove.
ui.Map.Linker.reset	Replaces all elements in list with a new list or, if no list is provided, removes all elements from list.	Linker.reset(list)	List	ui.data.activelist|list	ui.data.ActiveList|List, optional	The ui.data.ActiveList instance.|A list of elements.
ui.Map.Linker.set	Sets an element at the specified index. If the index exceeds that of the list's last element, the element will be added to the end of the list.	Linker.set(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	The ui.data.ActiveList instance.|The index to overwrite.|The element to set.
ui.Map.add	Adds an item to the map. Can also be used to add widgets like ui.Label as well as some non-widget objects like ui.Map.Layer.	Map.add(item)	ui.Map	ui.map|item	ui.Map|Object	The ui.Map instance.|The item to add.
ui.Map.addLayer	Adds a given EE object to the map as a layer.	Map.addLayer(eeObject, visParams, name, shown, opacity)	ui.Map.Layer	ui.map|eeObject|visParams|name|shown|opacity	ui.Map|Collection|Feature|Image|MapId|FeatureVisualizationParameters|ImageVisualizationParameters, optional|String, optional|Boolean, optional|Number, optional	"The ui.Map instance.|The object to add to the map.|The visualization parameters. For Images and ImageCollection, see ee.data.getMapId for valid parameters. For Features and FeatureCollections, the only supported key is ""color"", as a 6-character hex string in the RRGGBB format.|The name of the layer. Defaults to ""Layer N"".|A flag indicating whether the layer should be on by default.|The layer's opacity represented as a number between 0 and 1. Defaults to 1."
ui.Map.centerObject	Centers the map view on a given object.	Map.centerObject(object, zoom)	ui.Map	ui.map|object|zoom	ui.Map|Element|Geometry|Number, optional	The ui.Map instance.|An object to center on - a geometry, image or feature.|The zoom level, from 1 to 24. If unspecified, computed based on the object's bounding box.
ui.Map.clear	Clears the map by removing all layers, listeners, and widgets and restoring the options to their defaults.	Map.clear()	ui.Map	ui.map	ui.Map	The ui.Map instance.
ui.Map.getBounds	Returns the bounds of the current map view, as a list in the format [west, south, east, north] in degrees.	Map.getBounds(asGeoJSON)	GeoJSONGeometry|List|String	ui.map|asGeoJSON	ui.Map|Boolean, optional	The ui.Map instance.|If true, returns map bounds as GeoJSON.
ui.Map.getCenter	Returns the coordinates at the center of the map.	Map.getCenter()	Geometry.Point	ui.map	ui.Map	The ui.Map instance.
ui.Map.getScale	Returns the approximate pixel scale of the current map view, in meters.	Map.getScale()	Number|String	ui.map	ui.Map	The ui.Map instance.
ui.Map.getZoom	Returns the current zoom level of the map.	Map.getZoom()	Number	ui.map	ui.Map	The ui.Map instance.
ui.Map.insert	Inserts a widget into to the panel at the specified index.	Map.insert(index, widget)	ui.Panel	ui.panel|index|widget	ui.Panel|Number|ui.Widget	The ui.Panel instance.|The index at which to insert the widget.|The widget to insert.
ui.Map.layers	Returns the list of layers associated with the map.	Map.layers()	ui.data.ActiveList	ui.map	ui.Map	The ui.Map instance.
ui.Map.onChangeBounds	Registers a callback that's fired when the map bounds change. This is fired during pan, zoom, and when the map's bounds are changed programmatically.	Map.onChangeBounds(callback)	String	ui.map|callback	ui.Map|Function	The ui.Map instance.|The callback to fire when the map bounds change. The callback is passed two parameters: an object containing the coordinates of the new map center (with keys lon, lat, and zoom) and the map widget itself.
ui.Map.onChangeCenter	Registers a callback that's fired when the map center changes. This is fired during pan or when the map's center is changed programmatically.	Map.onChangeCenter(callback)	String	ui.map|callback	ui.Map|Function	The ui.Map instance.|The callback to fire when the map center changes. The callback is passed two parameters: an object containing the coordinates of the new center (with keys lon and lat) and the map widget itself.
ui.Map.onChangeZoom	Registers a callback that's fired when the map zoom level changes.	Map.onChangeZoom(callback)	String	ui.map|callback	ui.Map|Function	The ui.Map instance.|The callback to fire when the map zoom change. The callback is passed two parameters: the new zoom level and the map widget itself.
ui.Map.onClick	Registers a callback that's fired when the map is clicked.	Map.onClick(callback)	String	ui.map|callback	ui.Map|Function	The ui.Map instance.|The callback to fire when the map is clicked. The callback is passed an object containing the coordinates of the clicked point on the map (with keys lon and lat) and the map widget itself.
ui.Map.onTileLoaded	Registers a callback that's fired when a map tile has been loaded.	ui.Map.onTileLoaded(callback)	String	callback	Function	Called with an array of per layer values. Each value is the fraction of tiles still pending: a value of 0 means there are no more tiles to load for the layer.
ui.Map.remove	Removes the given item from the map, if it exists.	Map.remove(item)	Object	ui.map|item	ui.Map|Object	The ui.Map instance.|The item to remove.
ui.Map.setCenter	Centers the map view at the given coordinates with the given zoom level. If no zoom level is provided, it uses the most recent zoom level on the map.	Map.setCenter(lon, lat, zoom)	ui.Map	ui.map|lon|lat|zoom	ui.Map|Number|Number|Number, optional	The ui.Map instance.|The longitude of the center, in degrees.|The latitude of the center, in degrees.|The zoom level, from 1 to 24.
ui.Map.setControlVisibility	Sets the visibility of the controls on the map.	Map.setControlVisibility(all, layerList, zoomControl, scaleControl, mapTypeControl, fullscreenControl, drawingToolsControl)	ui.Map	ui.map|all|layerList|zoomControl|scaleControl|mapTypeControl|fullscreenControl|drawingToolsControl	ui.Map|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional|Boolean, optional	The ui.Map instance.|Whether to show all controls. False hides all controls; true shows all controls. Overridden by individually set parameters. Note that setting this explicitly will affect any additional controls added in the future.|When false, hides the layer list panel or, when true, allows the layer list panel's visibility to be determined by the presence of layers in the list. The default is to show the list.|Whether the zoom control is visible. Defaults to true.|Whether to show the control which indicates the scale at the map's current zoom level. Defaults to true.|Whether to show the control that allows the user to change the base map. Defaults to true.|Whether to show the control that allows the user to make the map full-screen. Defaults to true.|Whether to show the control that allows the user to add or edit the geometry drawing tools. Defaults to true if the drawing tools were previously added to the map. Ignored if the drawing tools were not previously added to the map.
ui.Map.setGestureHandling	Controls how gestures are handled on the map.	Map.setGestureHandling(option)		ui.map|option	ui.Map|String	"The ui.Map instance.|The option that controls how gestures are handled on the map. Allowed values:|  - ""cooperative"": Scroll events and one-finger touch gestures scroll the page, and do not zoom or pan the map. Two-finger touch gestures pan and zoom the map. Scroll events with a ctrl key or ⌘ key pressed zoom the map. In this mode the map cooperates with the page.|  - ""greedy"": All touch gestures and scroll events pan or zoom the map.|  - ""none"": The map cannot be panned or zoomed by user gestures.|  - ""auto"": (default) Gesture handling is either cooperative or greedy, depending on whether the page is scrollable or in an iframe."
ui.Map.setLocked	Sets the lock state on the map. A locked map may not zoom or pan.	Map.setLocked(locked)		ui.map|locked	ui.Map|Boolean	The ui.Map instance.|Whether the map should be locked or not.
ui.Map.setOptions	Modifies the Google Maps basemap.  Allows for: 1) Setting the current MapType. 2) Providing custom styles for the basemap (MapTypeStyles). 3) Setting the list of available mapTypesIds for the basemap.	Map.setOptions(mapTypeId, styles, types)	ui.Map	ui.map|mapTypeId|styles|types	ui.Map|String, optional|Object, optional|List, optional	"The ui.Map instance.|A mapTypeId to set the basemap to. Can be one of ""ROADMAP"", ""SATELLITE"", ""HYBRID"", or ""TERRAIN"" to select one of the standard Google Maps API map types, or one of the keys specified in the opt_styles dictionary. If left as null and only 1 style is specified in opt_styles, that style will be used.|A dictionary of custom MapTypeStyle objects keyed with a name that will appear in the map's Map Type Controls. See: https://developers.google.com/maps/documentation/javascript/reference#MapTypeStyle|A list of mapTypeIds to make available. If omitted, but opt_styles is specified, appends all of the style keys to the standard Google Maps API map types."
ui.Map.setZoom	Sets the zoom level of the map.	Map.setZoom(zoom)	ui.Map	ui.map|zoom	ui.Map|Number	The ui.Map instance.|The zoom level, from 1 to 24, to set for the map.
ui.Map.style	Returns the map's style ActiveDictionary, which can be modified to update the map's styles.	Map.style()	ui.data.ActiveDictionary	ui.map	ui.Map	The ui.Map instance.
ui.Map.unlisten	Deletes callbacks.	Map.unlisten(idOrType)		ui.map|idOrType	ui.Map|String, optional	The ui.Map instance.|Either an ID returned by listen() when a callback was registered, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks registered with that event type are deleted. If nothing is passed, all callbacks are deleted.
ui.Map.widgets	Returns the list of widgets currently in the panel.	Map.widgets()	ui.data.ActiveList	ui.panel	ui.Panel	The ui.Panel instance.
ui.Panel	A widget that can hold other widgets. Use panels to construct complex combinations of nested widgets.	ui.Panel(widgets, layout, style)	ui.Panel	widgets|layout|style	List, optional|String|ui.Panel.Layout, optional|Object, optional	The list of widgets or a single widget to add to the panel. Defaults to an empty array.|The layout to use for this panel. If a string is passed in, it’s taken as a shortcut to the layout constructor with that name. Defaults to 'flow'.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation.
ui.Panel.Layout.absolute	Returns a layout that places its widgets absolutely relative to the panel.	ui.Panel.Layout.absolute()	ui.Panel.Layout
ui.Panel.Layout.flow	Returns a layout that places its widgets in a flow, either horizontal or vertical.	ui.Panel.Layout.flow(direction, wrap)	ui.Panel.Layout	direction|wrap	String, optional|Boolean, optional	The direction of the flow. One of|'horizontal' or 'vertical'. Defaults to 'vertical'.|Whether to wrap children in the layout if there are too many to show in one line. Defaults to false.
ui.Panel.add	Adds a widget to the panel.	Panel.add(widget)	ui.Panel	ui.panel|widget	ui.Panel|ui.Widget	The ui.Panel instance.|The widget to be added.
ui.Panel.clear	Removes all widgets from the panel.	Panel.clear()	ui.Panel	ui.panel	ui.Panel	The ui.Panel instance.
ui.Panel.getLayout	Gets the panel's layout.	Panel.getLayout()	ui.Panel.Layout	ui.panel	ui.Panel	The ui.Panel instance.
ui.Panel.insert	Inserts a widget into to the panel at the specified index.	Panel.insert(index, widget)	ui.Panel	ui.panel|index|widget	ui.Panel|Number|ui.Widget	The ui.Panel instance.|The index at which to insert the widget.|The widget to insert.
ui.Panel.remove	Removes the given widget from the panel, if it exists.	Panel.remove(widget)	Boolean	ui.panel|widget	ui.Panel|ui.Widget	The ui.Panel instance.|The widget to remove.
ui.Panel.setLayout	Sets the panel's layout.	Panel.setLayout(layout)	ui.Panel	ui.panel|layout	ui.Panel|ui.Panel.Layout	The ui.Panel instance.|The new layout.
ui.Panel.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Panel.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Panel.widgets	Returns the list of widgets currently in the panel.	Panel.widgets()	ui.data.ActiveList	ui.panel	ui.Panel	The ui.Panel instance.
ui.Select	A printable select menu with a callback.	ui.Select(items, placeholder, value, onChange, disabled, style)	ui.Select	items|placeholder|value|onChange|disabled|style	List, optional|String, optional|String, optional|Function, optional|Boolean, optional|Object, optional	"The list of options to add to the select. Defaults to an empty array.|The placeholder shown when no value is selected. Defaults to ""Select a value..."".|The select's value. Defaults to null.|The callback to fire when an item is selected. The callback is passed the currently selected value and the select widget.|Whether the select is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation."
ui.Select.getDisabled	Returns whether the select is disabled.	Select.getDisabled()	Boolean	ui.select	ui.Select	The ui.Select instance.
ui.Select.getPlaceholder	Returns the select's placeholder text.	Select.getPlaceholder()	String	ui.select	ui.Select	The ui.Select instance.
ui.Select.getValue	Returns the currently selected value.	Select.getValue()	String	ui.select	ui.Select	The ui.Select instance.
ui.Select.items	See ui.data.ActiveList.	Select.items()	ui.data.ActiveList	ui.select	ui.Select	The ui.Select instance.
ui.Select.onChange	Registers a callback that's fired when an item is selected.	Select.onChange(callback)	String	ui.select|callback	ui.Select|Function	The ui.Select instance.|The callback to fire when an item is selected. The callback is passed the currently selected value and the select widget.
ui.Select.setDisabled	Sets whether the select is disabled.	Select.setDisabled(disabled)	ui.Select	ui.select|disabled	ui.Select|Boolean	The ui.Select instance.|Whether the select is disabled.
ui.Select.setPlaceholder	Sets the select's placeholder text, which is shown when no value is selected.	Select.setPlaceholder(placeholder)	ui.Select	ui.select|placeholder	ui.Select|String	The ui.Select instance.|The select's placeholder text.
ui.Select.setValue	Sets the selected value.	Select.setValue(value, trigger)	ui.Select	ui.select|value|trigger	ui.Select|String|Boolean, optional	The ui.Select instance.|The value to select.|Whether to trigger onChange callbacks when the value property changes. Defaults to true.
ui.Select.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Select.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Select.unlisten	Deletes callbacks.	Select.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Slider	A draggable target that ranges linearly between two numeric values. The value of the slider is displayed as a label alongside it.	ui.Slider(min, max, value, step, onChange, direction, disabled, style)	ui.Slider	min|max|value|step|onChange|direction|disabled|style	Number, optional|Number, optional|Number, optional|Number, optional|Function, optional|String, optional|Boolean, optional|Object, optional	The minimum value. Defaults to 0.|The maximum value. Defaults to 1.|The initial value. Defaults to 0.|The step size for the slider. Defaults to 0.01.|A callback to fire when the slider's state changes. The callback is passed the slider's current value and the slider widget.|The direction of the slider. One of|'horizontal' or 'vertical'. Defaults to 'horizontal'.|Whether the slider is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation.
ui.Slider.getDisabled	Returns whether the slider is disabled.	Slider.getDisabled()	Boolean	ui.slider	ui.Slider	The ui.Slider instance.
ui.Slider.getMax	Returns the slider's maximum value.	Slider.getMax()	Number	ui.slider	ui.Slider	The ui.Slider instance.
ui.Slider.getMin	Returns the slider's minimum value.	Slider.getMin()	Number	ui.slider	ui.Slider	The ui.Slider instance.
ui.Slider.getStep	Returns the slider's step value.	Slider.getStep()	Number	ui.slider	ui.Slider	The ui.Slider instance.
ui.Slider.getValue	Returns the current slider value.	Slider.getValue()	Number	ui.slider	ui.Slider	The ui.Slider instance.
ui.Slider.onChange	Registers a callback that's fired when the slider's state changes. If the change is due to the user dragging the slider, the event will not fire until the drag completes.	Slider.onChange(callback)	String	ui.slider|callback	ui.Slider|Function	The ui.Slider instance.|The callback to fire when the slider's state changes. The callback is passed the slider's current value and the slider widget.
ui.Slider.onSlide	Registers a callback that's fired when the slider's state changes. The callback will be invoked repeatedly while the user is dragging the slider.	Slider.onSlide(callback)	String	ui.slider|callback	ui.Slider|Function	The ui.Slider instance.|The callback to fire when the slider's state changes. The callback is passed the slider's current value.
ui.Slider.setDisabled	Sets whether the slider is disabled.	Slider.setDisabled(disabled)	ui.Slider	ui.slider|disabled	ui.Slider|Boolean	The ui.Slider instance.|Whether the slider is disabled.
ui.Slider.setMax	Sets the maximum value of the slider.	Slider.setMax(value)	ui.Slider	ui.slider|value	ui.Slider|Number	The ui.Slider instance.|The slider's maximum value.
ui.Slider.setMin	Sets the minimum value of the slider.	Slider.setMin(value)	ui.Slider	ui.slider|value	ui.Slider|Number	The ui.Slider instance.|The slider's minimum value.
ui.Slider.setStep	Sets the step value of the slider.	Slider.setStep(value)	ui.Slider	ui.slider|value	ui.Slider|Number	The ui.Slider instance.|The slider's step value.
ui.Slider.setValue	Set the value of the slider.	Slider.setValue(value, trigger)	ui.Slider	ui.slider|value|trigger	ui.Slider|Number|Boolean, optional	The ui.Slider instance.|The value to slider.|Whether to trigger onChange callbacks when the value property changes. Defaults to true.
ui.Slider.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Slider.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Slider.unlisten	Deletes callbacks.	Slider.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.SplitPanel	A widget containing two panels with a divider between them. The divider can be dragged, allowing the panels to be resized. One or both panels may be ui.Map objects.	ui.SplitPanel(firstPanel, secondPanel, orientation, wipe, style)	ui.SplitPanel	firstPanel|secondPanel|orientation|wipe|style	ui.Panel, optional|ui.Panel, optional|String, optional|Boolean, optional|Object, optional	"The left or top panel. Defaults to a new instance of ui.Panel.|The bottom or right panel. Defaults to a new instance of ui.Panel.|One of ""horizontal"" or ""vertical"". Defaults to ""horizontal"".|Whether to enable the wiping effect. When this mode is enabled, both panels take up all available space, and dragging the divider doesn't set the size of the panels but rather determines how much of each panel is shown. This effect is analogous to a ""wipe transition"". This mode is useful for comparing two maps. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this panel. Defaults to an empty object."
ui.SplitPanel.getFirstPanel	Returns the first panel in the split panel.	SplitPanel.getFirstPanel()	ui.Panel	ui.splitpanel	ui.SplitPanel	The ui.SplitPanel instance.
ui.SplitPanel.getOrientation	Returns the panel's orientation.	SplitPanel.getOrientation()	String	ui.splitpanel	ui.SplitPanel	The ui.SplitPanel instance.
ui.SplitPanel.getPanel	Returns the requested panel in the split panel.	SplitPanel.getPanel(index)	ui.Panel	ui.splitpanel|index	ui.SplitPanel|Number	The ui.SplitPanel instance.|0 for top or left panel, 1 for bottom or right panel.
ui.SplitPanel.getSecondPanel	Returns the second panel in the split panel.	SplitPanel.getSecondPanel()	ui.Panel	ui.splitpanel	ui.SplitPanel	The ui.SplitPanel instance.
ui.SplitPanel.getWipe	Returns whether the wiping effect is enabled.	SplitPanel.getWipe()	Boolean	ui.splitpanel	ui.SplitPanel	The ui.SplitPanel instance.
ui.SplitPanel.setFirstPanel	Returns this split panel.	SplitPanel.setFirstPanel(panel)	ui.SplitPanel	ui.splitpanel|panel	ui.SplitPanel|ui.Panel	The ui.SplitPanel instance.|The panel to display left or on top of the split.
ui.SplitPanel.setOrientation	"Sets the panel's orientation; one of ""horizontal"" or ""vertical""."	SplitPanel.setOrientation(orientation)	ui.SplitPanel	ui.splitpanel|orientation	ui.SplitPanel|String	The ui.SplitPanel instance.|The new orientation.
ui.SplitPanel.setPanel	Returns the requested panel in the split panel.	SplitPanel.setPanel(index, panel)	ui.Panel	ui.splitpanel|index|panel	ui.SplitPanel|Number|ui.Panel	The ui.SplitPanel instance.|0 for top or left panel, 1 for bottom or right panel.|The panel to add to the split panel.
ui.SplitPanel.setSecondPanel	Returns this split panel.	SplitPanel.setSecondPanel(panel)	ui.SplitPanel	ui.splitpanel|panel	ui.SplitPanel|ui.Panel	The ui.SplitPanel instance.|The panel to display right of or below the split.
ui.SplitPanel.setWipe	Enables or disables the wiping effect.	SplitPanel.setWipe(wipe)	ui.SplitPanel	ui.splitpanel|wipe	ui.SplitPanel|Boolean	The ui.SplitPanel instance.|Whether to enable the wiping effect.
ui.SplitPanel.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	SplitPanel.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.SplitPanel.unlisten	Deletes callbacks.	SplitPanel.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Textbox	A textbox that enables the user to input text information.	ui.Textbox(placeholder, value, onChange, disabled, style)	ui.Textbox	placeholder|value|onChange|disabled|style	String, optional|String, optional|Function, optional|Boolean, optional|Object, optional	The placeholder text to display when the textbox is empty. Defaults to none.|The textbox's value. Defaults to none.|The callback to fire when the text changes. The callback is passed the text currently in the textbox and the textbox widget.|Whether the textbox is disabled. Defaults to false.|An object of whitelisted CSS styles with their values to be set for this widget. See style() documentation.
ui.Textbox.getDisabled	Returns whether the textbox is disabled.	Textbox.getDisabled()	Boolean	ui.textbox	ui.Textbox	The ui.Textbox instance.
ui.Textbox.getPlaceholder	Returns the textbox's placeholder text.	Textbox.getPlaceholder()	String	ui.textbox	ui.Textbox	The ui.Textbox instance.
ui.Textbox.getValue	Returns the value of the textbox.	Textbox.getValue()	String	ui.textbox	ui.Textbox	The ui.Textbox instance.
ui.Textbox.onChange	Registers a callback that's called when text in the textbox changes.	Textbox.onChange(callback)	String	ui.textbox|callback	ui.Textbox|Function	The ui.Textbox instance.|The callback to fire when the text changes. The callback is passed the text currently in the textbox and the textbox widget.
ui.Textbox.setDisabled	Sets whether the textbox is disabled.	Textbox.setDisabled(disabled)	ui.Textbox	ui.textbox|disabled	ui.Textbox|Boolean	The ui.Textbox instance.|Whether the textbox is disabled.
ui.Textbox.setPlaceholder	Sets the textbox's placeholder text, which is shown when no text is entered.	Textbox.setPlaceholder(placeholder)	ui.Textbox	ui.textbox|placeholder	ui.Textbox|String	The ui.Textbox instance.|The select's placeholder text.
ui.Textbox.setValue	Sets the value of the textbox.	Textbox.setValue(value, trigger)	ui.Textbox	ui.textbox|value|trigger	ui.Textbox|String|Boolean, optional	The ui.Textbox instance.|The value of the textbox.|Whether to trigger onChange callbacks when the value property changes. Defaults to true.
ui.Textbox.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Textbox.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Textbox.unlisten	Deletes callbacks.	Textbox.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.Thumbnail	A fixed-size thumbnail image generated asynchronously from an ee.Image.	ui.Thumbnail(image, params, onClick, style)	ui.Thumbnail	image|params|onClick|style	Image, optional|Object, optional|Function, optional|Object, optional	The ee.Image from which to generate the thumbnail. Defaults to an empty ee.Image.|For an explanation of the possible parameters, see ui.Thumbnail.setParams(). Defaults to an empty object.|A callback fired when the thumbnail is clicked.|An object of whitelisted CSS styles with their values to be set for this label. Defaults to an empty object.
ui.Thumbnail.getImage	Returns the ee.Image for the thumbnail.	Thumbnail.getImage()	Image|ImageCollection	ui.thumbnail	ui.Thumbnail	The ui.Thumbnail instance.
ui.Thumbnail.getParams	See ee.Image.prototype.getThumbnailURL.	Thumbnail.getParams()	Object	ui.thumbnail	ui.Thumbnail	The ui.Thumbnail instance.
ui.Thumbnail.onClick	Registers a callback that's fired when the thumbnail is clicked.	Thumbnail.onClick(callback)	String	ui.thumbnail|callback	ui.Thumbnail|Function	The ui.Thumbnail instance.|The callback to fire when the thumbnail is clicked.  The callback is passed the thumbnail widget.
ui.Thumbnail.setImage	Sets the ee.Image used to generate the thumbnail.	Thumbnail.setImage(image)	ui.Thumbnail	ui.thumbnail|image	ui.Thumbnail|Image	The ui.Thumbnail instance.|The image from which to generate the thumbnail.
ui.Thumbnail.setParams	Sets the parameters used to generate the thumbnail.	Thumbnail.setParams(params)	ui.Thumbnail	ui.thumbnail|params	ui.Thumbnail|Object	The ui.Thumbnail instance.|The parameters used in generating the thumbnail.|  - dimensions (a number or pair of numbers in format WIDTHxHEIGHT) Maximum dimensions of the thumbnail to render, in pixels. If only one number is passed, it is used as the maximum, and the other dimension is computed by proportional scaling.|  - region (E,S,W,N or GeoJSON) Geospatial region of the image to render. By default, the whole image.|  - format (string) Either 'png' or 'jpg'.|  - bands (comma-seprated strings) Comma-delimited list of band names to be mapped to RGB.|  - min (comma-separated numbers) Value (or one per band) to map onto 00.|  - max (comma-separated numbers) Value (or one per band) to map onto FF.|  - gain (comma-separated numbers) Gain (or one per band) to map onto 00-FF.|  - bias (comma-separated numbers) Offset (or one per band) to map onto 00-FF.|  - gamma (comma-separated numbers) Gamma correction factor (or one per band)|  - palette (comma-separated strings) List of CSS-style color strings (single-band previews only).|  - opacity (number) a number between 0 and 1 for opacity.|  - version (number) Version number of image (or latest).
ui.Thumbnail.style	Returns the widget's style ActiveDictionary, which can be modified to update the widget's styles.	Thumbnail.style()	ui.data.ActiveDictionary	ui.widget	ui.Widget	The ui.Widget instance.
ui.Thumbnail.unlisten	Deletes callbacks.	Thumbnail.unlisten(idOrType)		ui.widget|idOrType	ui.Widget|String, optional	The ui.Widget instance.|Either an ID returned by an onEventType() function during callback registration, an event type, or nothing. If an ID is passed, the corresponding callback is deleted. If an event type is passed, all callbacks for that type are deleted. If nothing is passed, all callbacks are deleted.
ui.data.ActiveDictionary	A dictionary-like container for data for use in UI components.	ui.data.ActiveDictionary(object, whitelist)	ui.data.ActiveDictionary	object|whitelist	Object, optional|List, optional	A JavaScript object with properties and values to initialize this object with.|An array of whitelisted properties for this object. If undefined, then any property is allowed.
ui.data.ActiveDictionary.get	Returns either a clone of this object or, if a key is provided, the value of the property with the passed-in key. Look at the constructor's parameters to see which properties are available.	ActiveDictionary.get(key)	Object	ui.data.activedictionary|key	ui.data.ActiveDictionary|String, optional	The ui.data.ActiveDictionary instance.|The key of the property to retrieve.
ui.data.ActiveDictionary.set	Sets the value of a given property. Throws an error if the key provided is not supported by the object. Look at the constructor's parameters to see which properties can be set.	ActiveDictionary.set(keyOrDict, value)	ui.data.ActiveDictionary	ui.data.activedictionary|keyOrDict|value	ui.data.ActiveDictionary|Object|String|Object, optional	The ui.data.ActiveDictionary instance.|Either the key of the property to set or a dictionary of key/value pairs to set on the object.|The property's new value. This is required when the first argument is a key string.
ui.data.ActiveList	An array-like container for data for use in UI components.	ui.data.ActiveList(list)	ui.data.ActiveList	list	List, optional	An optional list to initialize with.
ui.data.ActiveList.add	Appends an element to the list.	ActiveList.add(el)	ui.data.ActiveList	ui.data.activelist|el	ui.data.ActiveList|Object	The ui.data.ActiveList instance.|The element to add.
ui.data.ActiveList.forEach	Iterates over each element, calling the provided callback. The callback is called for each element like: callback(element, index).	ActiveList.forEach(callback)		ui.data.activelist|callback	ui.data.ActiveList|Function	The ui.data.ActiveList instance.|
ui.data.ActiveList.get	Returns the element at the specified index.	ActiveList.get(index)	Object	ui.data.activelist|index	ui.data.ActiveList|Number	The ui.data.ActiveList instance.|The index of the element to return.
ui.data.ActiveList.getJsArray	Returns the list as a JS array.	ActiveList.getJsArray()	List	ui.data.activelist	ui.data.ActiveList	The ui.data.ActiveList instance.
ui.data.ActiveList.insert	Inserts an element at the specified index and shifts the rest of the list. If the specified index is greater than the length of the list, the element will be appended to the list.	ActiveList.insert(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	The ui.data.ActiveList instance.|The index at which to insert the element.|The element to insert.
ui.data.ActiveList.length	Returns the number of elements in the list.	ActiveList.length()	Number	ui.data.activelist	ui.data.ActiveList	The ui.data.ActiveList instance.
ui.data.ActiveList.remove	Removes the specified element from the list.	ActiveList.remove(el)	Object	ui.data.activelist|el	ui.data.ActiveList|Object	The ui.data.ActiveList instance.|The element to remove.
ui.data.ActiveList.reset	Replaces all elements in list with a new list or, if no list is provided, removes all elements from list.	ActiveList.reset(list)	List	ui.data.activelist|list	ui.data.ActiveList|List, optional	The ui.data.ActiveList instance.|A list of elements.
ui.data.ActiveList.set	Sets an element at the specified index. If the index exceeds that of the list's last element, the element will be added to the end of the list.	ActiveList.set(index, el)	ui.data.ActiveList	ui.data.activelist|index|el	ui.data.ActiveList|Number|Object	The ui.data.ActiveList instance.|The index to overwrite.|The element to set.
ui.root.add	Adds a widget to the root panel.	ui.root.add(widget)	ui.Panel	widget	ui.Widget	The widget to be added.
ui.root.clear	Clears the root panel.	ui.root.clear()
ui.root.getLayout	Returns layout The root panel's layout.	ui.root.getLayout()	ui.Panel.Layout
ui.root.insert	Inserts a widget into to the root panel at the specified index.	ui.root.insert(index, widget)	ui.Panel	index|widget	Number|ui.Widget	The index at which to insert the widget.|The widget to insert.
ui.root.onResize	"Registers a callback that's fired when the script starts and whenever the browser window size changes. It will be passed an object with boolean fields ""is_mobile"", ""is_tablet"", ""is_desktop"", ""is_portrait"" and ""is_landscape"", and numeric fields ""width"" and ""height""."	ui.root.onResize(callback)		callback	Function	The callback to fire after the window has been resized. The callback is passed an object with the information of the device.
ui.root.remove	Removes the given widget from the root panel, if it exists.	ui.root.remove(widget)	Object	widget	ui.Widget	The widget to remove.
ui.root.setKeyHandler	Sets a keydown event handler to the root panel with a non-predefined key. The handler is fired only once when a user presses the bound key command. The same key will be bound to the latest handler set to it.	ui.root.setKeyHandler(keyCode, handler, description)		keyCode|handler|description	List|Function|String, optional	A key code or an array of key codes. For example, ui.Key.A or [ui.Key.SHIFT, ui.Key.A].|The handler for the key command.|A short description that explains this key command. The description will be visible in the Shortcuts Menu.
ui.root.setLayout	Sets the ui.root panel's layout.	ui.root.setLayout(layout)	ui.Panel	layout	String|ui.Panel.Layout	The root panel's new layout.
ui.root.widgets	Returns the list of widgets currently in the root panel.	ui.root.widgets()	ui.data.ActiveList
ui.util.clear	Clears all state related to utility functions, including cancelling any active timeouts, intervals, debounces, etc.	ui.util.clear()
ui.util.clearTimeout	Clears a timeout set via ui.util.setTimeout or ui.util.setInterval.	ui.util.clearTimeout(timeoutKey)		timeoutKey	Number	The key to the timeout or interval to clear.
ui.util.debounce	Wraps a function to allow it to be called, at most, once for each sequence of calls fired repeatedly so long as they are fired less than a specified interval apart (in milliseconds). This can be used to reduce the number of invocations of an expensive function while ensuring it eventually runs.	ui.util.debounce(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	The function to debounce.|After the function is called once, the number of milliseconds to delay for an additional invocation of the function before allowing it to run.|Object in whose scope to call the function.
ui.util.getCurrentPosition	Gets the user's current geographic position from the browser's geolocation service.	ui.util.getCurrentPosition(success, error)		success|error	Function|Function, optional	A callback function that takes a ee.Geometry.Point object as its input parameter.|An optional callback function that takes an error message as its input parameter.
ui.util.rateLimit	Wraps a function to allow it to be called, at most, once per interval. If the wrapper function is called more than once, only the first call will go through, and no subsequent invocations will have an effect until the interval has elapsed. This can be used to ensure a function that is expensive to run executes immediately but doesn't execute repeatedly.	ui.util.rateLimit(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	Function to call.|After the function is called and executed, the number of milliseconds to delay before allowing an additional invocation of the function.|Object in whose scope to call the function.
ui.util.setInterval	Repeatedly calls a function with a fixed time delay between each call.	ui.util.setInterval(func, delay)	Number	func|delay	Function|Number	The function to run after the specified delay.|The time, in milliseconds (thousandths of a second), the timer should delay in between executions of the specified function.
ui.util.setTimeout	Calls a function after a fixed time delay.	ui.util.setTimeout(func, delay)	Number	func|delay	Function|Number	The function to run at the specified interval.|The time, in milliseconds (thousandths of a second), the timer should delay before execution of the specified function.
ui.util.throttle	Wraps a function to allow it to be called, at most, twice per interval. If the wrapper function is called multiple times before the delay elapses, only the first and the last calls will go through.	ui.util.throttle(func, delay, scope)	Function	func|delay|scope	Function|Number|Object, optional	The function to call.|The delay, in milliseconds, for the throttle. The function can only be called once after the initial invocation until after the delay has elapsed.|The object in whose scope to call the function.
